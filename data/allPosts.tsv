Id	PostTypeId	AcceptedAnswerId	ParentId	CreationDate	DeletionDate	Score	ViewCount	Body	OwnerUserId	OwnerDisplayName	LastEditorUserId	LastEditorDisplayName	LastEditDate	LastActivityDate	Title	Tags	AnswerCount	CommentCount	FavoriteCount	ClosedDate	CommunityOwnedDate
210217	2		210178.0	2008-10-16 20:40:36		7		"<p>If you have the foreign key relationships defined in your database, and generated the LINQ classes via the designer, then the joins should be represented in the object model, right? So each QItem has a property SItem? If not, I guess you can use the Join extension method for that part. </p>

<p>Anyhow, I didn't test this IRL, but wouldn't it just be this?</p>

<pre><code>var results = (from QItem in dataContext.QItems
                where QItem.SItem.OtherID == 76
                select QItem.HighLevelName).Distinct();
</code></pre>
"	19258.0	Troy Howard				2008-10-16 20:40:36				1			
214442	2		214426.0	2008-10-18 02:41:57		30		"<p>I assume that you're talking about in the where clause.  It's basically the same way you would compare two DateTime objects elsewhere.</p>

<pre><code>using (DataContext context = new DataContext()) {
   var query = from t in context.table
               where t.CreateDate.Date &lt; DateTime.Today.AddMonths(-1)
               select t;
}
</code></pre>
"	12950.0	tvanfosson				2008-10-18 02:41:57				0			
233896	1	255245.0		2008-10-24 14:58:00		4	881.0	"<p>Whenever I drop a new database object from server explorer into the dbml, Visual Studio replaces the connection string in the designer file with a new one that it automatically adds to the connection strings in my config file. They both have exactly the same parameters, just different names.</p>

<p>How do I force Visual Studio to use and keep the connection string I already have?</p>

<p>For example, in the dbml-designer.cs, I have this:</p>

<pre><code>base(global::System.Configuration.ConfigurationManager.ConnectionStrings[""ConnString1""].ConnectionString, mappingSource)
</code></pre>

<p>which is automatically generated. In my config file, I have:</p>

<pre><code>&lt;add name=""DefaultConnString"" connectionString=""EXACTLYTHESAME""
    providerName=""System.Data.SqlClient"" /&gt; &lt;add name=""ConnString1"" connectionString=""EXACTLYTHESAME""
    providerName=""System.Data.SqlClient"" /&gt;
</code></pre>

<p>Where ConnString1 is added automatically whenever I drag a database object to the dbml.</p>

<p>I want the designer.cs to use DefaultConnstring.</p>
"	30604.0	Stefan	30604.0	Stefan	2008-10-31 23:05:03	2012-09-24 11:01:59	Keep ConnectionString in LINQ designer file	<.net><linq>	2.0	0	7.0		
262167	2		262110.0	2008-11-04 15:28:16		12		"<p>One other observation; if you aren't using typed datasets, you might also want to know about the <code>Field&lt;&gt;</code> extension method:</p>

<pre><code>    var customerOrderIds = table.Rows.Cast&lt;DataRow&gt;()
       .Where(x =&gt; x.Field&lt;string&gt;(""CUSTOMER_ID"") == customerId)
       .Select(x =&gt; x.Field&lt;string&gt;(""CUSTOMER_ORDER_ID""))
       .Distinct();
</code></pre>

<p>Or using the query syntax:</p>

<pre><code>   var customerOrderIds = (
        from row in table.Rows.Cast&lt;DataRow&gt;()
        where row.Field&lt;string&gt;(""CUSTOMER_ID"") == customerId
        select row.Field&lt;string&gt;(""CUSTOMER_ORDER_ID"")
     ).Distinct();
</code></pre>

<p>I'm not saying it is better or worse - just another viable option.</p>

<p>(Actually, I don't use <code>DataTable</code> very much, so YMMV)</p>
"	23354.0	Marc Gravell				2008-11-04 15:28:16				2			
325739	2		325725.0	2008-11-28 13:01:46		6		"<p>Rather than try to change existing where clauses, I'd refactor it to this:</p>

<pre><code>from a in things  
where a.Id == b.Id 
where a.Name == b.Name 
where a.Value1 == b.Value1
where a.Value2 == b.Value2
where a.Value3 == b.Value3  
select a;
</code></pre>

<p>That then becomes:</p>

<pre><code>things.Where(a =&gt; a.Id == b.Id)
      .Where(a =&gt; a.Name == b.Name)
      .Where(a =&gt; a.Value1 == b.Value1)
      .Where(a =&gt; a.Value2 == b.Value2)
      .Where(a =&gt; a.Value1 == b.Value3);
</code></pre>

<p>Now it should be reasonably clear how to proceed - conditionalise the calls to Where:</p>

<pre><code>IQueryable&lt;Whatever&gt; query = things;
if (useId) {
    query = query.Where(a =&gt; a.Id == b.Id);
}
query = query.Where(a =&gt; a.Name == b.Name);
if (checkValue1) {
    query = query.Where(a =&gt; a.Value1 == b.Value1);
}
// etc
</code></pre>
"	22656.0	Jon Skeet				2008-11-28 13:01:46				1			
396544	2		396513.0	2008-12-28 19:14:49		11		"<p>For the most part, you shouldn't be passing arrays (<code>T[]</code>) on <code>public</code> interfaces.  See Eric Lippert's blog post ""<a href=""http://blogs.msdn.com/ericlippert/archive/2008/09/22/arrays-considered-somewhat-harmful.aspx"" rel=""noreferrer"">Arrays considered somewhat harmful</a>"" for details.</p>

<p>The exception is methods that take a <code>params</code> array, as it has to be an array.  (Hopefully a future version will allow ""<code>params IList&lt;s&gt; foo</code>"" in method signatures.)</p>

<p>For <code>internal</code> members, do whatever you like; you have control over both sides of the interface.</p>
"	5314.0	Jay Bazuzi				2008-12-28 19:14:49				2			
396601	2		396513.0	2008-12-28 19:56:40		1		"<p>I would choose between IList and IEnumerable and wouldn't consider array at all. </p>

<p>Note that IEnumerable does not have Count or Length property except as an extension method, while array and IList do. So, I would base my decision on that: </p>

<p>If return value has known number of elements -> IList or array (if you must)
otherwise IEnumberable</p>
"	28912.0	bh213				2008-12-28 19:56:40				1			
535531	1	535731.0		2009-02-11 05:28:44		0	171.0	"<p>I have a <code>IEnumerable&lt;T&gt;</code> collection with Name and FullName as items in it. There are around 5000 items in it.</p>

<p>I want to display the FullNames sorted by its lenght, so first the longest name to the shortest name displays. How can I do it in most optimized manner?</p>
"	55428.0	Viks	3957.0	spoon16	2009-02-11 07:30:13	2009-02-11 07:30:13	Ordering items by length in IEnumerable<T>?	<.net><linq>	2.0	0			
545929	2		545885.0	2009-02-13 13:31:59		2		"<p>Call me crazy, but I'm a big fan of readability - so I tend to just have a sequence of individually-innocent-looking expressions that I then combine. Of course, it depends how you define LINQ: if you mean query-syntax in C#, then I don't tend to go overboard...  but if you mean meta-programming (i.e. C# code that <em>creates</em> a LINQ expression), I've got a few good examples:</p>

<ul>
<li>how about some <a href=""http://groups.google.com/group/microsoft.public.dotnet.languages.csharp/msg/d8d38ce6b9b15489"" rel=""nofollow noreferrer"">object-construction with DbLinq</a></li>
<li>I've got the (LINQ) Expression-based maths interpreter/compiler that I wrote for <a href=""http://marcgravell.blogspot.com/"" rel=""nofollow noreferrer"">Finguistics</a> kicking around somewhere...</li>
<li>the <a href=""http://www.yoda.arachsys.com/csharp/miscutil/usage/genericoperators.html"" rel=""nofollow noreferrer"">generic operators</a> code I wrote for MiscUtil is all Expression-based</li>
<li>various object copying examples (<a href=""http://groups.google.com/group/microsoft.public.dotnet.languages.csharp/msg/0edae91abc1c0f1a"" rel=""nofollow noreferrer"">like this</a>)</li>
<li><a href=""http://groups.google.com/group/microsoft.public.dotnet.languages.csharp/msg/7d931ec0e2356d21"" rel=""nofollow noreferrer"">complex OrderBy construction</a></li>
</ul>
"	23354.0	Marc Gravell	23354.0	Marc Gravell	2009-02-13 13:37:31	2009-02-13 13:37:31				0			
571265	1	571269.0		2009-02-20 21:17:21		5	1593.0	"<p><strong>Big Subjective Question:</strong> I often find myself using LINQ to filter a set of objects and then, after the query, doing an old fashion foreach to perform an action on each of the results. Is there a good way of combining these two tasks such that an action is performed on each object that matches the Where() predicate? Almost like passing an Action into the Select(). That probably would not compile, but what about passing in a Func that returns a bool, then you could nest that inside another query that could do something with the failures or successes. Has anyone done this in production code? Would this be considered bad practice? Any other thoughts?</p>
"	470.0	flipdoubt				2009-02-20 22:13:38	Is it bad practice to use LINQ to loop over and perform actions rather than just select data?	<.net><linq>	3.0	0	3.0		
589570	1	589592.0		2009-02-26 07:56:51		1	146.0	"<p>I would like to see an example that makes the best use of the ALL operator when using a parent child reltaionship in LINQ. Can you show me one please?</p>
"	55428.0	Viks	23354.0	Marc Gravell	2009-02-26 08:06:27	2009-02-26 19:44:37	Using the All operator	<.net><linq>	4.0	1	1.0		
777419	2		777400.0	2009-04-22 14:13:58		3		"<p>Here is one, <a href=""http://blogs.lessthandot.com/index.php/DataMgmt/DataDesign/linq-to-sql-queries-involving-strings-ca"" rel=""nofollow noreferrer"">LINQ to SQL queries involving strings cause SQL Server procedure cache bloat</a>
 People need to be aware of that</p>
"	740.0					2009-04-22 14:13:58				0			
777421	2		777400.0	2009-04-22 14:14:28		16		"<p>The biggest mistake people make when using LINQ is the same as when people try to use any sort of technology that lies on top of a technology that they don't have any good grounding in.</p>

<p>If you can't understand proper/efficient DB querying, you will screw up with LINQ.</p>

<p>If you can't understand the basic fundamentals of ADO.NET and data access, you'll probably screw up.</p>

<p>People think that by using LINQ it will allow them to coast by, but it won't.</p>
"	22164.0					2009-04-22 14:14:28				2			
779183	2		779146.0	2009-04-22 20:51:29		19		"<ul>
<li>Almost anything to do with collections is easier with LINQ to Objects. I find that much more useful than LINQ to SQL.</li>
<li>I've become rather fond of a framework that Marc Gravell and I developed called <a href=""http://web.archive.org/web/20090614011041/http://msmvps.com/blogs/jon_skeet/archive/2008/01/04/quot-push-quot-linq-revisited-next-attempt-at-an-explanation.aspx"" rel=""nofollow noreferrer"">Push LINQ</a> (currently part of <a href=""http://pobox.com/~skeet/csharp/miscutil"" rel=""nofollow noreferrer"">MiscUtil</a>, but probably moving to <a href=""http://code.google.com/p/morelinq/"" rel=""nofollow noreferrer"">MoreLINQ</a> eventually). This is great for calculating aggregates over large streaming data sets, e.g. huge log files</li>
<li>LINQ to XML is the nicest XML API I've used, and it integrates really nicely with LINQ to Objects.</li>
<li>Parallel LINQ is a very nice part of the Parallel Extensions framework - it certainly makes it easier to parallelize tasks where it's appropriate (although it can go <a href=""http://msmvps.com/blogs/jon_skeet/archive/2007/12/04/a-cautionary-parallel-tale-ordering-isn-t-simple.aspx"" rel=""nofollow noreferrer"">hideously wrong</a> if you're not careful)</li>
</ul>
"	22656.0		303290.0		2015-06-09 09:23:01	2015-06-09 09:23:01				1			
919491	2		919483.0	2009-05-28 06:41:04		1		"<p>I dont recall SQL having a timespan type. time would simply be the hour part of a day.</p>

<p>From MSDN (for time datatype):</p>

<blockquote>
  <p>Defines a time of a day. The time is
  without time zone awareness and is
  based on a 24-hour clock.</p>
</blockquote>
"	15541.0		15541.0		2009-05-28 06:51:45	2009-05-28 06:51:45				1			
1620616	2		1620606.0	2009-10-25 10:53:05		6		"<p>You would have to ask the designers but it is clear that allowing any (boolean) expression would allow way too much possibilities. Using a special keyword like <code>equals</code> makes it much easier to constrain it to the specification as 2 proper columns.</p>

<p>I found a discussion on <a href=""http://www.danielmoth.com/Blog/2007/03/equals-versus.html"" rel=""nofollow noreferrer"">The Moth</a>.</p>
"	60761.0		60761.0		2009-10-25 11:12:47	2009-10-25 11:12:47				1			
1842246	2		1842228.0	2009-12-03 19:18:06		1		"<p>EDIT: Okay, as the relationship is the opposite of what I expected, you're looking for entities such that no entity has it as the previous one.</p>

<p>One option:</p>

<pre><code> Where(x =&gt; !fullList.Any(y =&gt; y.PrevEntityId == x.Id));
</code></pre>

<p>Now, if your query is actually being executed in SQL it would be worth seeing what that generates - it may well not be efficient. It pretty definitely <em>won't</em> be efficient in LINQ to Objects. For LINQ to Objects, you'd be better off with:</p>

<pre><code> HashSet&lt;string&gt; prevIds = new HashSet&lt;string&gt;(fullList.Select(x =&gt; x.PrevId));
 var heads = fullList.Where(x =&gt; !prevIds.Contains(x));
</code></pre>

<p>If you could more information about your environment, that would help us to help you.</p>
"	22656.0		22656.0		2009-12-03 21:21:01	2009-12-03 21:21:01				2			
2000146	2		1997951.0	2010-01-04 15:18:56		1		"<p>You can do:</p>

<pre><code>myCollection.Where(x =&gt; x is SubB &amp;&amp; (x as SubB).IsAwesome);
</code></pre>
"	233646.0		63550.0		2010-01-04 15:42:04	2010-01-04 15:42:04				0			
2066496	1	2066594.0		2010-01-14 18:24:42		1	1618.0	"<p>I'm developing a POS system and I need to check whether the database tables on each terminal are out of sync.</p>

<p>I maintain a Dictionary of terminal information, each of which has Dictionary containing table ids with a CRC for each table.  Below is simplified description of what I've got so far (i'm using VB.NET but I've stripped out a lot of stuff to hopefully clarify things):</p>

<pre><code>e.g.   TerminalList = Dictionary(Of Integer, TerminalInfo)

       class TerminalInfo
         TerminalID: Integer
         TableCRCs: Dictionary(Of String, TableInfo)

       class TableInfo
         TableID: String
         CRC: UInt32


       TerminalID: 1
          TableID: A   CRC: aa10
          TableID: B   CRC: 1234

       TerminalID: 2
          TableID: A   CRC: aa10
          TableID: B   CRC: 1234

       TerminalID: 3
          TableID: A   CRC: 12be
          TableID: B   CRC: 1234
</code></pre>

<p>Is it possible for me to create a LINQ query that will build a list of distinct TableIDs and CRC's?</p>

<pre><code>i.e. A  aa10
     A  12be
     B  1234
</code></pre>

<p>If the count of this query is greater than the number of tables that i'm interested in then I know that a terminal is out of sync.  I'm not interested in which terminal or which table  is out of sync, only that there is a difference.</p>

<p>TIA,</p>

<p>Simon</p>
"	35453.0					2010-01-14 18:38:37	Querying Nested Dictionaries using LINQ	<.net><linq>	1.0	0			
2094419	2		2094359.0	2010-01-19 15:08:17		2		"<p>LINQ's great -- but use caution on introducing additional technologies, especially when your company has already settled on a standard.  There is nothing more annoying to a developer and costly to a business than having to support 100 different ways of doing the same thing.</p>
"	225239.0		59111.0		2010-01-19 15:22:43	2010-01-19 15:22:43				0			2010-01-19 15:08:17
2094562	2		2094359.0	2010-01-19 15:28:19		1		"<p>I think you could make also make the case that he'd be keeping both the project and his personal skill set in step with the latest tools and developments... just as a bonus to all of the above.</p>
"	250784.0					2010-01-19 15:28:19				0			2010-01-19 15:28:19
2114343	2		779146.0	2010-01-22 01:29:29		13		"<p>I used LINQ to solve some of <a href=""http://projecteuler.net/"" rel=""noreferrer"">Project Euler</a> in single C# statements.  (Note that statements aren't the same as lines)</p>

<p>Beware: Evil nasty tricks.</p>

<pre><code>//Euler 1
//Add all the natural numbers below one thousand that are multiples of 3 or 5.
Enumerable.Range(0, 1000).Where(i =&gt; i % 5 == 0 || i % 3 == 0).Sum()

//Euler 2
//Find the sum of all the even-valued terms in the sequence which do not exceed four million
//Enumerable.Repeat(new List&lt;long&gt;(1024){ 1, 1 }, 1).First(fib =&gt; Enumerable.Range(0, int.MaxValue).TakeWhile(i =&gt; fib.Last() &lt;= 4000000)
    .Aggregate(true, (u1, u2) =&gt; { fib.Add(fib.Last() + fib[fib.Count - 2]); return true; })).Where(n =&gt; n % 2 == 0).Sum()

//Euler 3 (&gt;32bit)
//What is the largest prime factor of the number 600851475143?
Enumerable.Range(2, Int32.MaxValue - 2).Where(n =&gt; 600851475143 % n == 0 &amp;&amp; Enumerable.Range(2, n / 2 - 1).All(f =&gt; n % f &gt; 0)).Max()

//Euler 4
//Find the largest palindrome made from the product of two 3-digit numbers.
Enumerable.Range(100, 900).SelectMany(x =&gt; Enumerable.Range(100, 900).Select(y =&gt; x * y))
                          .Where(n =&gt; { var s = n.ToString(); return s.SequenceEqual(s.Reverse()); }).Max()

//Euler 5 (&gt;32bit)
//What is the smallest number divisible by each of the numbers 1 to 20?
Enumerable.Range(20, Int32.MaxValue - 21).Where(n =&gt; Enumerable.Range(1, 20).All(i =&gt; n % i == 0)).First()

//Euler 6
//Find the difference between the sum of the squares of the first one hundred natural numbers and the square of the sum.
Math.Pow(Enumerable.Range(1, 100).Sum(), 2) - Enumerable.Range(1, 100).Select(i =&gt; i * i).Sum()

//Euler 7
//Find the 10001st prime.
Enumerable.Range(2, Int32.MaxValue - 1).Where(n =&gt; Enumerable.Range(2, n / 2 - 1).All(f =&gt; n % f &gt; 0)).Skip(10000).First()

//Euler 8
//Discover the largest product of five consecutive digits in the 1000-digit number.
Enumerable.Range(0, 995).Select(i =&gt; ""7316717653133062491922511967442657474235534919493496983520312774506326239578318016984801869478851843858615607891129494954595017379583319528532088055111254069874715852386305071569329096329522744304355766896648950445244523161731856403098711121722383113622298934233803081353362766142828064444866452387493035890729629049156044077239071381051585930796086670172427121883998797908792274921901699720888093776657273330010533678812202354218097512545405947522435258490771167055601360483958644670632441572215539753697817977846174064955149290862569321978468622482839722413756570560574902614079729686524145351004748216637048440319989000889524345065854122758866688116427171479924442928230863465674813919123162824586178664583591245665294765456828489128831426076900422421902267105562632111110937054421750694165896040807198403850962455444362981230987879927244284909188845801561660979191338754992005240636899125607176060588611646710940507754100225698315520005593572972571636269561882670428252483600823257530420752963450""
    .Substring(i,5).Select(c =&gt; c - '0').Aggregate(1, (x, y) =&gt; x * y)).Max()


//Euler 10
//Find the sum of all the primes below two million.
Enumerable.Range(2, 2000000).Where(n =&gt; Enumerable.Range(2, n / 2 - 1).All(f =&gt; n % f &gt; 0)).Select(x =&gt; (long)x).Sum()

Enumerable.Range(0, 168).Aggregate(Enumerable.Range(2, 2000000).Select(x =&gt; (long)x).ToList(), (result, index) =&gt; { result.RemoveAll(i =&gt; i &gt; result[index] &amp;&amp; i % result[index] == 0); return result; }).Sum()

Enumerable.Repeat(Enumerable.Range(2, 2000000).Select(x =&gt; (long)x).ToList(), 1).SelectMany(list =&gt; Enumerable.Range(0, Int32.MaxValue).Select(i =&gt; new { List = list, Index = i }))
    .TakeWhile((g, i) =&gt; g.List[g.Index] * g.List[g.Index] &lt;= 2000000 || i.Dump(""Rounds"") != i).Aggregate((List&lt;long&gt;) null, (result, g) =&gt; { g.List.RemoveAll(i =&gt; i &gt; g.List[g.Index] &amp;&amp; i % g.List[g.Index] == 0); return g.List; }).Sum()

Enumerable.Repeat(Enumerable.Range(2, 2000000).Select(x =&gt; (long)x).ToList(), 1).First(list =&gt; Enumerable.Range(0, Int32.MaxValue)
    .TakeWhile(i =&gt; list[i] * list[i] &lt;= 2000000 || i.Dump(""Rounds"")!=i).Aggregate(0, (count, i) =&gt; count + list.RemoveAll(j =&gt; j &gt; list[i] &amp;&amp; j % list[i] == 0)) != null).Sum()

//Euler 14
Enumerable.Range(1, 1000000).Select(s =&gt; Enumerable.Repeat(new List&lt;long&gt;(32) { s }, 1).First(list =&gt; Enumerable.Range(0, Int32.MaxValue).TakeWhile(i =&gt; list.Last() &gt; 1)
    .Aggregate(0, (index, unused) =&gt; { list.Add(list.Last() % 2 == 0 ? list.Last() / 2 : 3 * list.Last() + 1); return 1; }) == 1 || true))
    .Aggregate(new List&lt;long&gt;(), (list, result) =&gt; list.Count &lt;= result.Count ? result : list)

//Euler 19
//How many Sundays fell on the first of the month during the twentieth century?
Enumerable.Range(1901,100).SelectMany(y =&gt; Enumerable.Range(1,12).Select(m =&gt; new DateTime(y, m, 1))).Where(d =&gt; d.DayOfWeek == DayOfWeek.Sunday)

//Euler 21
//Evaluate the sum of all the amicable numbers under 10000.
Enumerable.Repeat(new Func&lt;int, int&gt;(n =&gt; Enumerable.Range(1, n / 2).Where(d =&gt; n % d == 0).Sum()), 1)
          .Select(D =&gt; Enumerable.Range(1, 10000).Where(a =&gt; a == D(D(a)) &amp;&amp; a != D(a)).Sum())

//Euler 34
//Find the sum of all numbers which are equal to the sum of the factorial of their digits.
Enumerable.Range(3, 40600).Where(n =&gt; n == n.ToString().Select(d =&gt; Enumerable.Range(1, d - '0').Aggregate(1, (r, i) =&gt; r * i)).Sum()).Sum()

//Euler 40  
Enumerable.Repeat(new StringBuilder(), 1)
    .Where(result =&gt; Enumerable.Range(0, Int32.MaxValue)
                               .TakeWhile(i =&gt; result.Length &lt;= 1000000)
                               .Aggregate(result, (unused, index) =&gt; result.Append(index)) != null)
    .Select(result =&gt; Enumerable.Range(1, 6).Select(i =&gt; result[(int)Math.Pow(10, i)] - '0')).First().Aggregate(1, (x, y) =&gt; x * y)
</code></pre>

<p>Other LINQ one-liners:</p>

<pre><code>//Primes (Ineffecient)
Enumerable.Range(2, 1000000).Where(n =&gt; Enumerable.Range(2, n / 2 - 1).All(f =&gt; n % f &gt; 0)).Count()

//Sieve of Eratosthenes
Enumerable.Range(0, 168)
          .Aggregate(Enumerable.Range(2, 1000000).ToList(), (result, index) =&gt; { 
               result.RemoveAll(i =&gt; i &gt; result[index] &amp;&amp; i % result[index] == 0); 
                return result; 
            }).Count
//Prime Factors
Enumerable.Range(2,13195 / 2)
          .Where(n =&gt; 13195 % n == 0
                   &amp;&amp; Enumerable.Range(2, n / 2 - 1).All(f =&gt; n % f &gt; 0))

//Fibonacci
Enumerable.Repeat(new List&lt;long&gt;(32){ 1, 1 }, 1)
    .First(fib =&gt; Enumerable.Range(0, 32).Aggregate(true, (u1, u2) =&gt; { 
        fib.Add(fib.Last() + fib[fib.Count - 2]); 
        return true; 
    }))
</code></pre>
"	34397.0					2010-01-22 01:29:29				1			
2657421	1	2657436.0		2010-04-17 05:50:25		0	321.0	"<p>Say I have a structure like:</p>

<pre><code>class SomeObject
   Public Name as String
   Public Created as Date
   ...
end class
</code></pre>

<p>I have a List(of SomeObject), which has multiple entries for each name with different times. I'd like to select the newest (largest Created value) object for each Name.</p>

<p>Given:</p>

<pre><code>Name   Created
A      2010-04-16     *
A      2010-04-15
B      2010-04-12
B      2010-04-13     *
C      2010-04-16     *
</code></pre>

<p>I'd like to pick the objects with the * beside them.</p>

<p>Is this possible using LINQ?</p>
"	7913.0					2010-04-17 05:59:13	LINQ group by and getting latest value	<.net><linq>	1.0	0			
2724246	2		2724096.0	2010-04-27 19:13:15		295		"<h3>If you're expecting a Single record, it's always good to be explicit in your code.</h3>

<p>I know others have written why you use one or the other, but I thought I'd illustrate why you should NOT use one, when you <strong>mean</strong> the other.</p>

<p><em>Note: In my code, I will typically use <code>FirstOrDefault()</code> and <code>SingleOrDefault()</code> but that's a different question.</em></p>

<p>Take, for example, a table that stores <code>Customers</code> in different languages using a Composite Key ( <code>ID</code>, <code>Lang</code> ): </p>

<pre><code>DBContext db = new DBContext();
Customer customer = db.Customers.Where( c=&gt; c.ID == 5 ).First();
</code></pre>

<p>This code above introduces a possible logic error ( difficult to trace ). It will return more than one record ( assuming you have the customer record in multiple languages ) but it will always return only the first one... which may work sometimes... but not others. It's unpredictable.</p>

<p>Since your intent is to return a Single <code>Customer</code> use <code>Single()</code>;</p>

<p>The following would throw an exception ( which is what you want in this case ):</p>

<pre><code>DBContext db = new DBContext();
Customer customer = db.Customers.Where( c=&gt; c.ID == 5 ).Single();
</code></pre>

<p>Then, you simply hit yourself on the forehead and say to yourself... OOPS! I forgot the language field! Following is the correct version:</p>

<pre><code>DBContext db = new DBContext();
Customer customer = db.Customers.Where( c=&gt; c.ID == 5 &amp;&amp; c.Lang == ""en"" ).Single();
</code></pre>

<p><code>First()</code> is useful in the following scenario:</p>

<pre><code>DBContext db = new DBContext();
NewsItem newsitem = db.NewsItems.OrderByDescending( n =&gt; n.AddedDate ).First();
</code></pre>

<p>It will return ONE object, and since you're using sorting, it will be the most recent record  that is returned.</p>

<p>Using <code>Single()</code> when you feel it should explicitly always return 1 record will help you avoid logic errors.</p>
"	26931.0		26931.0		2015-11-10 20:38:39	2015-11-10 20:38:39				11			
60025	2		59840.0	2008-09-12 21:42:47		0		"<p>Try actually looking at the output from your datacontext before you pass judgement.</p>

<p>DataContext.Log() will give you the generated SQL.</p>
"	1965.0	Jonathan Holland				2008-09-12 21:42:47				0			
255245	2		233896.0	2008-10-31 23:25:13		5		"<p>There's a good post that pretty much explains your options here: </p>

<p><a href=""http://blog.jongallant.com/2007/11/linq-web-app-connection-strings.html#.UGA8Q42PUg0"" rel=""nofollow noreferrer"">http://blog.jongallant.com/2007/11/linq-web-app-connection-strings.html#.UGA8Q42PUg0</a></p>
"	11917.0	Timothy Khouri	1578925.0		2012-09-24 11:01:59	2012-09-24 11:01:59				1			
262127	2		262110.0	2008-11-04 15:19:01		0		"<p>You're not getting carried away at all.  There are actual works published on LINQ to DataSets.  Having such clear, declarative object queries makes for much easier code maintainability.  But you have to remember at the time you're filtering the data all of it has already been pulled back.  You may want to consider adding the filtering to the SQL for the DataSet query.</p>
"	25416.0	Chad Moran				2008-11-04 15:19:01				0			
271431	2		271384.0	2008-11-07 07:17:41		3		"<p>My favorite part: using them to simplify writing unit tests.  Also IEnumerable chains have urged me to write more fluent interfaces in my code.</p>

<p>Cons: Lambdas and extension methods are my hammers and all problems are nails.</p>

<p>Overall: breathed new life into programming in C# for me.</p>
"	5645.0	cfeduke				2008-11-07 07:17:41				1			
271462	2		271384.0	2008-11-07 07:41:23		1		"<p>There is a problem with them of sneaking exceptions out of try catch blocks by way of delayed execution.</p>

<p>for example:</p>

<pre><code>var l = new List&lt;int&gt;() {1, 2, 3};
try
{
    l.Select(x =&gt; x / 0);
}
catch
{
    // error
}

l.elementAt(0); // exception occurs here outside of the try catch
</code></pre>

<p>Which can be tricky the first time you run into it, especially as the debugger will point you at the code inside the try-catch.</p>

<p>Otherwise I find them incredibly useful and very time saving.</p>
"	291137.0	Toby				2008-11-07 07:41:23				1			
330240	1	330251.0		2008-12-01 07:47:45		1	1056.0	"<p>This is a puzzle for me, I am able to get three DropDownLists to behave like a cascade (it fetches the correct data) but where I run into problem is where I try to set the value for the dropdownlist based on the value of the querystring.  </p>

<p>Only the first dropdownlist seems to take it's value from the querystring.  The other two does not.  In fact the 3rd DropDownlist will also exhibit the error below (it almost looks like the control isn't bound yet:</p>

<pre><code>'ddlStation' has a SelectedValue which is invalid because it does not exist in the list of items.
Parameter name: value
</code></pre>

<p>FYI, here is the portion that sets the DropDownList in the Page_Load event:</p>

<pre><code>// see if there is any querystring and set dropdownlist accordingly
                if (Request.QueryString[""cell""] != null)
                {
                    ddlCell.SelectedValue = Request.QueryString[""cell""].ToString();
                    if (Request.QueryString[""subcell""] != null)
                    {
                        ddlSubCell.SelectedValue = Request.QueryString[""subcell""].ToString();
                        if (Request.QueryString[""station""] != null)
                        {
                            ddlStation.SelectedValue = Request.QueryString[""station""].ToString();
                        }
                    }
                }
</code></pre>

<p>Any help is appreciated!</p>
"	40559.0		40559.0	mrsaiful	2008-12-01 14:13:38	2008-12-01 14:13:38	Setting LinqDataSource bound DropDownList using URL querystring	<.net><linq>	2.0	0	1.0		
396697	2		396513.0	2008-12-28 21:18:36		14		"<p>I went through a phase of passing around <code>T[]</code>, and to cut a long story short, it's a pain in the backside. <code>IEnumerable&lt;T&gt;</code> is much better</p>

<blockquote>
  <p><em>However I wonder, with the late evaluation of the IEnumerable generic type if that is a good idea. Does it make more sense to use the T[] generic type? IList? Or something else</em></p>
</blockquote>

<p>Late evaluation is precisely why <code>IEnumerable</code> is so good. Here's an example workflow:</p>

<pre><code>IEnumerable&lt;string&gt; files = FindFileNames();
IEnumerable&lt;string&gt; matched = files.Where( f =&gt; f.EndsWith("".txt"") );
IEnumerable&lt;string&gt; contents = matched.Select( f =&gt; File.ReadAllText(f) );
bool foundContents = contents.Any( s =&gt; s.Contains(""orion"") );
</code></pre>

<p>For the impatient, this gets a list of filenames, filters out <code>.txt</code> files, then sets the <code>foundContents</code> to true if any of the text files contain the word <code>orion</code>.</p>

<p>If you write the code using <code>IEnumerable</code> as above, you will only load each file one by one as you need them. Your memory usage will be quite low, and if you match on the first file, you prevent the need to look at any subsequent files. It's great.</p>

<p>If you wrote this exact same code using arrays, you'd end up loading all the file contents up front, and only then (if you have any RAM left) would any of them be scanned. Hopefully this gets the point across about why lazy lists are so good.</p>

<blockquote>
  <p><em>One thing that has not gotten addressed though seems to be the issue of thread safety. If, for example, you take an <code>IEnumerable&lt;T&gt;</code> argument to a method and it gets enumerated in a different thread, then when that thread attempts to access it the results might be different than those that were meant to be passed in. Worse still, attempting to enumerate an <code>IEnumerable&lt;T&gt;</code> twice - I believe throws an exception. Shouldn't we be striving to make our methods thread safe?</em></p>
</blockquote>

<p>Thread safety is a giant red herring here.</p>

<p>If you used an array rather than an enumerable, it <em>looks</em> like it should be safer, but it's not. Most of the time when people return arrays of objects, they create a new array, and then put the old objects in it. If you return that array, then those original objects can then be modified, and you end up with precisely the kind of threading problems you're trying to avoid.</p>

<p>A <em>partial</em> solution is to not return an array of the original objects, but an array of new or cloned objects, so other threads can't access the original ones. This is useful, however there's no reason an <code>IEnumerable</code> solution can't also do this. One is no more threadsafe than the other.</p>
"	234.0	Orion Edwards				2008-12-28 21:18:36				4			
396729	2		396513.0	2008-12-28 21:43:01		0		"<p>Implementing a interpreted programming language written in C#, I also needed to choose between the return value of type object[] and List for Linq-like functions as map  and filter. In the end I choose the lazy variant of the Lisp-like list. There is a list constructor that has IEnumerable argument: z = new LazyList(...). Whenever the program refers to one of the properties of LazyList (head, tail or isempty), the enumerable is evaluated for just one step (head and isempty become definite, tail becomes another lazy list). The advantage of a lazylist over an IEnumerable is that the former allows recursive algorithms and does not (have to) suffer from multiple evaluations.</p>
"		Jan Tolenaar				2008-12-28 21:43:01				0			
535538	2		535531.0	2009-02-11 05:31:46		1		"<p>It would help to have some more information about exactly what your data structures look like.  But I think that this LINQ query should get you started.</p>

<pre><code>var orderedItems = from name in nameList
                   order by name.FullName.Length descending
                   select name;
</code></pre>

<p>Here is a whole set of <a href=""http://msdn.microsoft.com/en-us/vcsharp/aa336756.aspx"" rel=""nofollow noreferrer"">LINQ Order By examples</a>.</p>
"	3957.0	spoon16	3957.0	spoon16	2009-02-11 07:28:10	2009-02-11 07:28:10				3			
571274	2		571265.0	2009-02-20 21:21:11		2		"<p>You could implement an extension <a href=""http://msdn.microsoft.com/en-us/library/bwabdf9z.aspx"" rel=""nofollow noreferrer"">ForEach</a> method on IEnumerable.</p>
"	67561.0	MohitC				2009-02-20 21:21:11				0			
585116	2		585080.0	2009-02-25 08:08:32		6		"<p>Are you using Linq-to-SQL ?  Do you want to insert a new record while only specifying the Name?</p>

<p>If so, this is roughly how it's done in C#.</p>

<pre><code>using (StudentDataContext db = new StudentDataContext())
{
    Student newStudent = new Student();
    newStudent.SName = ""Billy-Bob"";
    db.Students.InsertOnSubmit(newStudent);
    db.SubmitChanges();
}
</code></pre>
"	29823.0	Damien	29823.0		2013-04-02 00:48:00	2013-04-02 00:48:00				4			
589592	2		589570.0	2009-02-26 08:04:06		1		"<p>The All() extension method checks a predicate against all the items; for example, at execution:</p>

<pre><code>if(order.Lines.All(l=&gt;l.IsClosed)) order.Close();
</code></pre>

<p>(checks all lines are closed, and if so, closes the order)</p>

<p>of in a query:</p>

<pre><code>var qry = from order in ctx.Orders
         where order.CustomerId = id
         select new {
            order.OrderId,
            IsShipped = order.Lines.All(l =&gt; l.IsShipped)
         };
</code></pre>
"	23354.0	Marc Gravell				2009-02-26 08:04:06				2			
648782	1	648784.0		2009-03-15 23:14:49		4	3819.0	"<p>This is in response to this <a href=""https://stackoverflow.com/questions/315966/how-do-you-construct-a-linq-to-entities-query-to-load-child-objects-directly-ins/550118#550118"">question</a> in the answers section of another question.</p>

<p>I have a collection of Orders, each Order a collection of OrderItems, and each OrderItem has a PartId. Using LINQ how do I implement the following SQL statements:</p>

<p>1) Select all the orders that have a specific part ID</p>

<pre><code>SELECT *
FROM Order
WHERE Id in (SELECT OrderId FROM OrderItems WHERE PartId = 100)
</code></pre>

<p>2) Select the Order.OrderNumber and OrderItem.PartName</p>

<pre><code>SELECT Order.OrderNumber, OrderItem.PartName
FROM Order INNER JOIN OrderItem ON Order.Id = OrderItem.OrderId
WHERE OrderItem.partId = 100
</code></pre>

<p>3) SELECT the Order.OrderNumber and the whole OrderItem detail:</p>

<pre><code>SELECT Order.OrderNumber, OrderItem.*
FROM Order INNER JOIN OrderItem ON Order.Id = OrderItem.OrderId
WHERE OrderItem.partId = 100
</code></pre>
"	10784.0	Robert Wagner	-1.0		2017-05-23 09:57:50	2009-03-15 23:15:03	How do I create a where condition on a sub table in LINQ	<.net><linq>	1.0	0	2.0		
652749	2		652742.0	2009-03-17 01:33:14		5		"<p>Building up a query within a foreach loop</p>

<pre><code>IEnumerable&lt;char&gt; query = ""Not what you might expect"";
foreach(char vowel in ""aeiou"")
{
    query = query.Where(c =&gt; c != vowel);
}
</code></pre>

<p>The above code only removes the ""u"" from the string because of deferred execution.</p>

<p>In order to remove all the vowels you need to do the following:</p>

<pre><code>IEnumerable&lt;char&gt; query = ""Not what you might expect"";
foreach(char vowel in ""aeiou"")
{
    char temp = vowel;
    query = query.Where(c =&gt; c != temp);
}
</code></pre>
"	39532.0	mezoid				2009-03-17 01:33:14				2			
2726352	1	2726407.0		2010-04-28 01:53:25		1	134.0	"<p>is it possible to do multiple joins:</p>

<pre><code>from g in dataContext.Groups
join ug in dataContext.UsersGroups on g.Id equals ug.GroupId
join u in dataContext.Users on u.
where ug.UserId == user.Id
select GroupRepository.ToEntity(g);
</code></pre>

<p>in the sample above all is fine until i press ""."" in the end of the 3rd line. there i expect to get intellisense and write <code>u.Id == ug.UserId</code> but it doesn't appear. and of course this code doesn't compile after.</p>

<p>what did i wrong?</p>

<p><strong>ANSWER</strong>: the order of aliases is important. so i've used <code>ug.UserId equals u.Id</code></p>
"	251311.0		251311.0		2010-04-28 02:13:11	2010-04-28 02:13:11	linq2sql and multiple joins	<.net><linq>	1.0	3			
2893601	1	2893608.0		2010-05-23 21:46:21		15	29178.0	"<p>I migrated an asp.net app to 4.0. Now I am getting an error ""The type or namespace name 'IQueryable' could not be found"". The reference to System.Linq is invalid and I can't find it in the reference list. Where did System.Linq go?</p>
"	129001.0					2010-05-23 21:48:09	Where is System.Linq in .NET 4.0?	<.net><linq>	3.0	0	2.0		
2893612	2		2893601.0	2010-05-23 21:48:09		1		"<p>It's in the System.Core.dll assembly.</p>
"	183367.0					2010-05-23 21:48:09				0			
3073445	2		3073406.0	2010-06-18 22:25:08		4		"<p>Instead, call <a href=""http://msdn.microsoft.com/en-us/library/system.enum.getvalues.aspx"" rel=""nofollow noreferrer""><code>Enum.GetValues</code></a>, like this:</p>

<pre><code>IEnumerable&lt;int&gt; _myTypes = (int[])Enum.GetValues(typeof(MyEnum));
</code></pre>
"	34397.0					2010-06-18 22:25:08				0			
3343100	2		3343089.0	2010-07-27 11:28:27		0		"<p>Think it as querying objects using a sql-like syntax.
Here is an example copied from <a href=""http://msdn.microsoft.com/en-us/vcsharp/aa336746.aspx"" rel=""nofollow noreferrer"">http://msdn.microsoft.com/en-us/vcsharp/aa336746.aspx</a></p>

<pre><code>public void Linq1()
{
    int[] numbers = { 5, 4, 1, 3, 9, 8, 6, 7, 2, 0 };

    var lowNums =
        from n in numbers
        where n &lt; 5
        select n;

    Console.WriteLine(""Numbers &lt; 5:"");
    foreach (var x in lowNums)
    {
        Console.WriteLine(x);
    }
}
</code></pre>
"	386610.0					2010-07-27 11:28:27				0			
3444227	2		3444188.0	2010-08-09 21:08:58		1		"<p>with a projection:</p>

<pre><code>var result = ctx.Source.Where(...).Select(i =&gt; CostCentre == """" ? ""Unknown"" : CostCentre);
</code></pre>

<p>should give you a IQuerialable of strings.</p>
"	178517.0					2010-08-09 21:08:58				0			
3575638	2		3575575.0	2010-08-26 13:42:01		1		"<p>LINQ itself works against the IEnumerable types, so can work with any size collection (even infinite sequences, provided that the result is calculatable - e.g. you can take the first five figures from a infinite series of numbers, but not find out the maximum).</p>

<p>The real bottleneck and performance issues will depend on where you are getting your data from. For example, LINQ to SQL will try and generate a SQL query to push most of the work onto the database, whereas LINQ to objects will require all the information to be in-memory and will be much slower when processing millions of records. </p>
"	69824.0					2010-08-26 13:42:01				0			
3863644	2		3862854.0	2010-10-05 12:36:32		0		"<p>RPM1984 is correct. Here is the other way to do join that which, while more cumbersome, is worth mentioning:</p>

<pre><code>TableOne
    .Join(
        TableTwo,
        x =&gt; x.TableOneID, //selector for the outer table (TableOne)
        x =&gt; x.TableOneFK, //selector for the inner table (TableTwo).  These values are what the tables are joined on
        (o,i) =&gt; new { Outer = o, Inner = i, Property = o.Property } //new anonymous class where o is a record from TableOne, and i is a record from TableTwo
    );
</code></pre>

<p>You don't have to return an anonymous class if you don't want to though.  The return of a join really can be whatever you want it to be.  you could just return 'o.Property' if that's all you want, or just 'o'.  Feel free to play around with it to return whatever it is you want!</p>
"	464094.0					2010-10-05 12:36:32				0			
4381088	1	4381157.0		2010-12-07 20:10:17		2	135.0	"<p>I have this linq to sql query:</p>

<pre><code>var items =
    from i in context.Items
    orderby i.itemId descending
    select new ItemWithCategories
    {
        item = i,
        categories = (
            from cats in context.categories 
            join ic in context.itemCategories 
                on cats.categoryId equals ic.categoryId
            where ic.itemId == i.itemId
            select cats).ToList()
    };
</code></pre>

<p>It's three tables. I need to join the categories with the items but there is a table in between (many-to-many). Is there a better to do this query ?</p>
"	76152.0		50776.0		2010-12-07 20:35:32	2010-12-07 20:39:03	How to optimize this linq query?	<.net><linq>	2.0	1			
4508729	2		4508668.0	2010-12-22 11:31:27		2		"<p>I can't answer whether there's a sound theoretical reason for it - but to me, we are dealing with two distinct concepts. I'll misuse language and talk about lists, rather than enums, but the same arguments should apply: There is a big difference between there being a list which contains no items, and the list not being present at all.</p>

<hr>

<p>And personally, given your listed code options, I'd go with one you didn't list (if it makes sense to have a settable enumerable, and your class really can work with any enumerable):</p>

<pre><code>public class Foo
{
  private IEnumerable&lt;IBar&gt; _bars = Enumerable.Empty&lt;IBar&gt;();;
  public IEnumerable&lt;IBar&gt; Bars
  { 
    get { return _bars;  }
    set {
        if(value==null) throw new ArgumentNullException(""value"");
         _bars = value;
    }
  }
}
</code></pre>

<p>i.e. Don't let nulls creep into <em>your</em> design if you don't want to deal with them</p>
"	15498.0					2010-12-22 11:31:27				2			
4653669	1			2011-01-11 02:42:55		0	84.0	"<p>Given I don't know if the parameter will be null or not and I want to use it in the following way:
if Param != null then compare with its id
if Param == null then compare with null.</p>

<p>Something like that:</p>

<pre><code>var c = from cat in context.Categories
where ParamCat != null &amp;&amp; cat.ParentId == ParamCat.Id 
||
ParamCat == null &amp;&amp; cat.ParentId == null
select c;
</code></pre>

<p>If ParamCat is null as soon as I try to get something from c (for example c.Count()) it throws the exception.</p>

<p>Usually when we use some kind of condition it stop comparison as soon as condition fail especially if we use AND. For example this code will not cause any exception:</p>

<pre><code>if (ParamCat != null &amp;&amp;  cat.ParentId == RaramCat.Id)
{
}
</code></pre>

<p>If so, why the linq code above throw exception? (Null reference)</p>

<p>Thanks</p>
"	46503.0					2011-01-11 02:58:06	Linq: comparison with nonexisting value should not cause the exception, but it does	<.net><linq>	2.0	0			
5013472	1	5013597.0		2011-02-16 07:06:34		12	16961.0	"<p>I have two tables A &amp; B. I can fire Linq queries &amp; get required data for individual tables.
As i know what each of the tables will return as shown in example. 
But, when i join both the tables i m not aware of the return type of the Linq query. This problem can be solved by creating a class which will hold ID,Name and Address properties inside it. but,everytime before writing a join query depending on the return type i will have to create a class which is not a convinient way
Is there any other mathod available to achieve this</p>

<pre><code>  private IList&lt;A&gt; GetA()
    {
        var query = from a in objA
                    select a;
        return query.ToList();
    }

    private IList&lt;B&gt; GetB()
    {
        var query = from b in objB
                    select b;
        return query.ToList();
    }

    private IList&lt;**returnType**?&gt; GetJoinAAndB()
    {
        var query = from a in objA
                    join b in objB
                    on a.ID equals b.AID
                    select new { a.ID, a.Name, b.Address };
        return query.ToList();
    }
</code></pre>
"	367339.0		15541.0		2011-02-16 07:19:51	2016-08-11 09:48:57	What is the return type of my linq query?	<.net><linq>	4.0	1	6.0		
676504	2		676500.0	2009-03-24 08:12:37		362		"<pre><code>var list = new List&lt;string&gt;();
var queryable = list.AsQueryable();
</code></pre>

<p>Add a reference to: <code>System.Linq</code></p>
"	13552.0	Greg Beech	1661209.0		2014-01-03 12:12:32	2014-01-03 12:12:32				1			
777415	2		777400.0	2009-04-22 14:12:23		3		"<p>Possibly, one of the misconceptions people might have is that the way a LINQ query is written, especially LINQ2SQL, has no impact on performance. One should always know what goes on in the background, if one intends to write code that has high performance, otherwise you might end up with interesting timeouts, OOMexceptions, stack overflow and such... =)</p>
"	64976.0					2009-04-22 14:12:23				8			
777448	2		777400.0	2009-04-22 14:19:13		0		"<p>I think understanding the point of the query execution is often a mistake (i.e. believing it's at the point of the query rather than at the point the data is first accessed), along with the belief that just because it compiles that it's going to run.</p>

<p>This in reference to Linq to SQL.</p>

<p>A fantastic tool for Linq is <a href=""http://www.linqpad.net/"" rel=""nofollow noreferrer"">LinqPad</a> by Joe Albahari, allowed me to learn Linq so much more quickly. If you don't have it, get it! And I'm not even on commission ;)</p>
"	19540.0					2009-04-22 14:19:13				0			
779163	2		779146.0	2009-04-22 20:48:38		1		"<p>Chalie Calvert <a href=""http://blogs.msdn.com/charlie/archive/2006/10/05/Links-to-LINQ.aspx"" rel=""nofollow noreferrer"">blog</a> has listing of some good linq  providers .</p>

<p><a href=""http://ayende.com/Blog/archive/2007/03/17/Implementing-Linq-for-NHibernate-A-How-To-Guide--Part.aspx"" rel=""nofollow noreferrer"">Nhibernate to Linq</a></p>

<p>I mention this because it exposes lot of challenges implementing linq provider to solve a complex problem</p>
"	70551.0		70551.0		2009-04-23 14:20:11	2009-04-23 14:20:11				0			
876054	1	876064.0		2009-05-18 02:45:04		1	130.0	"<p>Lets suppose that I have the following simple query</p>

<pre><code>var q = 
    from p in products
    orderby p.ProductName descending
    select p;
</code></pre>

<p>What would be the simplest and most straightforward way to specify the sort field and direction at runtime?</p>
"	20137.0		20137.0		2009-05-18 05:33:56	2009-05-18 05:33:56	How do I specify the sorting field and direction in a linq query at runtime?	<.net><linq>	2.0	0			
968573	1	968595.0		2009-06-09 07:01:13		9	6471.0	"<p>I have a XElement that maps like follows:</p>

<pre><code>&lt;book&gt;
    &lt;author&gt;sadfasdf&lt;/author&gt;
    &lt;title&gt;asdfasdf&lt;/title&gt;
    &lt;year&gt;1999&lt;/year&gt;
&lt;/book&gt;
&lt;book&gt;
    &lt;author&gt;asdfasdf&lt;/author&gt;
    &lt;title&gt;asdfasdf&lt;/title&gt;
    &lt;year&gt;1888&lt;/year&gt;
&lt;/book&gt;
&lt;book&gt;
    &lt;author&gt;asdfsdf&lt;/author&gt;
    &lt;title&gt;asdfasdf&lt;/title&gt;
    &lt;year&gt;1777&lt;/year&gt;
&lt;/book&gt;
</code></pre>

<p>How can I sort the books by author or title or year? Thanks</p>
"	42636.0					2017-12-06 06:35:47	Sorting an XElement	<.net><linq>	2.0	0	2.0		
1014040	2		1014001.0	2009-06-18 17:27:25		1		"<p>Are you disposing of the DataContext on every iteration (i.e., are you creating the datacontext with a ""using"" statement?).  If so, then you will be opening and closing the connection every time.  Otherwise, it would depend on your code I guess - if you've got a private variable that goes in and out of scope on each loop, then it would be the same effect.</p>

<p>Why can't you just create one DataContext outside of the loop and use it?  This is the recommended practice for repository classes.</p>
"	63756.0					2009-06-18 17:27:25				2			
1099333	1	1099349.0		2009-07-08 17:01:42		2	61.0	"<p>Imagine an in-house application aimed at the very technical user. The app maintains data. There isn't a <em>heck</em> of a load of data, but there is enough to make some sort of a query mechanism necessary.</p>

<p>The application's UI is very simple. It basically allows the user to enter a query (as text), and shows the data matching that query.</p>

<p>Had the back-end of the app been an SQL database, the user could just type the body of the WHERE clause. The app wouldn't be particularly friendly, but it would be acceptable for this task.</p>

<p>However, the data is not in a database. It's accessible through an <code>IEnumerable&lt;&gt;</code>.</p>

<p>Is there a reasonably easy way of getting similar functionality without writing a whole parser for a made-up query language? Ideally in the form of a free library, which provides something like the LINQ <code>.Where&lt;&gt;</code> method, except that the method takes the textual query entered by the user?</p>
"	33080.0					2009-07-08 17:04:57	How to enable the user to arbitrarily query IEnumerable collections?	<.net><linq>	1.0	0			
5013514	2		5013472.0	2011-02-16 07:10:55		14		"<p>You've created an anonymous class - you can't really return it. A simple solution is to add a class to represent your type.</p>

<p>For example:</p>

<pre><code>public class UserWithAddress
{
    public UserWithAddress(int id, string name, string address)
    {
        ID = id;
        Name = name;
        Address = address;
    }

    // you may have your own types here
    public int ID { get; set; }
    public String Name { get; set; }
    public String Address { get; set; }
}
</code></pre>

<p>And then:</p>

<pre><code>private IList&lt;UserWithAddress&gt; GetJoinAAndB()
{
    var query = from a in objA
                join b in objB
                on a.ID equals b.AID
                select new UserWithAddress(a.ID, a.Name, b.Address);
    return query.ToList();
}
</code></pre>
"	7586.0					2011-02-16 07:10:55				0			
5013597	2		5013472.0	2011-02-16 07:22:27		1		"<p>The value you generate is called Anonymous Type and you can return it unless you return <code>object</code> like:</p>

<pre><code>private object GetJoinAAndB()
{
    var query = from a in objA
                join b in objB
                on a.ID equals b.AID
                select new { a.ID, a.Name, b.Address };
    return query.ToList();
}
</code></pre>

<p>There are two good solutions:<br>
1. is to generate a class to match the output and generate it like Kobi solution<br>
2. if you are using .net 4 you can return a <code>dynamic</code> type like</p>

<pre><code>private dynamic GetJoinAAndB()
{
    var query = from a in objA
                join b in objB
                on a.ID equals b.AID
                select new { a.ID, a.Name, b.Address };
    return query.ToList();
}
</code></pre>

<p>then you can use it later. You can search the internet about the advantage of using <code>dynamic</code> keyword.</p>
"	70439.0		3375713.0		2016-08-11 09:48:57	2016-08-11 09:48:57				2			
5031771	2		5031726.0	2011-02-17 16:37:32		152		"<p>TakeWhile stops when the condition is false, Where continues and find all elements matching the condition</p>

<pre><code>var intList = new int[] { 1, 2, 3, 4, 5, -1, -2 };
Console.WriteLine(""Where"");
foreach (var i in intList.Where(x =&gt; x &lt;= 3))
    Console.WriteLine(i);
Console.WriteLine(""TakeWhile"");
foreach (var i in intList.TakeWhile(x =&gt; x &lt;= 3))
    Console.WriteLine(i);
</code></pre>

<p>Gives</p>

<pre><code>Where
1
2
3
-1
-2
TakeWhile
1
2
3
</code></pre>
"	401728.0					2011-02-17 16:37:32				0			
5185643	2		5185532.0	2011-03-03 19:41:26		0		"<p>You can't store the sort order in the database unless you have a sort order field in the datatable (or an association with a sort order table that stores the original table's field as an FK).  If you have this field then in your linq query do, <code>OrderBy(x=&gt;x.SortOrder)</code></p>

<p>So you have database record projection </p>

<pre><code>   public class ObjectFromDb{
        int Id{get;set;}
        int SortOrder{get;set;}
   } 
</code></pre>

<p>When you get the <code>IQueryable&lt;ObjectFromDb&gt; queryable</code> and the <code>int[] newSortOrder</code> , do this:</p>

<pre><code>     var oldSortedList = queryable.OrderBy(x=&gt;x.SortOrder).ToList()
     foreach(var i=0;i&lt;oldSortedList.Count;i++;){
        oldSortedList[i].SortOrder = newSortOrder[i];
     }
     dataContext.SubmitChanges();
</code></pre>
"	344211.0		344211.0		2011-03-03 20:03:07	2011-03-03 20:03:07				1			
5200891	2		5200873.0	2011-03-05 00:58:30		0		"<p>I think it is not posible. Linq is available since .net framework 3.0. you should migrate you app.</p>
"	124515.0					2011-03-05 00:58:30				0			
5215565	2		5215469.0	2011-03-07 03:35:30		7		"<p>The <a href=""http://social.msdn.microsoft.com/Forums/en-US/rx/threads"" rel=""noreferrer"">Reactive Extensions for .NET (Rx)</a> has an extension method that does exactly what you want:</p>

<pre><code>var buffered = allPendingPersons.BufferWithCount(10);
</code></pre>

<p>If you want to do it using LINQ you could do this:</p>

<pre><code>var buffered =
    allPendingPersons
        .Select((p, i) =&gt; new { Group = i / 10, Person = p })
        .GroupBy(x =&gt; x.Group, x =&gt; x.Person)
        .Select(g =&gt; g.ToArray());
</code></pre>
"	259769.0					2011-03-07 03:35:30				0			
5446481	2		5446463.0	2011-03-27 00:59:24		2		"<p>This doesn't look like it has to do with the number of objects, since it's the error message from <code>NullReferenceException</code>.</p>

<p>I think that there's simply some element among those you are processing that does not exist even though you are expecting it, so you get the null reference.</p>

<p>Try commenting out <em>all</em> the property setters in the initialization list (<code>select new GetMPResult</code>) -- if it doesn't throw, it means you found the problem.</p>
"	50079.0					2011-03-27 00:59:24				5			
5821845	2		5821832.0	2011-04-28 16:23:18		6		"<p>You were almost there - right now you are projecting to an anonymous type (using <code>new {}</code> ) - to project to a class instance instead you need to specify the class name, so assuming your  <code>Book</code> class has public properties <code>Title</code> and <code>Author</code>:</p>

<pre><code>List&lt;Book&gt; books = (from q in _XmlConnection.Descendants(""BookShelf"")
                                select new Book()
                                {
                                    Title = q.Element(""title"").Value,
                                    Author = q.Element(""autor"").Value
                                }).ToList();
</code></pre>

<p>Edit: Your example was using the type <code>Books</code> - I assume though that the class that holds the properties of a single book is named <em>Book</em> (singular).</p>
"	329769.0		329769.0		2011-04-28 16:29:47	2011-04-28 16:29:47				1			
5821846	2		5821832.0	2011-04-28 16:23:19		3		"<pre><code>List&lt;Books&gt; books = (from q in _XmlConnection.Descendants(""BookShelf"")
                                select new Book()
                                {
                                    Title = q.Element(""title"").Value,
                                    Author = q.Element(""autor"").Value
                                }).ToList();
</code></pre>
"	283676.0					2011-04-28 16:23:19				1			
5977295	1	5977671.0		2011-05-12 11:31:33		2	162.0	"<p>I need to intersect 2 arrays (<code>List&lt;T&gt;</code>) by keeping just the distinct elements and mix the elements of one array with the other like this:</p>

<pre><code>    A1 B1 C1 D1
    W2 X2 Y2 Z2 
 =&gt; A1 W2 B1 X2 C1 Y2 D1 Z2


    A1 B1 A1 D1
    W2 X2 Y2 Z2 
 =&gt; A1 W2 B1 X2 Y2 D1 Z2 // repeating A1


    A1 B1 A1 D1
    Z2 X2 Y2 Z2 
 =&gt; A1 Z2 B1 X2 Y2 D1  // repeating A1, Z2

    A1 B1 C1 D1 E1
    Z2 X2 Y2 
 =&gt; A1 Z2 B1 X2 C1 Y2 D1 E1
</code></pre>

<p>What is the optimal LINQ query to do it? </p>
"	185593.0		185593.0		2011-05-12 11:47:03	2011-05-12 12:35:36	Mix 2 arrays using LINQ	<.net><linq>	3.0	5	0.0		
6582388	1	6582462.0		2011-07-05 12:06:31		1	4151.0	"<p>I have something like </p>

<pre><code>SELECT [t0].[Id], [t1].[Id], [t1].[DepartmentId]
FROM [ScannedDocuments] AS [t0]
INNER JOIN [Documents_RelatedDepartments] AS [t1]
    ON  (([t0].[Id] = [t1].[Id]) AND (1 = [t1].[DepartmentId]))
     OR (([t0].[Id] = [t1].[Id]) AND (56 = [t0].InsertById))
</code></pre>

<p>results as expected on sql server but I couldn't translate it to Linq. Any thoughts?</p>

<p>Thanks in advance.</p>
"	599979.0		15541.0		2011-07-05 13:03:28	2011-07-05 13:03:28	LINQ Join multiple conditions with OR operator	<.net><linq>	3.0	0			
6582505	2		6582388.0	2011-07-05 12:17:34		0		"<p>There's a simpler query.  Also note that the Id's are constrained to being the same by the join so you don't need both in the output.</p>

<pre><code>db.ScannedDocuments
  .Where( s =&gt; s.InsertById == 56)
  .Join( db.Documents_RelatedDepartments
           .Where( d =&gt; d.DepartmentId == 1 ),
         o =&gt; o.Id,
         i =&gt; i.Id,
         (o,i) =&gt; new { o.Id, i =&gt; i.DepartmentId } )
</code></pre>
"	12950.0					2011-07-05 12:17:34				1			
6750999	2		6750492.0	2011-07-19 16:58:20		0		"<p>If Performance matters to you, use <code>Array.Reverse()</code>.
<code>System.Linq.Enumerable.Reverse()</code> has the advantage of working on every IEnumerable like Arrays, Lists and so on.</p>
"	44952.0					2011-07-19 16:58:20				0			
6961727	1	6962036.0		2011-08-05 19:39:14		1	1214.0	"<p>I'm curious how exactly the Enity Framework integrates with LINQ in order to generate SQL statements to run against the database.</p>

<p>So lets say I have my own custom collection object. How do you integrate that object with LINQ to generate SQL statements?</p>
"	178014.0					2015-07-02 00:44:06	Implement LINQ to SQL/Entity like behavior in custom object	<.net><linq>	3.0	2	1.0		
7041262	1			2011-08-12 14:06:25		2	237.0	"<p>I have to filter a list of objects. </p>

<p>The filter should be composed by users using logical OR / AND operators, and grouping using brackets.</p>

<p>say, something like this: </p>

<p><img src=""https://i.stack.imgur.com/FfKiI.jpg"" alt=""enter image description here""></p>

<p>Say, we have object MyPerson and its properties Prop1, Prop2, etc... </p>

<p>Having myPersons list the user could filter elements: say 
<em>Prop1 == aValue AND Prop2 &lt; otherValue OR Prop2 > thirdvalue</em> etc...</p>

<p>Now, I can build the chain of expression from the atoms (thanks to Jon Skeet from <a href=""https://stackoverflow.com/q/7040349/185593"">this question</a>), like this:</p>

<pre><code>Func&lt;Person, bool&gt; isAdult = person =&gt; person.Age &gt; 18;
Func&lt;Person, bool&gt; isInParis = person =&gt; person.Location == ""Paris"";

var adultInParis = And(isAdult, isInParis);
</code></pre>

<p>My problem now is to transform the strings from the grid ""Age"", "">"", ""18"" in the function expression ""person.Age > 18"", in order to link with an other one from the other row.</p>
"	185593.0		-1.0		2017-05-23 12:01:09	2011-08-18 16:41:12	"Transform ""Age"", "">"", ""18"" in function ""person.Age > 18"""	<.net><linq>	1.0	5			
7067549	2		7067513.0	2011-08-15 16:15:39		3		"<p>Well this might be dependent on timezone data that can get tricky but assuming simplicity you can do..</p>

<pre><code>from a in dc.Accounts
where a.lastUpdateTime &gt;= DateTime.Now.AddMinutes(-1)
select a;
</code></pre>
"	12707.0					2011-08-15 16:15:39				0			
7130597	2		7128588.0	2011-08-20 08:08:52		0		"<p>My suggestion is replace <code>!</code> with <code>== false</code></p>

<pre><code>if (ObjectCollection.Any(o =&gt; o.Property == SomeValue) == false)
    // ...
</code></pre>

<p>And</p>

<pre><code>if (IntCollection.Contains(42) == false)
    // ...
</code></pre>
"	259946.0					2011-08-20 08:08:52				0			
7221766	2		7221753.0	2011-08-28 15:10:49		1		"<p>You can flatten the result from the second query using <code>SelectMany()</code>:</p>

<pre><code>var newEnumerable =
    arrayOne.Select(stringOne =&gt; arrayTwo.Select(stringTwo =&gt; new SomeObject(stringOne, stringTwo)).SelectMany(x =&gt; x);
</code></pre>
"	675502.0					2011-08-28 15:10:49				1			
7250467	1			2011-08-30 22:18:21		2	643.0	"<p>I read some great tips here regarding getting decent SQL to be generated from LINQ to EF.  The LINQ query below is what I came up with.  (I formulated the following LINQ query based on existing code that I am now augmenting, plus tips from this forum.)</p>

<p>The resulting SQL being captured shows that the WHERE clause is using a bunch of successive ORs, rather than an IN.  Is there a way to force this translation to IN?</p>

<pre><code>      string[] circuits = circuitIDList.ToArray();
       using (var ctx = new MyEntities())
        {
            var q = from n in ctx.v_myview
                    where circuits.Contains(n.circuitid)
                    select n;

            string tSQL = q.ToTraceString();

            return q.ToList();
        }
</code></pre>
"	920610.0					2011-08-30 22:46:22	"LINQ to EF - Simulating SQL ""IN"" clause"	<.net><linq>	1.0	0			
7250541	2		7250467.0	2011-08-30 22:27:01		5		"<p>There is no way of providing ""hints"" to the Linq query provider of how you want your Linq statement to be translated - this is totally up to the provider. In this case the provider might decide on a particular mapping (WHERE .. IN vs OR) for one reason or another (i.e. performance), but both are <em>logically</em> equivalent.</p>

<p>Having said that, both queries actually do result in the same execution plan (at least for SQL server), so performance wise it should not make a difference.</p>
"	329769.0		329769.0		2011-08-30 22:46:22	2011-08-30 22:46:22				1			
7439194	1	7439524.0		2011-09-16 01:18:54		2	220.0	"<p>Suppose I have a dictionary object of String, List (of String) that looks like.</p>

<pre><code>BU1
--All, BU
CON1
--ALL, EMP, CONF, CON1
SS1
--ALL, EMP, SS
</code></pre>

<p>How can I get an object that contains a lists of distinct matches like so...</p>

<pre><code>ALL, ALL, ALL --&gt; Distinct is ALL
ALL, EMP, ALL --&gt; Distinct is ALL, EMP
ALL, EMP, EMP --&gt; Distinct is ALL, EMP --&gt; exists don't add
BU, ALL, ALL --&gt; Distinct is BU, ALL
BU, EMP, ALL --&gt; Distinct is BU, EMP, ALL
BU, EMP, EMP --&gt; Distinct is BU, EMP
</code></pre>

<p>etc</p>

<p>This should be really simple and I've played with LINQ Intersect and Except and recursive functions but I haven't hit on a winning combination.</p>

<p>This list is just a mini example. The real list would be much bigger in both breadth and width.</p>

<p>Thanks in advance.</p>
"	751377.0		751377.0		2011-09-16 01:49:57	2011-09-16 04:01:35	Get unique pairings from dictionary object in .Net	<.net><linq>	1.0	7			
59840	1	59854.0		2008-09-12 20:07:19		2	676.0	"<p>I found a bug in the Contains statement in Linq (not sure if it is really in Linq or Linq to SQL) and want to know if anyone else has seen this and if there is a fix or workaround.</p>

<p>If the querysource you do the contains with has more than 10 items in it, it does not pass the items correctly to the SQL query. It is hard to explain what it does, an example will show it best.</p>

<p>If you look at the raw query, the parameters look like this:</p>

<pre><code>@P0 = 'aaa'
@P1 = 'bbb'
@P2 = 'ccc'
... [@P3 through @P9]
@P10 = '111'
@P11 = '222'
... [@p12 through @P19]
@P20 = 'sss'
... [@P21 through @P99]
@P100 = 'qqq'
</code></pre>

<p>when the values are passed into the final query (all parameters resolved) it has resolved the parameters as if these were the values passed:</p>

<pre><code>@P0 = 'aaa'
@P1 = 'bbb'
@P2 = 'ccc'
...
@P10 = 'bbb'0
@P11 = 'bbb'1
...
@P20 = 'ccc'0
...
@P100 = 'bbb'00
</code></pre>

<p>So it looks like the parameter resolving looks at the first digit only after the <code>@P</code> and resolves that, then adds on anything left at the end of the parameter name.</p>

<p>At least that is what the Sql Server Query Visualizer plugin to Visual Studio shows the query doing.</p>

<p>Really strange.</p>

<p>So if any one has advice please share. Thanks!</p>

<p><strong>Update:</strong><br>
I have rewritten the original linq statement to where I now use a join instead of the Contains, but would still like to know if there is a way around this issue.</p>
"	1215.0	Carlton Jenke	3070052.0	Carlton Jenke	2015-09-17 12:02:13	2015-09-17 12:02:13	bug in linq Contains statement - is there a fix or workaround?	<.net><linq>	2.0	2			
210322	2		210178.0	2008-10-16 21:07:48		2		"<p>Using the answer by Troy, this query methods also works.</p>

<pre><code>List&lt;string&gt; highLevelNames = dataContext
  .Q
  .Where&lt;Q&gt;(item =&gt; item.S.OtherID == id)
  .Select&lt;Q, string&gt;(item =&gt; item.HighLevelNAme)
  .Distinct()
  .ToList&lt;string&gt;();
</code></pre>
"	2469.0	Longhorn213	2469.0		2012-07-06 21:03:34	2012-07-06 21:03:34				1			
396513	1	396697.0		2008-12-28 18:49:48		12	2633.0	"<p>As I've been incorporating the Linq mindset, I have been more and more inclined to pass around collections via the <code>IEnumerable&lt;T&gt;</code> generic type which seems to form the basis of most Linq operations.</p>

<p>However I wonder, with the late evaluation of the <code>IEnumerable&lt;T&gt;</code> generic type if that is a good idea.  Does it make more sense to use the <code>T[]</code> generic type?  <code>IList&lt;T&gt;</code>?  Or something else?</p>

<p><strong>Edit:</strong>  The comments below are quite interesting.  One thing that has not gotten addressed though seems to be the issue of thread safety.  If, for example, you take an <code>IEnumerable&lt;T&gt;</code> argument to a method and it gets enumerated in a different thread, then when that thread attempts to access it the results might be different than those that were meant to be passed in.  Worse still, attempting to enumerate an <code>IEnumerable&lt;T&gt;</code> twice - I believe throws an exception.  Shouldn't we be striving to make our methods thread safe?</p>
"	5056.0	George Mauer	5314.0	Jay Bazuzi	2008-12-28 20:47:06	2009-03-09 14:27:10	Should parameters/returns of collections be IEnumerable<T> or T[]?	<.net><linq>	8.0	1	12.0		
468142	2		467077.0	2009-01-22 05:38:58		2		"<p>From <a href=""https://stackoverflow.com/questions/163887/sql-query-simulating-an-and-over-several-rows-instead-of-sub-querying#163907"">here</a>, this is some sql that will work for you:</p>

<pre><code>SELECT entityID
FROM tags
WHERE tagID in (...) --taglist
GROUP BY entityID
HAVING COUNT(DISTINCT tagID) = ... --tagcount
</code></pre>

<p>Now the trick is getting Linq to produce it...  Here's some LinqToSql code:</p>

<pre><code>public List&lt;int&gt; GetEntityIds(List&lt;int&gt; tagIds)
{
  int tagCount = tagIds.Count;

  CustomDataContext myDC = new CustomDataContext();

  List&lt;int&gt; entityIds = myDC.Tags
    .Where(t =&gt; tagIds.Contains(t.TagId))
    .GroupBy(t =&gt; t.entityId)
    .Where(g =&gt; g.Select(t =&gt; t.TagId).Distinct().Count() == tagCount)
    .Select(g =&gt; g.Key)

  return entityIds;
}
</code></pre>

<p>A few caveats apply:</p>

<ul>
<li>List(T).Contains is translated by LinqToSql, but LinqToEntities will not translate it.  You will instead get a runtime exception.</li>
<li>IList.Contains... nobody translates that.  Use List(T) instead.</li>
<li>There is a parameter count limit in effect for sql server.  It's approximately 2000 parameters (higher, but lower than 2500).  If you need to use more than 2000 tags, you should seek a different solution.</li>
<li>I wrote this without tools, after midnight.  It's probably not perfect.</li>
</ul>
"	8155.0	David B	-1.0		2017-05-23 11:49:26	2009-01-22 05:38:58				0			
262124	2		262110.0	2008-11-04 15:18:21		5		"<p>Seems good to me - although I'd try to use a strongly typed data set which makes the LINQ queries look even more pleasant.</p>

<p>But yes, LINQ is a very good thing - and LINQ to Objects (and the surrounding technologies for XML and DataSets) is fabulously predictable compared to the out-of-process LINQ providers. (It's less <em>sexy</em> than LINQ to SQL, but more widely applicable IMO.)</p>
"	22656.0	Jon Skeet				2008-11-04 15:18:21				0			
262190	2		262110.0	2008-11-04 15:30:55		0		"<p>LINQ is simply writing the ""looping/temp variable"" code for you. LINQ helps you to write code faster (and more readable).</p>

<p>You're code is good.</p>
"	11917.0	Timothy Khouri				2008-11-04 15:30:55				0			
271384	1	271415.0		2008-11-07 06:33:02		26	16068.0	"<ul>
<li>What are the pros and cons of LINQ (Language-Integrated Query)?</li>
<li>What are the best and worst cases in which to use LINQ?</li>
<li>How have you benefitted or not benefitted from using LINQ?</li>
<li>Which data sources benefit the least and the most from LINQ?</li>
</ul>
"	35331.0	Middletone	16587.0	Gortok	2008-11-28 03:48:59	2017-04-25 13:42:03	Pros and Cons of LINQ (Language-Integrated Query)	<.net><linq>	5.0	1	17.0		
271608	2		271384.0	2008-11-07 09:24:17		1		"<p>I've used LINQ mainly to work on collection of objects. LINQ works wonderfully with object collections, removing the need of predicate functions in most cases.</p>

<p>I tried using LINQ to SQL a little while ago, but found it underpowered and clumsy. In particular I couldn't bring myself to use the SQL Database class designer. Maybe it does give intellisense on the database, but who needs it when you've got SQL?</p>

<p>Let me tell you though, it's certainly a good idea to learn more about LINQ, as the applications in the future should only increase.</p>
"	33052.0	Cyril Gupta				2008-11-07 09:24:17				0			
325725	1	325739.0		2008-11-28 12:51:34		2	2446.0	"<p>Starting with the following LINQ query:</p>

<pre><code>from a in things  
where a.Id == b.Id &amp;&amp;  
a.Name == b.Name &amp;&amp;  
a.Value1 == b.Value1 &amp;&amp;  
a.Value2 == b.Value2 &amp;&amp;  
a.Value3 == b.Value3  
select a;
</code></pre>

<p>How can I remove (at runtime) one or more of the conditions in the where clause in order to obtain queries similar to the following ones:</p>

<pre><code>from a in things  
where a.Id == b.Id &amp;&amp;  
a.Name == b.Name &amp;&amp;  
a.Value2 == b.Value2 &amp;&amp;  
a.Value3 == b.Value3  
select a;
</code></pre>

<p>Or</p>

<pre><code>from a in things  
where 
a.Name == b.Name &amp;&amp;  
a.Value3 == b.Value3  
select a;
</code></pre>
"	1065.0	kokos				2008-11-28 13:22:05	Selectively remove from where clause in LINQ expression tree	<.net><linq>	3.0	1	1.0		
325758	2		325725.0	2008-11-28 13:15:31		1		"<p>This may be another approach to it too;</p>

<pre><code>bool executeValue1Condition = true;
bool executeValue2Condition = true;
bool executeValue3Condition = true;

var q = from a in things  
where a.Id == b.Id &amp;&amp;  
a.Name == b.Name &amp;&amp;  
(a.Value1 == b.Value1 || executeValue1Condition) &amp;&amp;  
(a.Value2 == b.Value2 || executeValue2Condition) &amp;&amp;  
(a.Value3 == b.Value3 || executeValue3Condition) 
select a;

executeValue1Condition = false;
q = q.Select(i =&gt; i);
</code></pre>

<p>And also by using this approach, you can change your condition after your query is executed but of course by a new execution.</p>
"	4215.0	yapiskan	4215.0	yapiskan	2008-11-28 13:22:05	2008-11-28 13:22:05				2			
330251	2		330240.0	2008-12-01 07:56:14		2		"<p>You can only set the SelectItem/Value/Text after databinding has happened.</p>
"	15541.0	leppie				2008-12-01 07:56:14				0			
330948	2		330240.0	2008-12-01 14:11:08		1		"<p>You're right that the databind must happen first.. </p>

<p>What I kind of figured out is that the setting of the dropdownlist should be in the Databound event of each dropdownlist (rather than in the Page_Load event in the original). </p>

<p>It works now :)</p>
"	40559.0	mrsaiful				2008-12-01 14:11:08				1			
396541	2		396513.0	2008-12-28 19:13:03		4		"<p>Output types should be as specific as possible, input types should be as loose as possible.</p>

<p>So return <code>T[]</code>, but take <code>IEnumerable&lt;T&gt;</code> as input.</p>

<p>You should return what makes sense for the method. If it has to do extra work to convert to another type, think about just dropping that and returning whatever you have internally, as long as you don't return references to internal data structures that shouldn't be modified outside of your own code.</p>
"	267.0	lassevk	5314.0	Jay Bazuzi	2008-12-28 19:15:02	2008-12-28 19:15:02				3			
59854	2		59840.0	2008-09-12 20:17:26		1		"<p>The more I look at it, and after running more tests, I'm thinking the bug may be in the Sql Server Query Visualizer plugin for Visual Studio, not actually in Linq to SQL itself. So it is not nearly as bad a situation as I thought - the query will return the right results, but you can't trust what the Visualizer is showing. Not great, but better than what I thought was going on.</p>
"	1215.0	Carlton Jenke	1215.0	Carlton Jenke	2008-09-12 21:26:04	2008-09-12 21:26:04				0			
214426	1	214442.0		2008-10-18 02:26:55		15	43245.0	"<p>I want to check if a given date is more than a month earlier than today's date using LINQ.</p>

<p>What is the syntax for this?</p>

<p>Thanks in advance.</p>
"	8783.0	TedH				2017-05-23 17:38:03	How to compare dates in LINQ?	<.net><linq>	3.0	0	2.0		
262126	2		262110.0	2008-11-04 15:18:52		0		"<p>Personally since the data table doesn't have the ability to do a select distinct on its own, I'll say that it isn't all that bad.</p>

<p>I would potentially ask though if there was any way to eventually get to using objects rather than data tables, as I think it would be easier for future developers to understand.</p>
"	13279.0	Mitchel Sellers				2008-11-04 15:18:52				0			
271415	2		271384.0	2008-11-07 07:07:21		32		"<p>I'm a massive fan of LINQ - although it needs to be kept in perspective, and not treated as a silver bullet.</p>

<p>Pros:</p>

<ul>
<li>Declarative approach makes queries easier to understand and more compact</li>
<li>Extensibility and expression trees allow mostly consistent querying of multiple sources</li>
<li>Even in-process queries can be implemented in ways other than LINQ to Objects - e.g. Parallel LINQ and my own Push LINQ framework. Very flexible.</li>
<li><em>Fabulously</em> useful for in-process queries, where it's easiest to understand</li>
<li>Great to be able to avoid SQL in strings etc</li>
<li>Wide range of operators provided by default, and others can easily be added for LINQ to Objects</li>
<li>Language features introduced primarily for LINQ are widely applicable elsewhere (yay for lambdas)</li>
</ul>

<p>Cons:</p>

<ul>
<li>Query expressions aren't understood well enough, and are overused. Often simple method invocation is shorter and simpler.</li>
<li>Inevitable inconsistencies between provider - impedance mismatch is still present, which is reasonable but needs to be understood</li>
<li>There will always be some things you can do in SQL but not in LINQ</li>
<li>Without understanding what's going on, it's easy to write very inefficient code</li>
<li>It's hard to write a LINQ provider. This may well be inevitable, but more guidance from Microsoft would be appreciated.</li>
<li>It's a new way of thinking about data access for most developers, and will need time for understanding to percolate</li>
<li>Not specifically LINQ but related to it - the way extension methods are discovered in C# isn't granular enough</li>
<li>Some operators are ""missing"", particularly the equivalents of <code>OrderBy</code> for things other than ordering - e.g. finding the item with the maximum value of a property</li>
<li>Deferred execution and streaming are poorly understood (but improving)</li>
<li>Debugging can be very tricky due to deferred execution and streaming</li>
<li>In some specific cases, LINQ can be significantly slower than manual code. The better you understand the internal workings, the better you'll be able to predict this. (And of course, if performance is important to you, you should have appropriate tests around it.)</li>
</ul>

<p>I find it's best when dealing with in-process queries. They're easy to predict, understand  and extend. Complementary technologies like LINQ to XML and Parallel LINQ are great. LINQ to Objects can be used almost anywhere.</p>

<p>LINQ to SQL etc are really nice where they're appropriate, but they're harder to understand and need more expertise. They're also only applicable in certain areas of your code.</p>
"	22656.0	Jon Skeet	22656.0		2017-04-25 13:42:03	2017-04-25 13:42:03				10			
325766	2		325725.0	2008-11-28 13:21:45		0		"<p>Try to separate things. First isolate the where condition from the rest of your query then process it and use standard query methods instead of the built in syntactic sugar. Eg.:</p>

<pre><code>     IQueryable&lt;MyClass&gt; things = null;
     MyClass b = new MyClass();

     Expression&lt;Func&lt;MyClass, bool&gt;&gt; whereExp = a =&gt; a.Id == b.Id &amp;&amp; a.Name == b.Name;
     // process where expression here. it's just an expression tree. traverse it and
     // remove nodes as desired.
     var result = things.Where(whereExp).Select(a =&gt; a);
</code></pre>

<p>Another easier mode to achieve this would be not to start with a full expression and removing things but instead compose one from parts. Eg.:</p>

<pre><code>IQueryable&lt;MyClass&gt; things = null;
MyClass b = new MyClass();

Expression&lt;Func&lt;MyClass, bool&gt;&gt; whereExp;
Expression&lt;Func&lt;MyClass, bool&gt;&gt; exp1 = a =&gt; a.Id == b.Id;
Expression&lt;Func&lt;MyClass, bool&gt;&gt; exp2 = a =&gt; a.Name == b.Name;
whereExp = Expression.Lambda&lt;Func&lt;MyClass, bool&gt;&gt;(Expression.And(exp1, exp2), Expression.Parameter(typeof(MyClass), ""a""));

var result = things.Where(whereExp).Select(a =&gt; a);
</code></pre>
"	35128.0	AZ				2008-11-28 13:21:45				0			
210178	1	210217.0		2008-10-16 20:31:56		2	6901.0	"<p>Given the Below Tables.  How do I get the Distinct name given the other ID of 76 in LINQ?</p>

<pre><code>**Table S**
SID   OtherID
------------------------------
1     77
2     76


**Table Q**
QID   SID  HighLevelNAme      LoweLevelName
---------------------------------------
10     1       Name1              Engine
11     1       Name1              SparkPlus
12     1       Name2              Seat
13     1       Name2              Belt
14     1       Name1              Oil
</code></pre>

<p>I want to return a list of </p>

<p>Name1
  Name2</p>

<p>The SQL to do this is </p>

<pre><code>SELECT DISTINCT
    Q.HighLevelNAme
FROM S
JOIN Q ON Q.SID = S.SID
WHERE
        S.OtherID = 76
</code></pre>

<p>I also have Objects that represents each table.</p>

<p>An answer in VB or C# is acceptable.</p>
"	2469.0	Longhorn213				2012-07-06 21:03:34	In LINQ how to find a distinct item that is joining 2 tables?	<.net><linq>	2.0	0	1.0		
249527	2		233896.0	2008-10-30 07:55:00		1		"<p>You'll need to make sure the connectionstring used in the Server Explorer of your Visual Studio is the same as the one already defined within the dbml file. </p>

<p>I'm not too sure what do you mean by different name, do you mean database name? When I have a different database name for development and production, what I normally do is I keep the development connectionstring value when developing, but change the connectionstring value in my main application. This is because I normally develop my LINQ logic in a separate assembly.</p>

<p>Alternatively, you keep two connectionstrings: one for adding new database object, the other for testing, as example. Of course, you'll then have to be extra careful in keeping track of which connectionstring you'll use.</p>
"	19582.0	alextansc				2008-10-30 07:55:00				1			
262110	1	262167.0		2008-11-04 15:15:27		10	889.0	"<p>Ok, the more I use LINQ, the more I like it! I recently found myself working in some legacy code at work. It is your classic DataSet and DataTable rich application. Well, when adding a bit of functionality I found myself <em>really</em> wanting to just query the rows of a DataTable for the results I was looking for.</p>

<p>Let me repeat that... instead of looping and adding to a temp collection, I just wanted to ask the Rows collection for what I needed. No looping, no temp variables, just give me what I want.</p>

<pre><code>var customerOrderIds = table.Rows.Cast&lt;DataRow&gt;()
   .Where(x =&gt; (string)x[""CUSTOMER_ID""] == customerId)
   .Select(x =&gt; (string)x[""CUSTOMER_ORDER_ID""])
   .Distinct();
</code></pre>

<p><strong>My question is whether or not this is a good thing, or am getting carried away with LINQ?</strong> It does seem to me that this declarative style of pulling a subset of data out of a collection is a good thing and more readable in the end. But then again, maybe I'm just smitten :)</p>
"	2595.0	Rob	13913.0	Daok	2008-11-04 18:24:45	2011-11-21 20:44:13	Addicted to LINQ	<.net><linq>	7.0	0	2.0		
262821	2		262110.0	2008-11-04 18:23:18		3		"<p>The query looks fine.</p>

<p>I'd like to point out two small things.</p>

<blockquote>
  <p>No looping</p>
</blockquote>

<p>System.Linq.Enumerable methods operate against the IEnumerable(T) contract, which almost always means looping - O(N) solutions.  Two implications of this: </p>

<ul>
<li>Prefer Any() over Count() > 0  .  Any() is O(1).  Count() is O(N).</li>
<li>Join... all joins are nested loop O(M*N).</li>
</ul>

<blockquote>
  <p>.Cast</p>
</blockquote>

<p>.Cast works great for DataTable.Rows (all those objects -are- rows, so cast always succeeds).  For heterogeneous collections, be aware of .OfType() - which filters out any items that cannot be casted.</p>

<p>Lastly, be aware that queries are not executed until they are enumerated!  You can force enumeration by foreach, ToList, ToArray, First, Single, and many more.</p>
"	8155.0	David B				2008-11-04 18:23:18				3			
325125	2		271384.0	2008-11-28 06:01:12		0		"<p>Pro:</p>

<ul>
<li>LINQ to SQL allows for RAD with database very nicely</li>
<li>It is easy to query multiple data sources</li>
<li><a href=""http://www.codeplex.com/LINQtoSharePoint"" rel=""nofollow noreferrer"">LINQ to SharePoint</a>, <a href=""http://www.codeplex.com/LINQtoAD"" rel=""nofollow noreferrer"">LINQ to Active Directory</a>, <a href=""http://www.codeplex.com/LinqTfs"" rel=""nofollow noreferrer"">LINQ to TFS</a>, <a href=""http://www.aaron-powell.com/blog.aspx?id=1287"" rel=""nofollow noreferrer"">LINQ to Umbraco</a>, (and the list goes on)</li>
</ul>

<p>Con:</p>

<ul>
<li>Like any new technology too many people don't understand it but still use it</li>
</ul>

<p>@Jon Skeet - another great response, you steal everyones thunder :P. I totally agree about how hard writing a provider is, I'm in the process of it at the moment! Are you familiar with Bart De Smet? He's got lot of good examples of doing so.</p>
"	11388.0	Slace				2008-11-28 06:01:12				0			
7447868	2		7447846.0	2011-09-16 16:39:19		26		"<p>How about this:</p>

<pre><code>int limitedCount = myEnumerable.Take(2).Count();
</code></pre>

<p>That will give you:</p>

<ul>
<li>0 if it was empty</li>
<li>1 if it had exactly 1 element</li>
<li>2 if it had 2 or more elements</li>
</ul>

<p>... but it gives you those answers whilst only iterating over the sequence once. You can then switch on the results.</p>
"	22656.0		2642204.0		2017-03-16 17:39:45	2017-03-16 17:39:45				5			
7447957	2		7447846.0	2011-09-16 16:48:41		2		"<pre><code>myEnumerable.Take(2).Count() &lt; 2
</code></pre>
"	36464.0					2011-09-16 16:48:41				0			
7548804	2		7548783.0	2011-09-25 21:39:01		2		"<p>Use one of:</p>

<pre><code>.Single() // return a single
.SingleOrDefault() // return a single or the default value if there are no matches
.First() // return the first object it encounters that matches
.FirstOrDefault() // return the first object it encounters that matches, or the default value if no matches
</code></pre>

<p>.Single() and .SingleOrDefault() will throw an exception if there are multiple matches.</p>
"	288317.0					2011-09-25 21:39:01				0			
7677496	2		7677428.0	2011-10-06 16:29:36		1		"<p>You <em>could</em> override <code>GetHashCode</code> and <code>Equals</code> in <code>StreetInfo</code> - but that wouldn't be terribly nice in its existing form given that it's mutable. (You could create two instances which are equal one minute and then not equal the next. That often makes for a confusing debugging experience.) Alternatively, you could use an anonymous type, making sure you use readonly ""key"" properties:</p>

<pre><code>Dim query = From city In myCountry.Cities
            From street In city.Streets
            Select New With { Key .Name = street.Name, Key .Index = street.Index}
            Distinct
</code></pre>

<p>Here the equality and hash code will be provided automatically by the compiler. This is then equivalent to:</p>

<pre><code>Dim query = From city In myCountry.Cities
            From street In city.Streets
            Select street.Name, street.Index
            Distinct
</code></pre>

<p>See the <a href=""http://msdn.microsoft.com/en-us/library/bb384767.aspx"" rel=""nofollow"">MSDN article on anonymous types</a> for more information.</p>

<p>If you definitely need <code>StreetInfo</code> values afterwards and you don't want to make it immutable, you could add another projection (Select) afterwards. I don't know if it's possible to append another Select clause <em>after</em> a Distinct clause in a single query, but you could use a second expression:</p>

<pre><code>Dim query = From city In myCountry.Cities
            From street In city.Streets
            Select street.Name, street.Index
            Distinct

Dim query2 = From street in query
             Select New StreetInfo With {.Name = street.Name, _
                                         .Index = street.Index}
</code></pre>
"	22656.0		22656.0		2011-10-06 17:56:37	2011-10-06 17:56:37				8			
7792103	2		7792067.0	2011-10-17 09:56:58		11		"<p>Are you missing</p>

<pre><code>using System.Linq;
</code></pre>

<p>by any chance? Once you've got an <code>EnumerableRowCollection&lt;TRow&gt;</code> it should be fine. (The main problem using a <code>DataTable</code> if if you forget to call <code>AsEnumerable</code>, but that isn't a problem here.)</p>
"	22656.0					2011-10-17 09:56:58				1			
7975219	1	7975266.0		2011-11-02 02:36:41		0	24.0	"<p>I'm after a method to be able to Query and Modify a text file. I found this sample which is what i am after to query the lines but whats the best way to modify a value on that line and submit it back to the file. </p>

<p><a href=""http://blogs.msdn.com/b/ericwhite/archive/2006/08/31/734383.aspx"" rel=""nofollow"">http://blogs.msdn.com/b/ericwhite/archive/2006/08/31/734383.aspx</a></p>

<p>I would love it if there was something like LinqToSQL's SubmitChanges method you can call.</p>
"	738068.0		1002323.0		2011-11-02 02:44:12	2011-11-02 02:44:20	Linq To Text that supports Updating the source	<.net><linq>	1.0	0			
9351226	2		9351016.0	2012-02-19 17:07:34		1		"<p>You first need a way for each row to contain the entire path up to the root:</p>

<pre><code>1 | ""Text 1"" | ""1""
2 | ""Reply to Text 1"" | ""1_2"" 
3 | ""Reply to Text 1 #2"" | ""1_3""
4 | ""Reply to reply to text 1"" | ""1_2_4"" 
</code></pre>

<p>Either save it directly when you save your comments, or compute it on the fly on the code (kinda expensive). Then it's a simple matter of sorting by this column (as text mind you)</p>
"	3263.0					2012-02-19 17:07:34				1			
9433334	1	9433427.0		2012-02-24 15:29:40		2	330.0	"<p>I know LINQ can group by taking advantage of anonymous types, so I though it would also group by if I used my own object for grouping. However, it is not (at least in my usage).</p>

<p>for example, using the following anonymous type groups by the two parameters I want it to:</p>

<pre><code>.GroupBy(v =&gt; new { v.GroupId })
</code></pre>

<p>But once I use my own object, it no longer does the grouping:</p>

<pre><code>.GroupBy(v =&gt; new MyGrouping { GroupId = v.GroupId })
</code></pre>

<p>With the following object</p>

<pre><code> private class MyGrouping : IMyGrouping
 {
     public int GroupId { get; set; }

     public override bool Equals(object obj) { return Equals((MyGrouping)obj); }
     public bool Equals(MyGrouping obj)
     {
         return this.GroupId == obj.GroupId ;
     }
 }
</code></pre>

<p>Am I missing something in my own object, or is this not supported? </p>

<hr>

<p>As every poster pointed out, my Equals implementation was flawed so I revised it using Resharper recommended equality check just to be different and its grouping as expected.</p>

<pre><code> private class MyGrouping : IMyGrouping
 {
     public int GroupId { get; set; }

     public override bool Equals(object obj)
     {
         var myGrouping = obj as MyGrouping;
         return myGrouping != null ? Equals(myGrouping) : false;
     }
     public bool Equals(MyGrouping other)
     {
         if (ReferenceEquals(null, other)) return false;
         if (ReferenceEquals(this, other)) return true;
         return other.GroupId == GroupId;
     }

     public override int GetHashCode()
     {
         return GroupId;
     }
 }
</code></pre>

<p>For me though, this is a bit of a failuer as my goal was to cut down code... my previous implementation was grouping by a dynamic variable, so I may reconsider this now.</p>
"	424886.0		424886.0		2012-02-27 14:43:00	2012-02-27 14:43:00	LINQ GroupBy object or only anonymous types?	<.net><linq>	2.0	0			
9708380	1	9708496.0		2012-03-14 18:58:22		0	173.0	"<p>I have a series of timestamped data points that I wish to group by arbitrary Timepsan values,</p>

<p>So for instance I would like to do something like:</p>

<pre><code>var span = Timespan.FromMinutes(5);
var grouped = from dataPoint in data
              group dataPoint by dataPoint.ThisISWhereIGetStuck(span) into argregateData
              select new {
                  Avg = argregateData.Average(x =&gt; x.Counter),
                  Span = argregateData.Key.SpanStartTime //or some such
              };                  
</code></pre>

<p>Is this possible using linq?</p>
"	48886.0					2012-03-15 07:58:38	Linq Gouping by Arbitrary Timespans	<.net><linq>	2.0	1			
9808435	2		9808361.0	2012-03-21 16:07:10		0		"<p>The issue is most likely that <code>data.Descendants(""Programs"")</code> or <code>data.Descendants(""Programs"").Descendants</code> is null. You need to do null checks along the way, you can't really just chain a bunch of objects together like you've done.</p>
"	384808.0					2012-03-21 16:07:10				0			
10278333	1	10278437.0		2012-04-23 09:56:01		0	34.0	"<p>I have a problem with LINQ query. Could somebody please help?</p>

<p>There is one table Content with Columns Id (unique), ContentId, Version.
I'd like to get the latest version for each unique Content Id.</p>

<p>So if table is:</p>

<pre><code> - Id, ContentId, Version
 - 1, 1, 1
 - 2, 1, 2
 - 3, 2, 1
</code></pre>

<p>Then query should return:</p>

<pre><code> - Id, ContentId, Version
 - 2, 1, 2
 - 3, 2, 1
</code></pre>
"	620617.0		485076.0		2012-04-23 09:57:26	2012-04-23 10:10:00	LINQ query grouping	<.net><linq>	1.0	0			
10609724	1	10609769.0		2012-05-15 22:31:31		0	455.0	"<p>The following line will not compile because of the order by clause. What am I doing wrong with the syntax?</p>

<pre><code>   ddlMIP.DataSource = dt.AsEnumerable().Select(row =&gt; row.Field&lt;string&gt;(""MIP_NO"").ToString()).Distinct().OrderBy(row =&gt; row.Field&lt;string&gt;(""MIP_NO"").ToString()).ToList();
</code></pre>

<p>Thanks!</p>
"	817934.0					2012-05-16 09:19:41	LINQ order by syntax	<.net><linq>	3.0	0			
652804	2		652742.0	2009-03-17 02:05:44		3		"<p>I think LINQ is fairly solid, and there aren't a lot of big caveats.  Nearly every ""problem"" I've run into is the result of deferred execution, and it's not really a problem, but rather a different way of thinking.</p>

<p>The biggest issue I've faced - LINQ is a game changer (or at least a rule bender) when it comes to profiling for performance.  The deferred execution can make it much more difficult to profile an application at times, and can also dramatically change the runtime performance characteristics in unexpected ways.  Certain LINQ operations seem almost magical with how fast they are, and others take a lot longer than I expected - but it's not always obvious from the code or profiler results.</p>

<p>That being said, in general, the deferred execution more than makes up for the cases where it's slowed down hand-coded routines.  I much prefer the simpler, cleaner code to the code it replaced.</p>

<p>Also, I have found that the more I use LINQ to Objects, the more I have to rethink my design and rework my collections in general.  </p>

<p>For example, I had never realized how often I was exposing IList instead of IEnumerable when it wasn't absolutely necessary until I started using linq to objects frequently.  I now completely understand why MS design guidelines warn against using IList too often (for example, don't return IList just for the Count property, etc).  When I'd have methods that took IList, passing through the IEnumerable results from a linq query requires .ToList() or a reworking of the method's API.</p>

<p>But it's almost always worth the rethinking - I've found many places where passing an enumerable and using LINQ resulted in a huge perf. gains.  The deferred execution is wonderful if you think about it, and take full advantage of it.  For example, using .Take() to restrict a collection to the first 2 elements if that's all that's needed was a bit more challenging pre-linq, and has dramatically sped up some of my nastier loops.</p>
"	65358.0	Reed Copsey				2009-03-17 02:05:44				0			2009-03-17 02:05:44
777412	2		777400.0	2009-04-22 14:11:54		91		"<p>That it should be used for everything.</p>
"	82187.0					2009-04-22 14:11:54				6			
777427	2		777400.0	2009-04-22 14:15:51		27		"<p>Failing to understand the differences betweeen (or existence of!):</p>

<pre><code>.First()
.FirstOrDefault()
.Single()
.SingleOrDefault()
</code></pre>

<p>Not understanding <a href=""http://blogs.msdn.com/charlie/archive/2007/12/09/deferred-execution.aspx"" rel=""noreferrer"">deferred execution</a>.</p>
"	39709.0					2009-04-22 14:15:51				3			
777479	2		777400.0	2009-04-22 14:28:34		5		"<p>Somethings which come to mind are</p>

<ul>
<li>It must be slower, better use plain C#</li>
<li>Trying to use it where simple C# would be more readable/manageable</li>
</ul>
"	169495.0					2009-04-22 14:28:34				1			
777529	2		777400.0	2009-04-22 14:36:38		1		"<p>Using linq2sql on tables with no primary keys (and not defining one in the designer).</p>

<p>Specially if what they are doing is an update, it doesn't update anything and you get no error.</p>
"	66372.0		66372.0		2009-04-30 14:09:41	2009-04-30 14:09:41				1			
777971	2		777400.0	2009-04-22 15:58:03		1		"<p>A lot of people think that LINQ is 'Magical SQL' they can use in Code.  It looks like SQL, but it's quite different.  Understanding that it's difference and what it's <em>really</em> doing will prevent a lot of frustration.</p>
"	73381.0					2009-04-22 15:58:03				0			
779158	2		779146.0	2009-04-22 20:46:38		4		"<p>I love the site <a href=""http://blog.functionalfun.net"" rel=""nofollow noreferrer"">blog.functionalfun.net</a> for this exact purpose: the practical (and less practical, more fun) uses of LINQ. Ultimately, nearly everything he covers can be applied to real life situations, but he's started blogging blogging more ""Practical LINQ"" subjects for things he uses in business logic code that's interesting.</p>
"	2028413.0					2009-04-22 20:46:38				1			
779458	2		779146.0	2009-04-22 22:05:53		15		"<p>Robert Shelton of Microsoft was cool enough to list <a href=""http://web.archive.org/web/20131229055859/http://www.sheltonblog.com/archive/2008/07/11/list-of-linq-providers.aspx"" rel=""nofollow noreferrer"">a few LINQ implementations</a> for us:</p>

<p>As of month 7, 2008:</p>

<ul>
<li>LINQ to Amazon</li>
<li>LINQ to Active Directory</li>
<li>LINQ to Bindable Sources (SyncLINQ)</li>
<li>LINQ over C- project</li>
<li>LINQ to CRM</li>
<li>LINQ To Geo—Language Integrated Query for Geospatial Data</li>
<li>LINQ to Excel</li>
<li>LINQ to Expressions (MetaLinq)</li>
<li>LINQ Extender (Toolkit for building LINQ Providers)</li>
<li>LINQ to Flickr</li>
<li>LINQ to Google</li>
<li>LINQ to Indexes (LINQ and i40)</li>
<li>LINQ to IQueryable (Matt Warren on Providers)</li>
<li>LINQ to JSON</li>
<li>LINQ to NHibernate</li>
<li>LINQ to JavaScript</li>
<li>LINQ to LDAP</li>
<li>LINQ to LLBLGen Pro</li>
<li>LINQ to Lucene</li>
<li>LINQ to Metaweb(freebase)</li>
<li>LINQ to MySQL, Oracle and PostgreSql (DbLinq)</li>
<li>LINQ to NCover</li>
<li>LINQ to Opf3</li>
<li>LINQ to Parallel (PLINQ)</li>
<li>LINQ to RDF Files</li>
<li>LINQ to Sharepoint</li>
<li>LINQ to SimpleDB</li>
<li>LINQ to Streams</li>
<li>LINQ to WebQueries</li>
<li>LINQ to WMI</li>
<li>LINQ to XtraGrid</li>
</ul>
"	22944.0		303290.0		2015-06-09 09:27:31	2015-06-09 09:27:31				1			
11543016	1	11543145.0		2012-07-18 13:52:32		1	118.0	"<p>I am starting to use LINQ and as far as I know in order to use a join query, I need to create manually the return class which will contain the mixed values for the two or more tables I join. </p>

<p>My question is if somebody knows about a tool that helps to create automatically those join classes. To do by hand when the tables are too big is a heavy task, and for maintenance porpouses I think it is very annoying also.</p>

<p>Thanks in advance.</p>

<p><strong>EDIT:</strong> I need to be able to use strong data typed classes and therefore intellisense in VS, I have no problems with the LINQ query itself, only with the join classes to return. I come from the ""DataSets world"", where my join queries create automatically the corresponding DataTable.</p>

<p>Now I work with ASP.NET MVC, so my method returns a IEnumerable&lt;> type which will be later passed to the View as the model object, example:</p>

<pre><code>public IEnumerable&lt;MyJoinClass&gt; GetData(int clientID)
{      
    var query =
    from t1 in objDataContext.table1
    join t2 in objDataContext.table2 on
    new { t1.clientID } equals new { t2.clientID }
    where t1.clientID == clientID
    select new MyJoinClass()
    {   
        //here the fields I want to retrieve... 
        column1_From_Table1 = t1.column1, 
        column2_From_Table1 = t1.column2, 
        //etc...
    };

    //Return result   
    return query;
}

public class MyJoinClass
{        
    public short column1_From_Table1;
    public string column2_From_Table1;
    public short? column3_From_Table1;
    public int column1_From_Table2;
    public short? column2_From_Table2;
    public string column3_From_Table2;
    //lets imagine 50 columns... do I need to do all this stuff on my own?
}
</code></pre>
"	1523877.0		1523877.0		2012-07-18 14:56:17	2012-07-18 14:56:17	join classes in LINQ	<.net><linq>	3.0	2			
11543080	2		11543016.0	2012-07-18 13:55:42		1		"<p>There is no such tool AFAIK, as there is little reason to write one. Do you really ALWAYS want to return ALL the fields from joined tables? Not likely.</p>

<p>What you're probably doing is inner join to filter out the records and adding constraints on linked tables. Getting all the columns from the DB is probably a waste of resources.</p>

<p>You can always create a <strong>view</strong> in DB and query it instead if doing joins manually in code.</p>
"	449906.0					2012-07-18 13:55:42				1			
11778150	2		11777883.0	2012-08-02 13:11:18		1		"<blockquote>
  <p>WHERE e.EXEMPLARSTATUS IN (SELECT EXEMPLARSTATUS FROM ANYTABLE)</p>
</blockquote>

<p>This part of your query should be written as</p>

<pre><code>where (from EXEMPLARSTATUS in ANYTABLE select EXEMPLARSTATUS).Contains(e.EXEMPLARSTATUS)
</code></pre>
"	1105881.0					2012-08-02 13:11:18				4			
11868014	2		11867969.0	2012-08-08 15:30:08		0		"<p>here my post to get last n record that will help you if you want to get last inserted record </p>

<p><a href=""http://pranayamr.blogspot.in/2012/05/get-last-n-records-using-linq-to-sql.html"" rel=""nofollow"">Get Last n Records using Linq to SQL</a> </p>

<p>Easy way to get last recrod</p>

<pre><code>var qry = db.ObjectCollection
                     .Where(m =&gt; m.&lt;field&gt; == data)
                     .OrderByDescending(m =&gt; m.&lt;field&gt;)
                     .FirstOrDefault(); 
</code></pre>

<p>if you want last n record</p>

<pre><code>var qry = db.ObjectCollection
                     .Where(m =&gt; m.&lt;field&gt; == data)
                     .OrderByDescending(m =&gt; m.&lt;field&gt;)
                     .Take(n); 
</code></pre>
"	314488.0					2012-08-08 15:30:08				0			
12460277	2		12460250.0	2012-09-17 13:29:03		4		"<p>What's the problem with this?</p>

<pre><code>var deals = DealBL.FindActiveById(user.BookmarkedDeals.Select(d =&gt; d.DealId))
                  .OrderBy(d =&gt; d.Store.Name); 
</code></pre>
"	572644.0					2012-09-17 13:29:03				1			
12972456	2		12972295.0	2012-10-19 10:34:48		41		"<p>General case, not just for value types:</p>

<pre><code>static class ExtensionsThatWillAppearOnEverything
{
    public static T IfDefaultGiveMe&lt;T&gt;(this T value, T alternate)
    {
        if (value.Equals(default(T))) return alternate;
        return value;
    }
}

var result = query.FirstOrDefault().IfDefaultGiveMe(otherDefaultValue);
</code></pre>

<p>Again, this can't really tell if there <em>was</em> anything in your sequence, or if the first value was the default.</p>

<p>If you care about this, you could do something like</p>

<pre><code>static class ExtensionsThatWillAppearOnIEnumerables
{
    public static T FirstOr&lt;T&gt;(this IEnumerable&lt;T&gt; source, T alternate)
    {
        foreach(T t in source)
            return t;
        return alternate;
    }
}
</code></pre>

<p>and use as</p>

<pre><code>var result = query.FirstOr(otherDefaultValue);
</code></pre>

<p>although as Mr. Steak points out this could be done just as well by <code>.DefaultIfEmpty(...).First()</code>.</p>
"	215380.0		215380.0		2012-10-19 10:53:26	2012-10-19 10:53:26				3			
968634	2		968573.0	2009-06-09 07:20:38		11		"<p>It's doable, but slightly odd:</p>

<pre><code>using System;
using System.Collections.Generic;
using System.Linq;
using System.Xml.Linq;

class Test
{
    static void Main()
    {
        string xml = 
@""&lt;books&gt;
  &lt;book&gt;
    &lt;author&gt;sadfasdf&lt;/author&gt;
    &lt;title&gt;asdfasdf&lt;/title&gt;
    &lt;year&gt;1999&lt;/year&gt;
  &lt;/book&gt;
  &lt;book&gt;
    &lt;author&gt;asdfasdf&lt;/author&gt;
    &lt;title&gt;asdfasdf&lt;/title&gt;
    &lt;year&gt;1888&lt;/year&gt;
  &lt;/book&gt;
  &lt;book&gt;
    &lt;author&gt;asdfsdf&lt;/author&gt;
    &lt;title&gt;asdfasdf&lt;/title&gt;
    &lt;year&gt;1777&lt;/year&gt;
  &lt;/book&gt;
&lt;/books&gt;"";
        XElement root = XElement.Parse(xml);

        List&lt;XElement&gt; ordered = root.Elements(""book"")
            .OrderBy(element =&gt; (int)element.Element(""year""))
            .ToList();

        root.ReplaceAll(ordered);
        Console.WriteLine(root);
    }
}
</code></pre>

<p>Note that if you have other content under your root node, you should call <code>Remove</code> on each <code>XElement</code> before adding them, instead of just calling <code>RemoveAll</code>.</p>
"	22656.0		22656.0		2017-12-06 06:35:47	2017-12-06 06:35:47				3			
1014001	1	1014040.0		2009-06-18 17:19:34		0	325.0	"<p>this is a simple question that you might find out if you have been in this situation before:</p>

<p>Imagine that I have a loop and inside it I create an instance of a DataContext and I perform some queries to the database.</p>

<p>The question is... Is the DataContext opening a Connection only the first time and reusing it or a new connection to the DB is open/closed in every loop? If the latter, can I force in some way to use only one connection?</p>

<p>thx</p>
"	64132.0		64132.0		2009-06-19 11:39:37	2009-06-19 11:39:37	DataContext reusing connection	<.net><linq>	2.0	5			
1014050	2		1014001.0	2009-06-18 17:28:54		0		"<p>How about:</p>

<pre><code> using(var dc=new FooDataContext())
 {
     for(var i=0;i&lt;someVal;++i)
     {
         dc.SomeTable.Where.....
     }
 }
</code></pre>
"	14357.0					2009-06-18 17:28:54				1			
1132250	2		1132138.0	2009-07-15 15:46:49		2		"<p>Why not create a constructor in your Collection class that takes an IEnumerable as a param and encapsulates the loop for you?  Try this in a console app to see what i'm suggesting - in your case, you'd be doing a Collection - i just used int for ease of creating an example...</p>

<pre><code>class Program
{
    static void Main(string[] args)
    {
        MyCollection myCollection = new MyCollection(Enumerable.Range(1, 10));

        foreach (var item in myCollection)
        {
            Console.WriteLine(item);
        }
    }
}

public class MyCollection : Collection&lt;int&gt;
{
    public MyCollection(IEnumerable&lt;int&gt; input)
    {
        foreach (var item in input)
        {
            this.Add(item);
        }
    }
}
</code></pre>

<p>You could also create an extension method to make it easier to use...</p>

<pre><code>public static class MyCollectionHelper
{
    public static MyCollection ToMyCollection(this IEnumerable&lt;int&gt; input)
    {
        return new MyCollection(input);
    }
}
</code></pre>

<p>and then you'd call it like this...</p>

<pre><code>MyCollection myCollection = Enumerable.Range(1,10).ToMyCollection();
</code></pre>
"	36297.0					2009-07-15 15:46:49				2			
1134531	2		1132138.0	2009-07-15 22:44:38		1		"<p>It is not 100% clear what you need from the question, but have you tried the <a href=""http://msdn.microsoft.com/en-us/library/bb301460.aspx"" rel=""nofollow noreferrer"">Cast</a> extension method?</p>
"	133143.0					2009-07-15 22:44:38				0			
1243198	2		1243049.0	2009-08-07 06:24:48		0		"<p>I didn't test it but this could be a lightweight solution.</p>

<pre><code>myEntities.UserInfo.Except(myEntities.ClassUsers.Where(cu=&gt; cu.Class.ClassID = classID)
.Select(cu=&gt;cu.UserInfo)).Select(u=&gt;Id = u.Id, FirstName = u.FirstName, LastName =   
                                 u.LastName, Select = new Boolean())
</code></pre>
"	4215.0					2009-08-07 06:24:48				1			
13234778	2		13233520.0	2012-11-05 15:05:03		2		"<p>You need to put the code that calls the procedure in the ""submit completed"" event handler.</p>

<p>The submit is an asynchronous operation which is why it fails if you call <code>EnableTriggers</code> straight after <code>SubmitChanges</code> but succeeds if you wait.</p>

<p>With RIAServices you pass a <code>callback</code> to <a href=""http://msdn.microsoft.com/en-us/library/ff423067%28v=vs.91%29.aspx"" rel=""nofollow""><code>SubmitChanges</code></a>. This gets called once the submit is completed. You would put your call to <code>EnableTriggers</code> into this callback.</p>
"	59303.0		59303.0		2012-11-05 15:19:36	2012-11-05 15:19:36				4			
13928175	2		13926689.0	2012-12-18 07:20:35		0		"<p>Try this</p>

<pre><code>var aT12 =
    from obj in qry
    let t1 = new T1Model(obj.MyT1)
    let t2 = new T2Model(obj.MyT2)
    select mew T1and2 { T1 = t1, T2 = t2 };
</code></pre>
"	1686024.0					2012-12-18 07:20:35				1			
14217770	2		13233520.0	2013-01-08 14:59:11		0		"<p>The customer didn't want to spend more time on this and accepted the SubmitChanges() on a button and the dc.EnableTriggers() on another button.<br /><br />
Feel free to post a real answer to this question, if there is a correct one, I'll mark it as the real answer.</p>
"	888479.0					2013-01-08 14:59:11				0			
14976541	2		14976486.0	2013-02-20 09:37:48		1		"<p>You cant do this by linq2sql !!! 
The result of the linq is a SQL query, thw function you use in the linq2sql is .net function that dont have any implement function in SQL.
You can get all the data to List and by code to sort that(more time!!!)</p>

<p>During that conversion, it is just a method call, nothing more. Linq to Sql understands certain method calls, and yours is not one of them. Hence the error.</p>

<p>On the surface, this seems like it should work. You write reusable queries and compose them from other queries. However, what you are actually saying is: ""during the processing of each row on the database server, call this method"", which it obviously can't do. The fact that it takes an <code>IQueryable&lt;T&gt;</code> and returns an <code>IQueryable&lt;T&gt;</code> does not make it special.</p>
"	2004810.0		2004810.0		2013-02-20 09:44:54	2013-02-20 09:44:54				2			
15142287	2		15142218.0	2013-02-28 17:52:29		2		"<p>This should produce same query:</p>

<pre><code>var context = new DataClassesRegionDataContext();
var regionBoudaries = from rb in context.Region_Boundaries
                      join b in context.RegionBoundaries 
                           on rb.BoundaryID equals b.RegionBoundaryID
                      orderby rb.RegionID, b.RegionBoundaryID // ordering here
                      select new RegionViewModel { 
                           ID = b.RegionBoundaryID, 
                           Latitude = b.lat.Value, // what if null?
                           Longitude = b.@long.Value, // what if null?
                           RegionID = rb.RegionID 
                      };
</code></pre>

<p>BTW table names and variable names are awful. Two tables which differs with underscore only! And name of variable boundaryID looks like some integer (or other identity type).</p>
"	470005.0					2013-02-28 17:52:29				2			
15682493	2		15681535.0	2013-03-28 13:00:21		-1		"<p>If you're using .NET 4.0 or higher and all of your entities have the 'language' property, you could use the <a href=""http://msdn.microsoft.com/en-us/library/vstudio/dd264741.aspx"" rel=""nofollow"">dynamic</a> keyword:</p>

<pre><code>private dynamic GetLanguage(String currentLanguage, dynamic entity)
{
    return (currentLanguage == ""de"" ? entity.language.German :
     currentLanguage == ""fr"" ? entity.language.French :
     currentLanguage == ""en"" ? entity.language.English :
     entity.language.English);
}
</code></pre>
"	737173.0					2013-03-28 13:00:21				4			
16696570	1	16696776.0		2013-05-22 16:05:27		0	50.0	"<p>I'm trying to get the closest locations in each category.  Can anyone help me do this?</p>

<pre><code>var xml = new XElement(""Locations"", 
                    locations.OrderBy(n =&gt; n.CategoryID)
                        .ThenBy(n =&gt; distance(lat, lon, (double)n.Latitude, (double)n.Longitude))
                        .Where(n =&gt; (distance(lat, lon, (double)n.Latitude, (double)n.Longitude) &lt;= 5))
                        .Select(location =&gt; 
                        new XElement(""Location"",
                            new XAttribute(""CategoryID"", location.CategoryID),
                            new XElement(""Category"", location.Category),
                            new XElement(""LocationID"", location.LocationID),
                            new XElement(""LocationName"", location.LocationName),
                            new XElement(""Latitude"", location.Latitude),
                            new XElement(""Longitude"", location.Longitude),
                            new XElement(""Distance"", distance(lat, lon, (double)location.Latitude, (double)location.Longitude)),
                            new XElement(""Status"", (location.HasManagedHours ? ""Managed Hours"" : ""Open""))
                            )));
</code></pre>
"	152491.0					2013-05-22 16:49:51	How to select Closest distance from each category	<.net><linq>	1.0	0			
1404039	1	1404048.0		2009-09-10 08:23:02		2	197.0	"<p>For example, if I had a Linq to SQL data context, or if I had ADO.NET Entity Framework entities that mapped to a database table, and I want to test for a single Customer...</p>

<p>Is there much difference between:</p>

<pre><code>MyDatabaseContext.Customers.Any(c =&gt; c.CustomerId == 3)
</code></pre>

<p>and </p>

<pre><code>MyDatabaseContext.Customers.Where(c =&gt; c.CustomerId == 3)
</code></pre>

<p>.Any&lt;> - return type bool</p>

<p>.Where&lt;> - return type IQueryable</p>

<p>EDIT: Corrected question wording after accepting answer from Fredrik Mörk - thanks.</p>
"	76091.0		76091.0		2011-01-14 20:47:29	2011-01-14 20:47:29	In LINQ, what is the main difference/usefulness between .Any<> and .Where<> to test for records existance	<.net><linq>	5.0	0			
1404061	2		1404039.0	2009-09-10 08:27:31		1		"<p>Any tests the lambda/predicate and returns true/false</p>

<p>Where returns the set of objects for which lambda/predicate holds true as IQueryable</p>
"	37494.0					2009-09-10 08:27:31				0			
1415794	2		1415777.0	2009-09-12 18:30:19		0		"<p>No you can't. All LINQ methods are extensions methods for the <code>IEnumerable&lt;T&gt;</code> interface.</p>

<p>So you'll have to implement <code>IEnumerable&lt;T&gt;</code> to use LINQ with your own collections.</p>
"	113570.0					2009-09-12 18:30:19				0			
1568054	2		1568039.0	2009-10-14 18:12:32		14		"<p>A linq provider is software that implements the <code>IQueryProvider</code> and <code>IQueryable</code> interfaces for a particular data store.  In other words, it allows you to write Linq queries against that data store.  For example, the Linq to XML provider allows you to write Linq queries against XML documents.</p>

<p>See <a href=""http://dotnetslackers.com/articles/csharp/LINQProviderBasics.aspx"" rel=""noreferrer"">http://dotnetslackers.com/articles/csharp/LINQProviderBasics.aspx</a></p>

<p>You can also write your own Linq provider, although it is not trivial.  See <a href=""http://blogs.msdn.com/mattwar/archive/2007/07/30/linq-building-an-iqueryable-provider-part-i.aspx"" rel=""noreferrer"">Building an Iqueryable Provider</a> and <a href=""http://msdn.microsoft.com/en-us/library/bb546158.aspx"" rel=""noreferrer"">Walkthrough: Creating an IQueryable LINQ Provider</a> for more information.</p>
"	102937.0		102937.0		2012-11-19 15:59:46	2012-11-19 15:59:46				1			
1620706	2		1620606.0	2009-10-25 11:55:08		10		"<p>The two sides of the equality in a join are treated as two separate lambda expressions which generate the keys for the two sequences. </p>

<pre><code>from category in categories
join prod in products on category.ID equals prod.CategoryID

categories.Join(products,
                category =&gt; category.ID,
                prod =&gt; prod.CategoryID,
                (category, prod) =&gt; new { Category = category, Product=prod });
</code></pre>

<p>Using the equals keyword makes it unabmiguous where one lambda ends and the other starts. For a where clause, on the other hand, there's a single lambda expression which decides whether each item matches:</p>

<pre><code>from prod in products
where prod.CategoryID == 1

products.Where( prod =&gt; prod.CategoryID == 1 )
</code></pre>

<p>In theory, joins could have been implemented with a single lambda as</p>

<pre><code>from category in categories
join prod in products on category.ID == prod.CategoryID

categories.Join(products,
                (category, prod) =&gt; category.ID == prod.CategoryID,
                (category, prod) =&gt; new { Category = category, Product=prod });
</code></pre>

<p>However, by computing two keys and doing the comparison itself, LINQ can use hash tables to compute the join more efficiently than if it had to execute an arbitrary comparison for every pair of elements.</p>
"	25028.0					2009-10-25 11:55:08				0			
1767465	2		779146.0	2009-11-19 23:55:20		2		"<p><a href=""http://code.google.com/p/linqtoexcel/"" rel=""nofollow noreferrer"">Linq to Excel</a> makes it a breeze to retrieve data from Excel spreadsheets. It takes care of creating the OLEDB connection and sql statement. All you have to do is tell it the file path to the spreadsheet and create the linq statement.</p>
"	215086.0					2009-11-19 23:55:20				0			
16907442	2		16907393.0	2013-06-03 23:25:21		2		"<pre><code>var view = dbContext.view.ToList();
</code></pre>

<p>will cache your view, by creating an in-memory <code>IEnumerable</code>.  You can still run Linq queries against it.</p>

<p>However, consider putting the result in a <code>Dictionary</code>.  It will be much faster to get rows by index.</p>
"	102937.0					2013-06-03 23:25:21				3			
17029818	2		17028772.0	2013-06-10 17:47:19		1		"<p>You can use <code>Distinct</code> and a custom <code>IEqualityComparer</code>. For example, here's one I'm quite fond of: </p>

<pre><code>public class PropertyEqualityComparer&lt;TObject, TProperty&gt; 
    : IEqualityComparer&lt;TObject&gt;
{
    Func&lt;TObject, TProperty&gt; _selector;
    IEqualityComparer&lt;TProperty&gt; _internalComparer;
    public PropertyEqualityComparer(Func&lt;TObject, TProperty&gt; propertySelector,
        IEqualityComparer&lt;TProperty&gt; innerEqualityComparer = null)
    {
        _selector = propertySelector;
        _internalComparer = innerEqualityComparer;
    }
    public int GetHashCode(TObject obj)
    {
        return _selector(obj).GetHashCode();
    }
    public bool Equals(TObject x, TObject y)
    {
        IEqualityComparer&lt;TProperty&gt; comparer = 
            _internalComparer ?? EqualityComparer&lt;TProperty&gt;.Default;
        return comparer.Equals(_selector(x), _selector(y));
    }
}
//and here's a class to help instantiate it with anonymous objects
public static class PropertyEqualityComparer
{
    public static PropertyEqualityComparer&lt;TObject, TProperty&gt;
        GetNew&lt;TObject, TProperty&gt;(Func&lt;TObject, TProperty&gt; propertySelector)
    { 
        return new PropertyEqualityComparer&lt;TObject, TProperty&gt;
            (propertySelector);
    }
    public static PropertyEqualityComparer&lt;TObject, TProperty&gt;
        GetNew&lt;TObject, TProperty&gt;
        (Func&lt;TObject, TProperty&gt; propertySelector, 
        IEqualityComparer&lt;TProperty&gt; comparer)
    { 
        return new PropertyEqualityComparer&lt;TObject, TProperty&gt;
            (propertySelector, comparer);
    }
}
</code></pre>

<p>Here's how you would use it with your example:</p>

<pre><code>var result = students.Distinct(
    PropertyEqualityComparer.GetNew(s =&gt; new { s.Name, s.DOB, s.SSN }));
</code></pre>
"	1822164.0					2013-06-10 17:47:19				0			
17561607	2		17558165.0	2013-07-10 02:35:39		3		"<p>I may not be fully understanding what you want to do with this, but the common approach I have seen taken (and I myself have taken) is to create a repository using generics.  If you put in constraints for your generics, you can use the properties of your entity interface.  Something like this...</p>

<pre><code>public interface IRepository&lt;T&gt;
    where T : class, IEntityInterface 
{
    T FindById(int id);
    IQueryable&lt;T&gt; All { get; }
}

public class GenericRepository&lt;T&gt; : IRepository&lt;T&gt; 
    where T : class, IEntityInterface 
{
    public T FindById(int id) 
    {
        //Uses the Id property from the interface
        return All.Where(t =&gt; t.Id == id).Single();
    }

    public IQueryable&lt;T&gt; All
    {
        get
        {
            //Get DbContext instance from somewhere
            return _dbContext.Set&lt;T&gt;();
        }
    }
}

public interface IEntityInterface 
{
    int Id { get; }
}
</code></pre>

<p>You can then go into further generics by making the entity interface a generic type as well.  And this all plays well with dependency injection and/or a factory pattern (if you're into that).</p>
"	1370166.0		1370166.0		2013-07-11 01:31:19	2013-07-11 01:31:19				6			
18134419	1	18134440.0		2013-08-08 19:26:03		4	37.0	"<p>I have a <code>IEnumerable&lt;int&gt;</code> which I can print out and which I can double (code below). That's not a problem. How do I adjust the linq statement so it will take these 3 values and output 6 values? For example have the values double and half so the values would be <code>12, 3, 16, 4, 8, 2</code>.</p>

<pre><code>foreach (var v in (new int[] { 6, 8, 4 }).Select(s=&gt;s*2))
    Console.WriteLine(v);
</code></pre>
"		user34537				2013-08-08 19:27:11	using linq to create more values?	<.net><linq>	1.0	0			
1842228	1	1842246.0		2009-12-03 19:15:08		1	183.0	"<p>I have a first query that returns a set of entities:</p>

<pre><code>var resultSet = ....query....ToList();
</code></pre>

<p>which would return A, B, C, D, E</p>

<p>The entities inside this set are organized into chains because they have a reference (prevEntityId) pointing to the same type of entity, i.e.:</p>

<p>A -> B -> D</p>

<p>C -> E</p>

<p>I would like to write a second query so that only A and C are now returned but I have no idea how to write it.</p>

<p>I would prefer your answer with linq methods (like .Where()) instead of the new linq syntax.</p>

<p>Thank you</p>

<p><strong>Update</strong>: sorry I initially used the wrong vocabulary in my question with the term ""foreign key"". Actually an entity has a direct reference to the previous entity so to elect an entity in the second query, there must be no other entity that references it. I thought it would take 2 queries but if you think it can be done in one...</p>
"	29244.0		29244.0		2009-12-03 20:12:45	2009-12-03 21:21:01	How to write this linq query?	<.net><linq>	3.0	2			
2066594	2		2066496.0	2010-01-14 18:38:37		2		"<p>Sure. You didn't specify a language so I hope that C# is okay (I'm not fluent in VB.NET but I can help you if you need help translating):</p>

<pre><code>var query = TerminalList.SelectMany(kvp =&gt; kvp.Value.TableCRCs.Values)
                        .GroupBy(info =&gt; new { info.TableID, info.CRC });

foreach (var result in query) {
    Console.WriteLine(
        String.Format(
            ""{0}|{1:x}"",
            result.Key.TableID,
            result.Key.CRC
        )
    );
}
</code></pre>

<p>The key to this is using <code>SelectMany</code> to flatten the nested enumerations of <code>TerminalInfo</code>s into one enumeration. From there it's just a usual <code>GroupBy</code> operation to get the desired result.</p>
"	45914.0					2010-01-14 18:38:37				1			
2094481	2		2094359.0	2010-01-19 15:16:36		2		"<p>We're running into a similar issue at my place of employment. My argument has been that LINQ is a consistent way of querying anything that supports IEnumerable (and others), not just databases. But, when using it to query databases, you get the added benefit of having all your queries strongly typed. You don't get this when doing inline SQL or calling stored procedures. This benefit is huge when entity definitions changes. The compiler will do all the work for you.</p>
"	163534.0					2010-01-19 15:16:36				0			2010-01-19 15:16:36
2141360	1	2141376.0		2010-01-26 17:43:19		1	122.0	"<p>Given the following two cases, which one is preferable (If they're both bad, doing it a completely different way is an option too)?</p>

<p><code>Convert.ToInt32</code> called in <code>Where</code>:</p>

<pre><code> var items = GetItems();
 if (aDropDownList.SelectedIndex &gt; 0) 
 {
     items = items.Where(x =&gt; 
             x.IntProperty == Convert.ToInt32(aDropDownList.SelectedValue));
 }
</code></pre>

<p><code>Convert.ToInt32</code> called before <code>Where</code>:</p>

<pre><code>var items = GetItems();
 if (aDropDownList.SelectedIndex &gt; 0) 
 {
     int selectedDropDownValue = Convert.ToInt32(aDropDownList.SelectedValue);
     items = items.Where(x =&gt; x.IntProperty == selectedDropDownValue);
 }
</code></pre>
"	223391.0		223391.0		2010-01-26 17:59:46	2010-01-26 17:59:46	Is Convert in Where bad?	<.net><linq>	3.0	3		2013-07-12 15:12:26	
2677310	2		2677231.0	2010-04-20 17:37:15		1		"<p>Given this object structure</p>

<pre><code>class A
{
    public List&lt;B&gt; Bs { get; set; }
}

class B
{
    public List&lt;C&gt; Cs { get; set; }
}

class C
{
    public int D { get; set; }
}
</code></pre>

<p>And this initialization</p>

<pre><code>A a = new A();
a.Bs = new List&lt;B&gt;();
a.Bs.Add(new B() { Cs = new List&lt;C&gt;() { new C() { D = 4 }, new C() { D = 5 } } });
a.Bs.Add(new B() { Cs = new List&lt;C&gt;() { new C() { D = 2 }, new C() { D = 3 } } });
</code></pre>

<p>You can find all instances of C where D equals 4 like this</p>

<pre><code>var query = from b in a.Bs
            from c in b.Cs
            where c.D == 4
            select c;
</code></pre>

<p>The result type would be <code>IEnumerable&lt;C&gt;</code>. If you wanted or expected a single C, you could modify the query slightly.</p>

<pre><code>C firstC = (from b in a.Bs
            from c in b.Cs
            where c.D == 4
            select c).FirstOrDefault();
</code></pre>

<p>Same queries in extension/lambda form</p>

<pre><code>var allCs = a.Bs.SelectMany(b =&gt; b.Cs).Where(c =&gt; c.D == 4);
C firstC = a.Bs.SelectMany(b =&gt; b.Cs).FirstOrDefault(c =&gt; c.D == 4);
</code></pre>
"	414076.0		414076.0		2010-04-20 18:21:50	2010-04-20 18:21:50				0			
18220372	1	18220433.0		2013-08-13 22:33:37		1	41.0	"<p>Here is some <a href=""http://ideone.com/cbs43g"" rel=""nofollow"">example code with the correct output</a></p>

<p>The idea is I require 6 rows. I don't care about how many columns I have. The IEnumerable are my columns. I'd like the first row to hold the first value of each IEnumerable. Second row hold the second etc. If there isn't enough values in the IEnumerable/column put -1 as a placeholder.</p>

<p>This code does it but I'm sure there is a linq statement I can use rather then implement it this way. Any idea how to do this using linq?</p>

<pre><code>var mydata = new IEnumerable&lt;int&gt;[] { Enumerable.Range(2, 3), Enumerable.Range(5, 5), Enumerable.Range(7, 6), Enumerable.Range(3, 2) };
var temp = new List&lt;int&gt;[6];
for (int i = 0; i &lt; 6; ++i)
    temp[i] = new List&lt;int&gt;();
foreach (var v in mydata)
{
    var len = v.Count();
    int i;
    for (i = 0; i &lt; 6&amp;&amp;i&lt;len; ++i)
    {
        temp[i].Add(v.ElementAt(i));
    }
    for (; i &lt; 6; ++i)
        temp[i].Add(-1);
}
foreach (var outer in temp)
{
    foreach (var inner in outer)
    {
        Console.WriteLine(inner);
    }
    Console.WriteLine(""---"");
}
</code></pre>
"		user34537				2013-08-13 22:49:14	How do I rotate cols<->rows?	<.net><linq>	2.0	0			
18290782	2		18290681.0	2013-08-17 16:06:25		2		"<p>If you just want the default value (null, zero, etc) then you can use the built-in <a href=""http://msdn.microsoft.com/en-us/library/bb494386.aspx"" rel=""nofollow""><code>ElementAtOrDefault</code></a>:</p>

<pre><code>Console.WriteLine(""{0}"", arr.ElementAtOrDefault(5));
</code></pre>

<p>But if you want to specify your own ""default"" value (eg, 6) then you'll need to provide your own extension method to do it:</p>

<pre><code>Console.WriteLine(""{0}"", arr.ElementAtOrValue(5, 6));

public static class EnumerableExtensions
{
    public static T ElementAtOrValue&lt;T&gt;(
        this IEnumerable&lt;T&gt; source, int index, T defaultValue)
    {
        if (source == null) throw new ArgumentNullException(""source"");
        if (index &gt;= 0)
        {
            var list = source as IList&lt;T&gt;;
            if (list != null)
            {
                if (index &lt; list.Count) return list[index];
            }
            else
            {
                using (var enumerator = source.GetEnumerator())
                {
                    while (enumerator.MoveNext())
                    {
                        if (index-- == 0) return enumerator.Current;
                    }
                }
            }
        }
        return defaultValue;
    }
}
</code></pre>
"	55847.0		55847.0		2013-08-17 16:14:45	2013-08-17 16:14:45				3			
19915961	2		19915788.0	2013-11-11 21:07:12		2		"<p>I think you mean ForEach extension, you may use it like this</p>

<pre><code>States.ToList().ForEach(Function(item) myMethod(item.Key, item.Value))
</code></pre>
"	2881286.0					2013-11-11 21:07:12				2			
21000917	1	21001048.0		2014-01-08 16:14:58		6	86.0	"<p>I need to get a random element from a list (that is not two of the values in the list). The following works fine:</p>

<pre><code>Company dest = companies
    .Where(cpy =&gt; cpy != src &amp;&amp; cpy != plyr.PowerUpInAction.Passenger.Destination)
    .OrderBy(pu =&gt; rand.Next())
    .ToList()[0];
</code></pre>

<p>Is there a better (ie more efficient) way to do this? Converting to a list strikes me as extra work.</p>

<p>thanks - dave</p>
"	509627.0		284240.0		2014-01-08 16:20:46	2014-02-10 14:30:16	What's the best way to get a single random element from a List<>?	<.net><linq>	4.0	0	1.0		
21032881	2		21000917.0	2014-01-09 22:52:57		1		"<p>The accepted answer is perfectly fine BUT i would use <code>.FirstOrDefault()</code> instead of <code>First()</code>.</p>

<p>The reason is <code>.First()</code> throws an exception (ArgumentNullException) if not row is found. This
means your code will be stopped.  You will have to add an extra try-catch to handle this.</p>

<p><code>.FirstOrDefault()</code> in the same scenario will return a null object (in your case an empty Company object) that causes not damage at all. You won't have to add any try-catch neither nulls validations in your code. </p>

<p>Saving you to add more codes and future damages in case your company table in the future for some reason needs to be empty. This is a maintenance point of view. </p>
"	2089460.0					2014-01-09 22:52:57				0			
2724128	2		2724096.0	2010-04-27 18:57:34		14		"<p>If I recall, Single() checks if there is another element after the first one (and throws an exception if it's the case), while First() stops after getting it. Both throw an exception if the sequence is empty.</p>

<p>Personnally, I always use First().</p>
"	71141.0					2010-04-27 18:57:34				2			
2724312	2		2724096.0	2010-04-27 19:21:54		3		"<p>A lot of people I know use FirstOrDefault(), but I tend to use SingleOrDefault() more because often it would be some sort of data inconsistency if there were more than one.  This is dealing with LINQ-to-Objects, though.</p>
"	18049.0					2010-04-27 19:21:54				0			
3165388	2		3019251.0	2010-07-02 11:52:30		1		"<p>From your code, I'm guessing that ToInt() is an extension method. I'm pretty sure the indexer on DataRow returns objects, and I don't remember Object defining ToInt().</p>

<p>If this is true, ToInt might be doing something performance sapping. Maybe it's doing something like</p>

<pre><code>try { return Int32.Parse(arg); }
catch { return 0; }
</code></pre>

<p>If Int32.Parse can't handle most of the values from row[""aq""], it could be causing the slowness - check your debug window for exceptions. If this is the problem you can speed it up using Int32.TryParse which won't throw an exception.</p>

<p>If I'm wrong can you provide some more information? What is ToInt()?</p>

<p>EDIT:</p>

<p>I should have known that it would be Convert.ToInt32, as Int32.Parse takes a String for a parameter. My proposed solution is as follows.</p>

<p><strong>Criticism of the use of Convert.ToInt32:</strong></p>

<p>You should <i>not</i> catch exceptions from Convert.ToInt32. It throws what <a href=""https://stackoverflow.com/users/88656/eric-lippert"">Eric Lippert</a> would call 'Boneheaded' exceptions. Exceptions that should <i>never</i> happen. If you get an exception from Convert.ToInt32, your program is wrong. You have tried to convert something to an Int32 that does not represent an Int32. Consider what the unit tests would look like for the ToInt extension method. You could call myPrizeSheep.ToInt() and get 0. Does converting a sheep to a number make sense? Swallowing exceptions from Convert.Int32 will usually lead to trouble down the road - in your case it was a performance issue, but often it can be worse - a correctness issue.</p>

<p>There is no Convert.TryConvertInt32(Object). There is an Int32.TryParse(String) though. This is because it's very common to want to parse a string input by a user to an Int32. You expect that they may have entered something that's not an Int32 - it's not an exceptional case if they do that - you can just tell the user to correct it - it's part of the normal flow of program execution.</p>

<p>If you have an object, you <i>must</i> know it represents an Int32 in order to want to try and convert it. If what you pass to Convert.ToInt32 does not represent an Int32, then that's an exceptional case. I can't think of a single instance where you'd want to 'try' to convert any old Object to an Int32 - and obviously neither can the BCL devs.</p>

<p>I don't think ToInt is good use of an extension method. I typically use extension methods so I can chain together calls using a nice pipe-forward style syntax. There are few instances where you'd want to chain ToInt() to other method calls.</p>

<p>Because all ToInt does is call Convert.ToInt32 and wrongly swallows any exceptions. You're much better off just using Convert.ToInt32 in your examples.</p>

<p><strong>The solution:</strong></p>

<p>Consider how to deal with things that aren't ints in your Linq query. In your case they're likely to be nulls or DBNulls. It is likely that you'll want to exclude those rows, in which case you can write something along the lines of:</p>

<pre><code>var c4types = (from DataRow row in dtSource.Select(""hasreq"") 
               where row[""aq""] != null &amp;&amp; row[""aq""] != DBNull.Value &amp;&amp; row[""aq""].ToInt() &gt; 0 
               select new { col = row[""aq""] }).Distinct();
</code></pre>

<p>That expression has the drawback that you end up with a list of Objects rather than Int32s. You could do a conversion in the final select, but you'd then be doing the conversion twice. To be honest, my preferred way (if you want a collection of Int32s rather than Objects) would be:</p>

<pre><code>var c4types = dtSource.Select(""hasreq"")
                      .Where(row =&gt; row[""aq""] != null &amp;&amp; row[""aq""] != DBNull.Value)
                      .Select(Convert.ToInt32(row[""aq""])
                      .Where(i =&gt; i &gt; 0)
                      .Distinct();
</code></pre>

<p>In the above, we first get rid of rows with null values. We then convert the rows we know have ints. Then we get rid of ints less than 1, and finally get a unique collection of integers.</p>
"	380159.0		-1.0		2017-05-23 10:32:18	2010-07-17 17:27:08				2			
3444188	1	3444227.0		2010-08-09 21:04:13		1	56.0	"<p>I have the following T-SQL that replaces blank values with '[Unknown]'.  How can I achieve this in a LINQ to EF query?</p>

<pre><code>select distinct case when CostCentre = '' then '[Unknown]' else CostCentre end as CostCentre
</code></pre>
"	8741.0					2010-08-09 21:30:49	How do I substitute one value for a property in a LINQ query result for another value?	<.net><linq>	2.0	0			
3658915	2		3654825.0	2010-09-07 13:06:32		0		"<p>For me, it came mostly in the form of LINQ to SQL, where the generated SQL was something completely different than what I thought it was going to be, mostly because of needed parenthesis around certain conditions.  Or, certain keywords weren't supported like I expected them too.</p>

<p>Additionally, dealing with the context related to the generated objects was an eye opener when I started initially with LINQ too.</p>

<p>Lastly one developer embedded calculation logic into a LINQ query, and that made it harder to figure out where a calculation went wrong... mostly that's a design issue, but LINQ helped to complicate the process...</p>
"	231716.0		231716.0		2010-09-07 14:39:34	2010-09-07 14:39:34				0			2010-09-07 13:06:32
3659450	2		3654825.0	2010-09-07 14:15:11		0		"<p>The biggest gotcha I came across was the horrible lack of debugger support. Basically, when it works, Linq is nice. But when it doesn't, it is harder to debug than assembly. For instance, I've tried to use it to get data out of an Excel XML file. It worked on my simple testcases, but on some input it just threw a null pointer exception. You have to do a binary search just to find the offending row, and that can take hours.</p>
"	15416.0					2010-09-07 14:15:11				0			2010-09-07 14:15:11
3759745	2		3759726.0	2010-09-21 11:17:17		3		"<blockquote>
  <p>""The dictionary passed in, is constantly increasing in size""</p>
</blockquote>

<p>Do you mean that it's being modified while you're executing this code? That's a no-no. I suspect the <code>ToList</code> call is failing due to this. (After <code>ToList()</code> has executed, the list should be effectively separate from the dictionary.)</p>

<p>Basically <code>Dictionary&lt;TKey, TValue&gt;</code> doesn't support concurrent reading and writing. You might want to look at <a href=""http://msdn.microsoft.com/en-us/library/dd287191.aspx"" rel=""nofollow noreferrer""><code>ConcurrentDictionary&lt;,&gt;</code></a> which allows you to iterate over it while another thread is writing.</p>

<p>One suggestion to improve performance when it's all working: call <code>side.ToString()</code> <em>once</em> at the start of the method, instead of on every single loop iteration.</p>
"	22656.0					2010-09-21 11:17:17				2			
3870933	2		3870884.0	2010-10-06 09:01:57		0		"<p>You have to group by all fields that are not aggregated. So value needs to be summed up or grouped by.</p>

<p>Try:</p>

<pre><code>        var result = TestList
            .GroupBy(t =&gt; t.id)
            .Select(g =&gt; new { id = g.Key, g.OrderByDescending(c =&gt; c.dt).First().dt, g.OrderByDescending(c =&gt; c.dt).First().value });
</code></pre>
"	21692.0		21692.0		2010-10-06 09:25:16	2010-10-06 09:25:16				6			
4062622	1	4062649.0		2010-10-31 09:47:59		1	74.0	"<p>What are the different collections available to store objects and which one's best to use when? IList, IEnumerate, IQueryable...</p>

<p>I'm new to .net</p>

<p>Thanks.</p>
"	471807.0		109112.0		2010-10-31 09:51:59	2010-10-31 09:56:54	object collections with linq	<.net><linq>	1.0	1	1.0		
24681405	1	24681506.0		2014-07-10 16:09:33		1	38.0	"<p>Is LinqToSQL syntax same as LinqToEntity or any other LINQ_TO? Is there any additional syntax(usable methods) that can be used when we process for example data from SQL server that cannot be used in XML data or array data?</p>

<p>I understand that I can use on all datasources methods shown here:
<a href=""http://code.msdn.microsoft.com/101-LINQ-Samples-3fb9811b"" rel=""nofollow"">http://code.msdn.microsoft.com/101-LINQ-Samples-3fb9811b</a></p>

<p>but are there some methods that are specific to some LINQ providers?</p>

<p>Or it is safe to say that LINQ syntax is 100% compatible within all providers?</p>
"	2393593.0					2014-07-10 16:29:52	Is LinqToSQL syntax same as LinqToEntity or any other LINQ_TO?	<.net><linq>	2.0	0			
30179344	2		30178491.0	2015-05-11 23:37:29		1		"<p>You can use a GroupBy before building the Lookup in Combination with a select many. This doesnt feel so good however:</p>

<p>Something like this:</p>

<pre><code>sequence.GroupBy(kvp =&gt; _getKey(kvp))
        .SelectMany(grp =&gt; grp.Distinct()
                              .Select(value =&gt; new { grp.Key, Value = value}))
        .ToLookUp(grp =&gt; grp.Key, grp=&gt; grp.Value);
</code></pre>

<p>Alternative would be using a Dictionary, since I am not quite sure why you want to use lookup.</p>

<pre><code>sequence.GroupBy(kvp =&gt; _getKey(kvp))
        .Select(g =&gt; new { g.Key, Values = new HashSet&lt;WhatEver&gt;(g)})
        .ToDictionary(v =&gt; v.Key, v =&gt; v.Values);
</code></pre>

<p>Alternative to Hashset would be providing an <a href=""https://msdn.microsoft.com/de-de/library/vstudio/ms132151(v=vs.100).aspx"" rel=""nofollow"">EqualityComparer</a> with the Distinct()</p>

<pre><code> public sealed class WhatEverComparer : IEqualityComparer&lt;WhatEver&gt;
 {
    ... implement interface..
 }
</code></pre>

<p>Then</p>

<pre><code>sequence.GroupBy(kvp =&gt; _getKey(kvp))
        .Select(g =&gt; new { g.Key, Values = g.Distinct(new WhatEvercomparer()).ToArray()})
        .ToDictionary(v =&gt; v.Key, v =&gt; v.Values);
</code></pre>
"	1789202.0					2015-05-11 23:37:29				0			
30566582	2		30566114.0	2015-06-01 06:02:44		0		"<p>I got it! Just instead of </p>

<pre><code>dataTable.Select();
</code></pre>

<p>I should use </p>

<pre><code>dataTable.AsEnumerable();
</code></pre>
"	4164585.0					2015-06-01 06:02:44				0			
31546850	1	31547118.0		2015-07-21 18:25:47		0	216.0	"<p>If I had an object called <code>Thing</code> that had a property <code>Id</code> and <code>Children</code> where <code>Children</code> is essentially a list of <code>Thing</code>. It would look like this:</p>

<pre><code>Public Class Thing
    Public Property Id As Guid
    Public Property Children As List(Of Thing)
End Class
</code></pre>

<p>Now Given an existing <code>List(Of Thing)</code>, let's called it <code>aList</code> for the sake of this example, how could I use LINQ to recursively loop throw each Thing and Children to find out if an Item exist in the entire hierarchy? </p>

<p><code>Dim aList As List(Of Thing)</code>  </p>

<p>In order words, given an ID, how would I write the LINQ statement against <code>aList</code> to see if that ID exists anywhere in the  hierarchy?</p>

<p>Hope you can help me and thanks in advance for your contribution! </p>
"	314830.0		1630665.0		2015-07-21 18:30:09	2015-07-21 18:49:38	How do write LINQ query to do recursion?	<.net><linq>	1.0	3			
31823344	1			2015-08-05 04:16:16		1	77.0	"<p>I have looked all over google but couldn't find a proper solution to my problem. 
I have a join result with 2 different tables, which have total of 30+ fields. It's obvious i can manually type out every field as below:</p>

<pre><code>dbcontext.table1s.join(dbcontext.table2s,x=&gt;table1ID,y=&gt;table2ID, (x,y)=&gt; new someTempClass {field1=x.field1,field2=x......})
</code></pre>

<p>I found this link, which is what I am looking for. However, it seems to work fine if the anonymous type look like {x} or {y} but not {x,y.field1}
<a href=""http://www.palmmedia.de/blog/2012/2/18/aspnet-mvc-generic-filtering-based-on-expressions"" rel=""nofollow"">http://www.palmmedia.de/blog/2012/2/18/aspnet-mvc-generic-filtering-based-on-expressions</a></p>

<p>I really only need one field from table2.</p>
"	1784014.0		1033581.0		2017-03-25 18:26:48	2017-03-25 18:26:48	linq/lambda best approach to project anonymous type to strong type	<.net><linq>	2.0	1	0.0		
4203277	1	4203305.0		2010-11-17 10:00:56		1	216.0	"<p>Simple question, not sure what the best answer is although I suspect it involves Linq.</p>

<p>I have a list of ""order"" objects, each of which has an Id and a collection of ""orderItem"" objects, each of which in turn has an Id. However, the orderItem objects don't contain a direct reference to the ""order"" ID.</p>

<p>I need to get a list of all the ""orderItem"" objects of all the ""orders"" in the list, sorted first by orderItemID and then orderID. </p>

<p>(If I had a reference to orderID in orderItemID it would be very easy but I don't, and it'd be ugly and inefficient to add one just to do this).</p>

<p>I can easily get the list of all the orderItem objects by iteration, obviously, but then I can't do the sorting I need. Thoughts?</p>
"	271907.0					2010-11-17 10:05:08	Linq - flatten and sort by parent	<.net><linq>	1.0	0	1.0		
4262378	2		4260751.0	2010-11-24 00:16:06		0		"<p>I ended up solving like this.  </p>

<pre><code>    public void CreateChildIfNull(LambdaExpression Child)
    {
        Type ChildType = Child.Body.Type;
        var NewChild = Activator.CreateInstance(ChildType);
        Entity.GetType().GetProperty(ChildType.Name).SetValue(Entity, NewChild, null);
    }
</code></pre>
"	482286.0		482286.0		2010-11-24 00:36:36	2010-11-24 00:36:36				0			
4381348	2		4381088.0	2010-12-07 20:39:03		0		"<p>The query that you have will create a list of objects which will have references to queries (the categories) which will then be executed when they are accessed (if they are at all).</p>

<p>This can cause a lot of ""chatter"" between the client and the database server, as well as the additional overhead of sending header data repeatedly across your TDS stream.</p>

<p>You might want to consider performing a join and flattening out the data here.  It would require just one lookup, at the cost of replicating the data on the left hand side (items).</p>

<p>Of course, with any optimization, the key is to test, test, test.</p>
"	50776.0					2010-12-07 20:39:03				0			
4550894	2		4549339.0	2010-12-29 01:41:49		61		"<p>Some people like Dictionaries, but I prefer Lookups due to the behavior when a key is missing.</p>

<pre><code>IEnumerable&lt;MyObj&gt; allValues = ...
ILookup&lt;bool, MyObj&gt; theLookup = allValues.ToLookup(val =&gt; val.SomeProp);

  //does not throw when there are not any true elements.
List&lt;MyObj&gt; trues = theLookup[true].ToList();
  //does not throw when there are not any false elements.
List&lt;MyObj&gt; falses = theLookup[false].ToList();
</code></pre>

<p>Unfortunately, this approach enumerates twice - once to create the lookup, then once to create the lists.</p>

<p>If you don't really need lists, you can get this down to a single iteration:</p>

<pre><code>IEnumerable&lt;MyObj&gt; trues = theLookup[true];
IEnumerable&lt;MyObj&gt; falses = theLookup[false];
</code></pre>
"	8155.0		8155.0		2010-12-29 10:18:17	2010-12-29 10:18:17				3			
4672605	2		4672495.0	2011-01-12 18:40:26		1		"<p>Maybe you need to help LINQ out on this one. It cannot resolve the type of row?</p>

<p>Try:</p>

<pre><code>return (from row as DataRow in dataset.Tables[0].Rows
                select new TicklerContact
                           {
                               CompanyKey = row.ToInt32(""iTicklerContact""),
                               Contact = row.ToString(""ccontact""),
                               ContactKey = row.ToInt32(""iconkey""),
                               TicklerContactKey = row.ToInt32(""iTicklerContactKey""),
                               Role = row.ToString(""contactrole""),
                               Exists = row.ToBool(""contactexists"")
                             }).ToList();
</code></pre>

<p><strong>EDIT</strong></p>

<p>Stupid VB / C# brain smash :P</p>

<p>Try:</p>

<pre><code>return (from DataRow row in dataset.Tables[0].Rows
                select new TicklerContact
                           {
                               CompanyKey = row.ToInt32(""iTicklerContact""),
                               Contact = row.ToString(""ccontact""),
                               ContactKey = row.ToInt32(""iconkey""),
                               TicklerContactKey = row.ToInt32(""iTicklerContactKey""),
                               Role = row.ToString(""contactrole""),
                               Exists = row.ToBool(""contactexists"")
                             }).ToList();
</code></pre>
"	392957.0		392957.0		2011-01-12 18:52:05	2011-01-12 18:52:05				2			
33236248	2		33236020.0	2015-10-20 12:07:22		0		"<p>You could use <code>IEquality Comparer</code> for this</p>

<p>This is generic implementation of IEquality</p>

<pre><code>public class GenericEqualityComparer&lt;T&gt; : IEqualityComparer&lt;T&gt;
{
    private Func&lt;T, T, bool&gt; _equalsFunction;
    private Func&lt;T, int&gt; _hashCodeFunction;

    public GenericEqualityComparer(Func&lt;T, T, bool&gt; equalsFunction, Func&lt;T, int&gt; hashCodeFunction)
    {
        if (equalsFunction == null) throw new ArgumentException();
        if (hashCodeFunction == null) throw new ArgumentException();

        _equalsFunction = equalsFunction;
        _hashCodeFunction = hashCodeFunction;
    }

    public bool Equals(T x, T y)
    {
        return _equalsFunction(x, y);
    }

    public int GetHashCode(T obj)
    {
        return _hashCodeFunction(obj);
    }
}
</code></pre>

<p>Sample usage</p>

<pre><code>var difference = List1.Except(list2, new GenericEqualityComparer&lt;Product&gt;((x, y) =&gt; x.IsActive== y.IsActive &amp;&amp; y.Id== y.Id, x =&gt; x.ID.GetHashCode()));
</code></pre>

<p>Take a look at <a href=""https://msdn.microsoft.com/en-us/library/vstudio/bb300779(v=vs.100).aspx"" rel=""nofollow"">msdn</a> </p>
"	1876572.0		1876572.0		2015-10-20 12:20:26	2015-10-20 12:20:26				0			
37856010	2		12972295.0	2016-06-16 10:04:27		-2		"<p>Use <code>DefaultIfEmpty()</code> instead of <code>FirstOrDefault()</code>.</p>
"	2090935.0		1671066.0		2016-10-27 07:01:29	2016-10-27 07:01:29				0			
40232236	2		40232183.0	2016-10-25 05:48:21		3		"<p><code>m</code> is the parameter to the lambda expression. It will be called with each element in the collection (as far as necessary). This is an inefficient way of writing the code, however. It would be better to use:</p>

<pre><code>int regionCode = int.Parse(region.RegionCode);
var targetRegion = regionTerritory.FirstOrDefault(m =&gt; m.Region == regionCode);
if (targetRegion != null)
{
    targetRegion.Territories.Add(regionCode, region.TerritoryName);
}
</code></pre>

<p>Now:</p>

<ul>
<li>We only parse <code>region.RegionCode</code> once</li>
<li>We only need to find the matching region in <code>regionTerritory</code> once (and then add to it)</li>
</ul>
"	22656.0					2016-10-25 05:48:21				2			
47461783	2		47460993.0	2017-11-23 18:45:52		0		"<p>Do you want something like that; </p>

<pre><code>    var query = (from wv in Source select row); //Init query

    query = (from wv in query
                 select wv);

    query = CreateDynamicBoolFilter(SearchSpec, query);

    public static IEnumerable&lt;Source&gt; CreateDynamicBoolFilter(SearchSpec searchSpec, IEnumerable&lt;Source&gt; query)
    {
        //Firstly, bool? properties of searchSpech object are retrieved using reflection
        var booleanProperties = searchSpec.GetType()
                .GetProperties()
                .Where(prop =&gt; prop.PropertyType == typeof(bool?));

        foreach (var prop in booleanProperties)
        {
            var propValue = (bool?) prop.GetValue(searchSpec, null);
            if (propValue != null) // Determine to prop value is nullable, if it doesn't apply filter
            {
                var propName = prop.Name;
                query = query.Where(x =&gt; (bool?) x.GetType().GetProperties().FirstOrDefault(p =&gt; p.Name == propName)?.GetValue(x, null) == propValue);
            }
        }
        return query;
    }
</code></pre>
"	1370808.0		1370808.0		2017-11-23 18:52:11	2017-11-23 18:52:11				2			
48906582	2		48901721.0	2018-02-21 12:59:55		1		"<p>Although you didn't define it, I think with the phrase ""the latest row from B for corresponding value of A"" you mean that if you take all rows from B for a certain A_id, the latest one is the one with the highest value for B_Id. In your example: the row with B_Id 2 for A_Id 1, and the row with B_Id 4 for A_Id 2.</p>

<p>Let's do it in two steps: first I get the latest table B items per A_id, then I join them with table A:</p>

<pre><code>var latestTableB = tableB
    .GroupBy(b =&gt; b.A_id)
    .Select(group =&gt; group.OrderByDescending(groupElement =&gt; groupElement.B_Id)
     .First();
</code></pre>

<p>In words: group all elements of table B into groups with same A_id. Then sort all elements in the group by descending B_Id. The first element of the result will be the one with the latest B_Id</p>

<p>Join this with the elements of table A:</p>

<pre><code>var result = latestTableB.Join(tableA,
   tableBElement =&gt; tableBElement.A_Id,
   tableAElement =&gt; tableAElement.A_Id,
   (b, a) =&gt; new
   {
        A_Id = b.A_Id,
        name = a.Value,
        B_Id = b.B_Id,
   });
</code></pre>

<p>In words: join the elements from latestTableB with the elements from tableA. From every element in latestTableB take the A_Id; from every element in tableA take the A_Id. When they macth, use the matching b and a from latestTableB and tableA to create one new object with the desired properties</p>

<p>TODO: concatenate these two statements into one</p>
"	2281790.0					2018-02-21 12:59:55				2			
5031756	2		5031726.0	2011-02-17 16:35:46		29		"<p><code>Where</code> can examine the whole sequence looking for matches.</p>

<pre><code>Enumerable.Range(1, 10).Where(x =&gt; x % 2 == 1)
// 1, 3, 5, 7, 9
</code></pre>

<p><code>TakeWhile</code> stops looking when it encounters the first non-match.</p>

<pre><code>Enumerable.Range(1, 10).TakeWhile(x =&gt; x % 2 == 1)
// 1
</code></pre>
"	8155.0		8155.0		2014-08-15 17:26:14	2014-08-15 17:26:14				0			
5091125	1	5091181.0		2011-02-23 12:49:08		2	674.0	"<p>Let's say I've got memory-based datatable like this:</p>

<pre><code>DataTable dt = new DataTable();
dt.Columns.Add(""c1"", System.Type.GetType(""System.Double""));
dt.Columns.Add(""c2"", System.Type.GetType(""System.Double""));
...

DataRow row = dt.AddRow();
row[""c1""] = 1;
row[""c2""] = 2;
...
</code></pre>

<p>Then I query this table:</p>

<pre><code>List&lt;DataRow&gt; rows = (from r in table where (double)r[""c1""] &lt; 2.0 select r).ToList();
</code></pre>

<p>And in profiler I see that it creates a lot of doubles. I assume that it somehow related to the comparison.</p>

<p>Any ideas how to get rid of this needless memory allocation?</p>

<p>I use .NET 4, VS 2010, C#.</p>
"	346783.0					2011-02-23 12:53:03	Boxing/unboxing in DataTables and LINQ	<.net><linq>	1.0	0			
5185532	1	5185643.0		2011-03-03 19:30:39		0	386.0	"<p>I have a database table with a sortOrder column.  I display this list to the user and they use jquery to resort the list, then save it back to the server.</p>

<p>After the reorder the list I get a new list in the correct order of all the IDs in that database table.</p>

<p>I need a good way to update this new sort order to the database.  What I want is to query the database with a custom sort order based off this list of IDs I get back from the user.  I can then step through that list and increment the sort order from 0.</p>

<p>Bonus points for code in VB, although C# is fine too.</p>

<p>Thanks!</p>
"	544193.0					2011-03-03 20:03:07	LINQ Update database sort order against a dynamic list	<.net><linq>	1.0	0			
5200894	2		5200873.0	2011-03-05 00:59:04		0		"<p>Try upgrading the framework to 3.0 then you can use LINQ</p>
"	336767.0					2011-03-05 00:59:04				0			
5215506	2		5215469.0	2011-03-07 03:25:22		51		"<p>You can write your own extension method:</p>

<pre><code>public static IEnumerable&lt;IEnumerable&lt;T&gt;&gt; Partition&lt;T&gt;(this IEnumerable&lt;T&gt; sequence, int size) {
    List&lt;T&gt; partition = new List&lt;T&gt;(size);
    foreach(var item in sequence) {
        partition.Add(item);
        if (partition.Count == size) {
            yield return partition;
            partition = new List&lt;T&gt;(size);
        }
    }
    if (partition.Count &gt; 0)
        yield return partition;
}
</code></pre>

<p>I <a href=""http://blog.slaks.net/2010/12/nested-iterators-part-2.html"" rel=""noreferrer"">explored this in more depth</a> in my blog.</p>
"	34397.0		34397.0		2013-02-18 21:50:15	2013-02-18 21:50:15				4			
5215540	2		5215469.0	2011-03-07 03:31:45		0		"<p>Try an iterator block:</p>

<pre><code>public static IEnumerable&lt;List&lt;Person&gt;&gt; AsGroups(this List&lt;Person&gt; persons)
{
    var buf = new List&lt;Person&gt;(10);
    for (int i = 0; i&lt;persons.Count i++;)
    {
        buf.Add(persons[i]);
        if (i%10 == 0 &amp;&amp; buf.Count &gt; 0)
        {
           yield return buf;
           buf = new List&lt;Person&gt;(10);
        }
    }
    yield return buf;
 }
</code></pre>
"	3043.0					2011-03-07 03:31:45				0			
5221464	2		5215469.0	2011-03-07 15:26:57		0		"<blockquote>
  <p>Is there an elegant way in LINQ</p>
</blockquote>

<p>The <a href=""https://stackoverflow.com/a/420534/8155"">elegant way</a> is not very performant.  Here is a more performant way... </p>

<pre><code>    public static List&lt;List&lt;T&gt;&gt; Chunk&lt;T&gt;(
      this List&lt;T&gt; theList,
      int chunkSize
    )
    {
        if (!theList.Any())
        {
            return new List&lt;List&lt;T&gt;&gt;();
        }

        List&lt;List&lt;T&gt;&gt; result = new List&lt;List&lt;T&gt;&gt;();
        List&lt;T&gt; currentList = new List&lt;T&gt;();
        result.Add(currentList);

        int i = 0;
        foreach(T item in theList)
        {
            if (i &gt;= chunkSize)
            {
                i = 0;
                currentList = new List&lt;T&gt;();
                result.Add(currentList);
            }
            i += 1;
            currentList.Add(item);
        }
        return result;
    }
</code></pre>
"	8155.0		-1.0		2017-05-23 12:18:17	2012-07-12 19:00:03				1			
53147538	2		53119746.0	2018-11-05 02:26:46		0		"<p>Of course you can. Implement the given methods specifically for your type. You can provide your type specific implementations either as extension methods or as instance methods and the compiler will choose them since they are more specific (naturally extension-methods will need to be in scope in order to be considered).</p>

<p>An example of type specific optimizations of LINQ methods can be found targeting <code>System.Collections.Immutable.ImmutableArray&lt;T&gt;</code>.</p>
"	1915893.0					2018-11-05 02:26:46				2			
53166031	1	53210978.0		2018-11-06 05:08:47		2	53.0	"<p>I am trying to write a linq query.basically the requirement is this
I have this parent list which contains a list of applicant 
Applicant=(john,mary,sam......)
Inside each applicant there are multiple there are multiple.attributes represented by an object
For example: john has his credit bureau information through an object collection called bureau which contains bureau score,quality score,customer score and so on.Inside bureau.</p>

<p>Now the requirement is I want to.loop through all applicant.go inside bereau of each applicant and then see.if the bureau score of that applicant is zero or not.Remember
Bureau score is inside the object collection bureau which is inside the parent list of applicant
Bureau score is  a string that is how it's passed from.the vendor and I don't want a null exceptions if a.node dosent exist</p>

<p>Code Sample: Lets say I have an Employee Collection.That Employee Collection has a further Bureau Collection and inside Bureau you have a collection of attributes one of which is Bureau score. 
I wrote down this </p>

<pre><code> var item = Employee
              .Where(x =&gt; x.Bureau != null)
              .SelectMany(b =&gt; b.Bureau)
              .Select(bs =&gt; bs.BureauScore != null &amp;&amp;
                            int.TryParse(bs.BureauScore, out result));
</code></pre>

<p>Reason I used a try parse is because by default BureauScore is a string. All I need to find out is if there is an integer value inside BureauScore or not. </p>

<p>This code works for me I did this after I posted but any comments to further make it concise would be appreciated.</p>
"	10268149.0		107625.0		2018-11-08 15:31:11	2018-11-08 15:31:11	Reading child list of a parent list	<.net><linq>	1.0	3			
56031518	1			2019-05-07 23:05:28		0	53.0	"<p>I have the following .net fiddle code and was wondering if someone could kindly point me in the correct direction to why  I can't use the nested Type.Number or Type.Description definitions in the Linq query. I'm doing something incorrect, but don't know what. Tnx.</p>

<pre><code>    public class Program
    {
        public static void Main()
        {
                string xml = @""&lt;?xml version='1.0'?&gt;
                    &lt;class number='1'&gt;
                        &lt;catch&gt;English&lt;/catch&gt;
                        &lt;type number='1'&gt;
                            &lt;catch&gt;data&lt;/catch&gt;
                        &lt;/type&gt;
                        &lt;section number='1'&gt;
                            &lt;catch&gt;data&lt;/catch&gt;
                        &lt;/section&gt;
                    &lt;/class&gt;"";

                XElement element= XElement.Parse(xml);
                List&lt;Class&gt; Classes = ( from t in element.Descendants(""class"")
                    select new Class()
                    {
                         Type.Number = t.Element(""type"").Attribute(""number"").Value,
                         Type.Description = t.Element(""catch"").Value,
                         Section.Number = t.Element(""class"").Attribute(""number"").Value,
                         Section.Description = t.Element(""catch"").Value,
                   }).ToList();
        }
    }

    public class Class
        {
            public ClassType Type { get; set; }
            public Class()
            {
                Type = new ClassType();
                Section = new ClassType();
            }
        }
        public class ClassType
        {
            public string Number { get; set; }
            public string Description { get; set; }
        }
</code></pre>
"	7071176.0		7071176.0		2019-05-08 05:17:30	2019-05-08 05:17:30	Using LINQ to query xml to populate a .NET nested DataContract	<.net><linq>	1.0	0			
6432987	2		6432958.0	2011-06-21 22:58:06		1		"<pre>Product foundProduct = productCatList
            .SelectMany(list => list.Products)
            .Where(product => product.ProductID == whateverID)
            .SingleOrDefault()</pre>
"	89721.0					2011-06-21 22:58:06				0			
6582462	2		6582388.0	2011-07-05 12:14:07		0		"<p>Looks like that would be <em>something</em> like:</p>

<pre><code>var query = from doc in context.ScannedDocuments
            join department in context.RelatedDocuments 
              on doc.Id equals department.Id
            where doc.InsertById == 56 || department.DepartmentId == 1
            select new { DocId = doc.Id, DepartmentId = department.Id };
</code></pre>
"	22656.0					2011-07-05 12:14:07				1			
6694753	1	6694782.0		2011-07-14 14:22:37		0	422.0	"<p>I have a problem in making a left/right join with linq.</p>

<p>I have lets say</p>

<pre><code>public class Customer
{
  prop string CustomerId { get; set; }
  prop string LanguageGuid { get; set; }
}

public class ReadOnlyCustomer
{
  prop string CustomerId { get; set; }
  prop string LanguageGuid { get; set; }
}
</code></pre>

<p>I have a lot of customers in the ReadonlyCustomer table.
In my case I dont have all the customers in customer table.
So I cant use the Join, i dont what the inner join.
I need the left or right join.</p>

<pre><code>var test = db.Customer.Join(db.ReadOnlyCustomer, p =&gt; p.CustomerId, o =&gt; o.CustomerId, (c, o) =&gt; new ReadOnlyCustomer() { CustomerId = c.CustomerId, LanguageGuid = o.LanguageGuid ?? c.LanguageGuid });
</code></pre>

<p>At this point, I get a null pointer, because the query cant join on a null ref.</p>

<p>How can I do a left join equal to sql left join, where I get NULL for value that does not exist in the datasource.</p>

<p>This needs to be in lampda not comprehensing syntax like (from o in ....)</p>

<p>// dennis</p>
"	462772.0		326807.0		2011-07-14 14:25:27	2011-07-14 14:31:50	sql Left join with linq lampda expression	<.net><linq>	1.0	1	1.0		
6736551	1	6736574.0		2011-07-18 17:05:13		1	45.0	"<p>How can i get the uniques in the two list</p>

<p>this is my two list</p>

<pre><code>var listUtiPcs = (from utiPc in datacontx.UTILIZACAOPCs
                        join pc in datacontx.COMPUTADORs on utiPc.ComputadorID equals pc.IdComputador
                     where utiPc.Removido==false
                     select pc);

            var listpcs = (from usr in datacontx.COMPUTADORs
                           select usr);
</code></pre>

<p>The first return the computer in use, the second returns the list of the computer.
I want to return the computer that are not in use. 
how can i do it?</p>
"	254232.0					2011-07-18 17:08:02	distinct in the two list	<.net><linq>	1.0	0			
6736574	2		6736551.0	2011-07-18 17:08:02		3		"<p>You have a list of computers, you have a list of computers in use, and you want a list of computers not in use. That's going to be the <code>Except</code> method. </p>

<pre><code>var remaining = listOfAll.Except(subset);
// in your terms 
var unusedComputers = listpcs.Except(listUtiPcs);
</code></pre>
"	414076.0					2011-07-18 17:08:02				1			
6962036	2		6961727.0	2011-08-05 20:09:36		3		"<p>If you wanted to make your own collection that created SQL statements, then what you would do is to have your collection class implement the <code>IQueryable</code> interface. As part of this interface, when the Linq expression is executed, the .NET framework will pass a Linq Expression Tree to your custom implementation of IQueryable.  Your code would then parse this expression tree, and generate the SQL as needed, or do whatever other actions are needed, and return the result.</p>

<p><em>Edit:</em> Adding Links</p>

<ul>
<li><a href=""http://msdn.microsoft.com/en-us/library/bb546158.aspx"" rel=""nofollow noreferrer"">Walkthrough: Creating an IQueryable Linq Provider (MSDN)</a></li>
<li><a href=""https://stackoverflow.com/questions/1578778/using-iqueryable-with-linq"">Using IQueryable with Linq</a></li>
<li><a href=""http://blogs.msdn.com/b/mattwar/archive/2008/11/18/linq-links.aspx"" rel=""nofollow noreferrer"">Building an IQueryable provider series (The Wayward Weblog)</a></li>
</ul>
"	28278.0		-1.0		2017-05-23 11:58:14	2011-08-05 20:25:54				2			
56860457	2		56842076.0	2019-07-02 21:50:59		0		"<p>Using my <a href=""https://stackoverflow.com/questions/49245160/sql-to-linq-with-multiple-join-count-and-left-join/49245786#49245786"">SQL to LINQ Recipe</a>, your SQL query (with some assumptions about unspecified DB to class mappings) would translate to:</p>

<pre><code>var irlq = from r in ReceiptLines
           where r.ItemReceipt.TxnDate &lt; dt
           group r by r.ItemId into rg
           select new {
               ItemId = rg.Key,
               Total = rg.Sum(r =&gt; r.Quantity)
           };
var rlq = from r in ReturnLines
          where r.Return.TxnDate &lt; dt
          group r by r.ItemId into rg
          select new {
              ItemId = rg.Key,
              Total = rg.Sum(r =&gt; r.Quantity)
          };
var ialq = from r in AdjustmentLines
           where r.Adjustment.TxnDate &lt; dt
           group r by r.ItemId into rg
           select new {
               ItemId = rg.Key,
               Total = rg.Sum(r =&gt; r.Quantity)
           };
var itlq = from r in TransferLines
           where r.Transfer.TxnDate &lt; dt
           group r by r.ItemId into rg
           select new {
               ItemId = rg.Key,
               Total = rg.Sum(r =&gt; r.Quantity)
           };

var ans = from i in Items
          join irl in irlq on i.ItemId equals irl.ItemId into irlj
          from irl in irlj.DefaultIfEmpty()
          join rl in rlq on i.ItemId equals rl.ItemId into rlj
          from rl in rlj
          join ial in ialq on i.ItemId equals ial.ItemId into ialj
          from ial in ialj
          join itl in itlq on i.ItemId equals itl.ItemId into itlj
          from itl in itlj
          select new {
              i.ItemId,
              Total = (irl.Total ?? 0) + (rl.Total ?? 0) + (ial.Total ?? 0) + (itl.Total ?? 0)
            i.CacheQuantityOnHand
          };
</code></pre>
"	2557128.0		2557128.0		2019-07-08 19:15:17	2019-07-08 19:15:17				4			
7128659	2		7128588.0	2011-08-20 00:16:45		1		"<p>I understand your concern about readability for the ! operator.  Two common solutions I've used:</p>

<p>A) Put spaces around the ! so that it stands out and is easier to see a la</p>

<pre><code>if ( ! IntCollection.Contains(42) )
    // ... the ! stands out
</code></pre>

<p>B) Write a readability extension method that makes it nicer</p>

<pre><code>public static class Readability
{
    public static bool Missing&lt;T&gt;(this Enumerable&lt;T&gt; source, T value)
    {
        return ! source.Contains(value);
    }
}
</code></pre>
"	832593.0					2011-08-20 00:16:45				0			
7221765	2		7221753.0	2011-08-28 15:10:48		1		"<p>It's not really clear what you want - if you're just looking for a version of the first query which doesn't use query expression syntax, you want:</p>

<pre><code>var query = arrayOne.SelectMany(x =&gt; arrayTwo, (a, b) =&gt; new SomeObject(a, b));
</code></pre>

<p>That's basically what your query expression is being expanded to anyway.</p>

<p>If that's <em>not</em> what you want, please make your question clearer. If you want an array at the end, just call ToArray:</p>

<pre><code>var array = arrayOne.SelectMany(x =&gt; arrayTwo, (a, b) =&gt; new SomeObject(a, b))
                    .ToArray();
</code></pre>
"	22656.0					2011-08-28 15:10:48				2			
7247477	2		7247431.0	2011-08-30 17:44:14		5		"<p>Try</p>

<pre><code>query.OrderBy(x =&gt; x == 1 : 3.5 ? (float)x);
</code></pre>
"	273200.0					2011-08-30 17:44:14				3			
7247483	2		7247431.0	2011-08-30 17:44:30		2		"<p>Try this:</p>

<pre><code>var list = &lt;YourLinqQuery&gt;.ToList();
var sortedList = list.OrderBy(a=&gt; (a==1)? 3.5:a);
</code></pre>
"	527185.0					2011-08-30 17:44:30				2			
7437607	2		7437494.0	2011-09-15 21:24:24		2		"<p>You're trying to call <code>IndexOf</code> without specifying any arguments. You're then trying to use the result as the target of a <code>Contains</code> call, which is somewhat odd... I suspect you really want:</p>

<pre><code>Expression indexOf = Expression.Call(memberAccess, ""IndexOf"", null,
                        Expression.Constant(value.ToString()),
                        Expression.Constant(StringComparison.OrdinalIgnoreCase));

Expression condition = Expression.NotEqual(indexOf, Expression.Constant(-1));

lambda = Expression.Lambda(condition, parameter);
</code></pre>

<p>If you could give us more information about what you're trying to achieve - preferably with a short but complete program - it would be easier to help you.</p>

<p>EDIT: It would make more sense to use <code>Where</code> in a compile-time safe way, like this:</p>

<pre><code>Expression&lt;Func&lt;T, bool&gt;&gt; lambda = null;

...

lambda = Expression.Lambda&lt;Func&lt;T, bool&gt;&gt;(condition, parameter);
return query.Where(lambda);
</code></pre>
"	22656.0		22656.0		2011-09-15 22:23:44	2011-09-15 22:23:44				12			
7548802	2		7548783.0	2011-09-25 21:38:20		11		"<p>Yes,</p>

<pre><code>User user = (from User u in users 
    where u.id == 5
    select u).Single()
</code></pre>

<p>This will throw and exception if more than one element is returned by the query.</p>

<p>If you only want the first element:</p>

<pre><code>User user = (from User u in users 
    where u.id == 5
    select u).First()
</code></pre>

<p>Use SingleOrDefault() and FirstOrDefault() to return null for reference types when no element exists.</p>
"	488004.0					2011-09-25 21:38:20				1			
7548811	2		7548783.0	2011-09-25 21:39:59		0		"<p>or First and FirstOrDefault.</p>

<pre><code>User user = (from User u in users 
     where u.id == 5
     select u).FirstOrDefault();
</code></pre>
"	466879.0					2011-09-25 21:39:59				0			
7591061	1	7591572.0		2011-09-29 00:04:43		1	162.0	"<p>Does anyone know of a tool which converts between the 'types' of linq query expression?  ie:</p>

<p>a) var foo = from c in customers select...</p>

<p>b) var foo = customer .Where(...</p>

<p>I'm more familiar with a), but to use dynamic linq b) is required so it'd be nice to easily convert all my existing queries.</p>

<p>I've had a bit of a look at Linqer and LinqPad but can't see such a function - perhaps its in there somewhere.</p>

<p>Thanks</p>
"	267470.0					2011-09-29 01:45:22	Converting between LINQ expression types	<.net><linq>	1.0	5			
7596222	1	7596316.0		2011-09-29 10:51:19		3	2356.0	"<p>I have a LINQ query which is searching a SQL table of around 250,000 records and only searching on 2 fields. Both fields have been indexed but I find its still running rather slow.</p>

<p>Below is the code, can anyone suggest anything to help speed it up?</p>

<p>thanks</p>

<pre><code>var qryN = (
    from bn in dbs.Uploads
    orderby bn.ID descending
    select new
    {

        ID = bn.ID,
        Serial = bn.serial_no,
        Manufacturer = bn.Mfgr,
        Model = bn.model,
        Code = bn.code,
        Qty = bn.qty,
        Description = bn.description,
        Comments = bn.comments,
        Location = bn.location,
        Price = bn.price,
        Email = ""Register / Login for full details""
    });

if (dlType.Text != "" "" &amp;&amp; dlType.Text != """")
{
    qryN = qryN.Where(bn =&gt; bn.Manufacturer == dlType.SelectedValue);
}

if (txtWord.Text != """")
{
    qryN = qryN.Where(bn =&gt; bn.Description.Contains(txtWord.Text));
    }

gvLoggedOff.DataSource =
    from p in qryN
    select new
    {
        p.ID, 
        p.Serial, 
        p.Manufacturer, 
        p.Model, p.Code, 
        p.Qty, 
        p.Description, 
        p.Comments, 
        p.Location, 
        p.Price, 
        p.Email
    };

gvLoggedOff.DataBind();    var qryN = (
    from bn in dbs.Uploads
    orderby bn.ID descending
    select new
    {

        ID = bn.ID,
        Serial = bn.serial_no,
        Manufacturer = bn.Mfgr,
        Model = bn.model,
        Code = bn.code,
        Qty = bn.qty,
        Description = bn.description,
        Comments = bn.comments,
        Location = bn.location,
        Price = bn.price,
        Email = ""Register / Login for full details""
    });

if (dlType.Text != "" "" &amp;&amp; dlType.Text != """")
{
    qryN = qryN.Where(bn =&gt; bn.Manufacturer == dlType.SelectedValue);
}

if (txtWord.Text != """")
{
    qryN = qryN.Where(bn =&gt; bn.Description.Contains(txtWord.Text));
    }

gvLoggedOff.DataSource =
    from p in qryN
    select new
    {
        p.ID, 
        p.Serial, 
        p.Manufacturer, 
        p.Model, p.Code, 
        p.Qty, 
        p.Description, 
        p.Comments, 
        p.Location, 
        p.Price, 
        p.Email
    };

gvLoggedOff.DataBind();
</code></pre>
"	299138.0		264697.0		2011-09-29 10:59:56	2011-09-29 13:35:51	tips to speed up LINQ query?	<.net><linq>	3.0	3	1.0		
7674997	1			2011-10-06 13:35:00		0	641.0	"<p>I'm currently trying to run the following code :</p>

<pre><code>void Main()
{
    var meta = new LinqMetaData();
    var bbSum = (
        from tmpar012 in meta.TempUtilityBillingTransactionFile
        join bbi in meta.BudgetBilledItem on 
            tmpar012.TransactionNumber equals bbi.Itxsno
        join ms in meta.MeterServices on 
            bbi.MeterId equals ms.MeterId
        join ar201 in meta.ArServiceCodes on 
            ms.ServiceCodeId equals ar201.Id
        where 
            tmpar012.UpdateNumber == 119985 &amp;&amp; 
            tmpar012.TransactionCodeId == 153               
        group i by new TransactionRecordItem {
            TransactionCodeId = ar201.Id,
            YUsage = bbi.BilledUsage,
            YBalance = tmpar012.Amount
        } into grouped
        select new TransactionRecordItem {
            TransactionCodeId = grouped.Key,
            YUsage = grouped.Sum(grouped =&gt; grouped.Key.BilledUsage),
            YBalance = grouped.Sum(ar201 =&gt; grouped.Key.Amount)
        }
    ).Dump();

}

// Define other methods and classes here

public class TransactionRecordItem 
{
    public int TransactionCodeId { get; set;}
    public decimal YUsage {get; set;}
    public decimal YBalance {get; set;}
}


class TransactionRecordItemEqualityComparer : 
    IEqualityComparer&lt;TransactionRecordItem&gt;
{
    public bool Equals(TransactionRecordItem b1, TransactionRecordItem b2)
    {
        if (b1.TransactionCodeId == b2.TransactionCodeId)
        {
            return true;
        }
        else
        {
            return false;
        }
    }

    public int GetHashCode(TransactionRecordItem bx)
    {       
        return bx.TransactionCodeId.GetHashCode();
    }
}
</code></pre>

<p>And I'm getting the following error: </p>

<blockquote>
  <p>Cannot convert lambda expression to type
  'System.Collections.Generic.IEqualityComparer'
  because it is not a delegate type</p>
</blockquote>

<p>On the <code>group</code> line of the LINQ statement.  </p>

<p>What am I missing on this??  Is there some syntax I'm missing for using the <code>IEqualityComparer&lt;T&gt;</code> with the <code>group</code>??</p>

<p><strong>UPDATE</strong>
Ok, I finally figured it out.  I was making it more complicated than it needed to be.  I did the following and it worked great.</p>

<pre><code>void Main()
{
    var meta = new LinqMetaData();
    var bbSum2 = (from tmpar012 in meta.TempUtilityBillingTransactionFile
                join bbi in meta.BudgetBilledItem on tmpar012.TransactionNumber equals bbi.Itxsno
                join ms in meta.MeterServices on bbi.MeterId equals ms.MeterId
                join ar201 in meta.ArServiceCodes on ms.ServiceCodeId equals ar201.Id
                where tmpar012.UpdateNumber ==  119985 &amp;&amp; tmpar012.TransactionCodeId == 153                 
                select new TransactionRecordItem {
                    TransactionCodeId = ar201.Id,
                    YUsage = bbi.BilledUsage,
                    YBalance = tmpar012.Amount
                }).Dump();
    var bbSum3 = (from bbi in bbSum2
                    group bbi by bbi.TransactionCodeId into grouped
                    select new TransactionRecordItem {
                        TransactionCodeId = grouped.Key,
                        YUsage = grouped.Sum(bbi =&gt; bbi.YUsage),
                        YBalance = grouped.Sum(bbi =&gt; bbi.YBalance)
                    }).Dump();

}

// Define other methods and classes here

public class TransactionRecordItem 
{
    public int TransactionCodeId { get; set;}   
    public decimal YUsage {get; set;}
    public decimal YBalance {get; set;}
}
</code></pre>
"	243418.0		243418.0		2011-10-06 17:04:12	2011-10-06 17:04:12	Using an IEqualityComparer<T> with group in LINQ	<.net><linq>	0.0	4			
7677428	1	7677496.0		2011-10-06 16:24:14		2	132.0	"<p>I have the following</p>

<pre><code>Dim query = From city In myCountry.Cities
          From street In city.Streets
          Select New StreetInfo With {.Name = street.Name, .Index = street.Index}
          Distinct
</code></pre>

<p>Now. I remarqued that if I have multiple identical streets (having the same <code>Name</code> <strong>and</strong> <code>Index</code>), the StreetInfo list contains all that duplicates... </p>

<p>How should I specify the really distinct values for the resulting collection of StreetInfo values?</p>

<p>Say, the <code>StreetInfo</code> class is defined like this:</p>

<pre><code>Public Class StreetInfo
  Public Property Name As String
  Public Property Index As Integer
End Class
</code></pre>
"	185593.0					2011-10-06 17:56:37	What means Distinct in LINQ?	<.net><linq>	3.0	0			
7677480	2		7677428.0	2011-10-06 16:27:48		5		"<p><code>Distinct</code> uses the default equality comparer, which means you'll have to override <code>Equals</code> and <code>GetHashCode</code> on <code>StreetInfo</code> for it to work.</p>
"	71141.0					2011-10-06 16:27:48				6			
7697067	2		7696999.0	2011-10-08 13:17:50		3		"<p>Sounds like you need a recursive function. I wrote an extension method to <code>IEnumerable</code> called <code>SelectRecursive</code> on codeproject a while ago:
<a href=""http://www.codeproject.com/Tips/80746/Select-Recursive-Extension-method"" rel=""nofollow"">http://www.codeproject.com/Tips/80746/Select-Recursive-Extension-method</a></p>

<p>Usage: <code>var allChildren = node.ChildNodes.SelectRecursive(n =&gt; n.ChildNodes);</code></p>
"	468973.0		468973.0		2011-10-08 13:31:40	2011-10-08 13:31:40				0			
7792067	1	7792103.0		2011-10-17 09:54:05		6	2825.0	"<p>I have a following line of code:</p>

<pre><code>var availableClients = (Controller.ListClientsForCurrentUser() as DataTable).AsEnumerable();
</code></pre>

<p>and I want to take advantage of LINQ's extension methods (<a href=""http://msdn.microsoft.com/en-us/library/bb907979.aspx"">MSDN</a>) like <strong>Any</strong>. But those methods are not visible. What is going on? I can only see Where, Select and order by methods.</p>
"	113571.0					2016-07-19 22:21:52	LINQ extension methods not available for EnumerableRowCollection<TRow>	<.net><linq>	2.0	1			
8617965	2		8617907.0	2011-12-23 15:53:07		1		"<p>Allowing NULL in the database doesn't automatically make your C# property nullable. </p>

<p><code>string</code> can be null - because that's the way it was designed by the C# team. </p>

<p><code>int</code> and <code>DateTime</code> cannot be null - they always has to have a value. </p>

<p>If that doesn't work, use <code>int?</code> (or <code>Nullable&lt;int&gt;</code>) instead:</p>

<pre><code>[Table(Name = ""RegisterBoo"")]
public class RegistrationBoo
{
   [Column] public string BooNum { get; set; }
   [Column(CanBeNull = true)] public Int32? ServiceStatusId { get; set; }
</code></pre>
"	13302.0					2011-12-23 15:53:07				0			
8659688	2		8659647.0	2011-12-28 18:21:48		11		"<p>You could use an anonymous type when projecting results. C# example:</p>

<pre><code>var items = from x In db.ChildTable
            join y In db.ParentTable on x.ParentId equals y.Id
            select new { Child =x , Parent=y };
</code></pre>

<p>Then assign the parent properties.</p>

<pre><code>foreach(var item in items)
{
    item.Child.Parent = item.Parent;
}

return items.Select(item =&gt; item.Child);
</code></pre>

<p>Also you may want to use some ORM solutions for this instead of rolling your own.</p>
"	205859.0		205859.0		2011-12-28 19:03:27	2011-12-28 19:03:27				6			
8854247	2		8854181.0	2012-01-13 16:55:29		37		"<p>It basically returns a collection with a single element in case the source collection is empty.</p>

<pre><code>var numbers = new int[] {1, 2, 3};
var aNumber = numbers.First();
</code></pre>

<p>returns 1</p>

<p>but </p>

<pre><code>var numbers = new int[];
var aNumber = numbers.DefaultIfEmpty(12).Single();
</code></pre>

<p>returns 12 as the collection is empty</p>
"	446279.0		446279.0		2014-09-15 08:08:00	2014-09-15 08:08:00				4			
8899405	2		214426.0	2012-01-17 18:00:43		5		"<p>Just to add, in LINQ To Entities you have to compare to a variable. Example:</p>

<pre><code>        DateTime lastMonth = DateTime.Today.AddMonths(-1);
        using (var db = new MyEntities())
        {
            var query = from s in db.ViewOrTable
                        orderby s.ColName
                        where (s.StartDate &gt; lastMonth)
                        select s;

            _dsResults = query.ToList();
        }
</code></pre>
"	436341.0					2012-01-17 18:00:43				0			
9223799	2		9223029.0	2012-02-10 06:43:35		0		"<p>maybe something like this.</p>

<pre><code>var res = from b from BI_Bond
          where BI_Bond.Select(i =&gt; i.residentkey).Contains(b.residentkey).OrderByDesc(i.Version)
          select b;
</code></pre>

<p>I haven't compiled this but i believe its close.</p>

<p>cheers on being my first SO answer</p>
"	1141985.0					2012-02-10 06:43:35				1			
9240112	2		9223029.0	2012-02-11 12:12:08		0		"<p>Try this:</p>

<pre><code>Dim mv = From c In BI_Bond Group By c.residentKey Into version=Max(c.version)
Dim u = From a In BI_Bond Join b In mv On a.residentKey Equals b.residentKey And a.version Equals b.version Select a
</code></pre>

<p>This is returning the latest versioned row for each residentKey.</p>
"	256431.0					2012-02-11 12:12:08				2			
9280349	1			2012-02-14 15:28:48		1	197.0	"<p>I am playing around with mapping Linq Queries on my business objects to my Entity Framework database.  Has anybody else gone down this road - or more to the point, is there a better way to go about this.  </p>

<p>What I want to accomplish is to be able to run simple queries against my business layer from my UI layer without having to add additional methods to the manager (BL Layer) or the Repository (DA Layer)</p>

<p>The benefit I have derived is I can describe the projection I want in the UI Layer, and don't need to create a seperate class, or a special method in my manager, or do extra coding in my DA layer to effeciently execute the query (in this case a key + aggregate data)</p>

<pre><code>var promoSource = new Queryable&lt;BL.Promo&gt;(new PromoQueryProvider());//When executed, Maps a BL Promo code query to an EF.PromoCode query
var query = from x in promoSource
  where x.PromoCode != null &amp;&amp; x.OrderDate &gt;= startDate &amp;&amp; x.OrderDate &lt;= endDate
  group x by x.PromoCode
  into result
  select new
  {
    PromoCode = result.Key.Trim(),
    AverageOrderValue = result.Average(x =&gt; x.OrderSubtotal),
    NumberOfOrders = result.Count()
  };
var results = query.ToList(); //Executes the query in the data layer and passes back the projected data
promosDataView.DataSource = results;
promosDataView.DataBind();
</code></pre>

<p>where previously I would need to add a class to represent the view object, a method in the Manager to either construct the summary data from entities, <strong>or</strong> forward the call to the data layer to fetch the data from the database.  </p>

<p>It seems to be working fine, in limited cases, but I also feel like I'm missing the boat in terms proper seperation - Am I going overkill in maintaning seperating layers for simple reporting scenarios in an ecommerce application?  Wouldn't I get the same benefit if i just used an EF Datasource on the aspx page?</p>
"		Jeremy	168868.0		2012-02-14 20:16:24	2013-04-19 16:25:42	Mapping Expressions in Linq	<.net><linq>	1.0	2			
9351016	1			2012-02-19 16:41:08		0	197.0	"<p>I have a collection of objects with these fields:</p>

<pre><code>MessageID int,
Text string,
ParentMessageID int?
</code></pre>

<p>Some example data:</p>

<pre><code>1 | ""Text 1"" | null 
2 | ""Reply to Text 1"" | 1 
3 | ""Reply to Text 1 #2"" | 1
4 | ""Reply to reply to text 1"" | 2
</code></pre>

<p>I want to sort this collection by the parent and child messages, so the IDs would be sorted like this:</p>

<pre><code>1
2
4 (child of 2)
3
</code></pre>

<p>How to do it with LINQ?</p>

<pre><code>    var q = from i in _dbContext.Messages where ... orderby ...
</code></pre>
"	1136594.0		13302.0		2012-02-19 16:51:54	2012-02-19 18:31:32	Sorting objects by hierarchy (ParentID)	<.net><linq>	3.0	5			
9351859	2		9351016.0	2012-02-19 18:24:05		0		"<p>First, make a tree, then recursively descend from roots to leafs. There are many ways to do this, here is one:</p>

<pre><code>class Message {

    public Message(int message_id, string text, int? parent_message_id) {
        Debug.Assert(message_id &lt; int.MaxValue);
        MessageID = message_id;
        ParentMessageID = parent_message_id;
        Text = text;
    }

    public readonly int MessageID;
    public readonly string Text;
    public readonly int? ParentMessageID;

    public static IEnumerable&lt;Message&gt; OrderByHierarchy(IEnumerable&lt;Message&gt; messages) {

        // Key: ParentMessageID (null substituted with int.MaxValue).
        // Value: All messages sharing this parent.
        var dict = messages.GroupBy(m =&gt; m.ParentMessageID ?? int.MaxValue).ToDictionary(grouping =&gt; grouping.Key);

        // For each root, recursively traverse its children.
        return dict[int.MaxValue].SelectMany(root =&gt; RecursiveDescent(dict, root));

    }

    static IEnumerable&lt;Message&gt; RecursiveDescent(Dictionary&lt;int, IGrouping&lt;int, Message&gt;&gt; dict, Message parent) {

        yield return parent;

        IGrouping&lt;int, Message&gt; children;
        if (dict.TryGetValue(parent.MessageID, out children))
            foreach (var child in children)
                foreach (var descendent in RecursiveDescent(dict, child))
                    yield return descendent;

    }

    public override string ToString() {
        return string.Format(""{0} | {1} | {2}"", MessageID, Text, ParentMessageID == null ? ""null"" : Convert.ToString(ParentMessageID));
    }

}

class Program {

    static void Main(string[] args) {

        var messages = new[] {
            new Message(1, ""Text 1"", null),
            new Message(2, ""Reply to Text 1"", 1),
            new Message(3, ""Reply to Text 1 #2"", 1),
            new Message(4, ""Reply to reply to text 1"", 2),
        };

        foreach (var m in Message.OrderByHierarchy(messages))
            Console.WriteLine(m);

    }

}
</code></pre>

<p>This prints:</p>

<pre><code>1 | Text 1 | null
2 | Reply to Text 1 | 1
4 | Reply to reply to text 1 | 2
3 | Reply to Text 1 #2 | 1
</code></pre>
"	533120.0					2012-02-19 18:24:05				0			
9535420	2		9535392.0	2012-03-02 15:01:47		32		"<p>You can use the <a href=""http://msdn.microsoft.com/en-us/library/bb534972.aspx"">Any</a> method</p>

<pre><code>searchItems.Any(si =&gt; si.ID == 99)
</code></pre>
"	469533.0					2012-03-02 15:01:47				0			
9535448	2		9535392.0	2012-03-02 15:02:44		5		"<p>There are probably a few ways to do this, here's another one:</p>

<pre><code>bool any = searchItems.Any(si =&gt; si.ID == 99);
</code></pre>
"	137972.0					2012-03-02 15:02:44				0			
9845849	2		9845827.0	2012-03-23 20:06:33		2		"<p><code>usersQuery</code> is an <code>IEnumerable&lt;IEnumerable&lt;Plate&gt;&gt;</code> you can either rectify this in your <code>platesQuery</code> like this:</p>

<pre><code>var platesQuery = from plates in usersQuery
                  from plate in plates
                  group plate by plate.Time into grouping
                  select grouping;
</code></pre>

<p>Or flatten out the initial results so you have an <code>IEnumerable&lt;Plate&gt;</code> instead:</p>

<pre><code>var usersQuery = from user in Model.Users
                 from plate in user.Plates
                 select plate;
</code></pre>
"	329769.0					2012-03-23 20:06:33				1			
10382343	1	10382481.0		2012-04-30 10:43:51		5	19550.0	"<p>I have big DataTable I want to get subset of this DataTable represented as DataTable either. 
Briefly saying how do I select particular columns in DataTable.</p>

<p>I was trying something like this but it doesn't work...</p>

<pre><code>DataTable dTable = new DataTable();
...
...
...
        DataTable dt = from field in dTable
                       where field.Field&lt;string&gt;(""Manager"")
                       where field.Field&lt;string&gt;(""Phone"")
                       select field;
</code></pre>

<p>Maybe my code is wrong, how do I get ""managers"" and ""Phone"" columns from one DataTable to another without looping thought it?</p>
"	956575.0		956575.0		2012-04-30 10:49:15	2012-07-27 11:44:45	LINQ to DataTable	<.net><linq>	3.0	6			
10609774	2		10609724.0	2012-05-15 22:36:53		0		"<pre><code>ddlMIP.DataSource = dt.AsEnumerable().Select(row =&gt; row.Field&lt;string&gt;(""MIP_NO"").ToString()).Distinct().OrderBy(row =&gt; row.Field(""MIP_NO"").ToString()).ToList();
</code></pre>

<p>It looks like the list operator in the OrderBy() section is causing the problem.</p>
"	1178122.0					2012-05-15 22:36:53				0			
10854495	2		10760250.0	2012-06-01 17:00:07		1		"<pre><code>    dtSuplr = (from suplr in dtSuplr.AsEnumerable()
                   select suplr).Distinct().CopyToDataTable();
</code></pre>
"	817934.0					2012-06-01 17:00:07				0			
11037380	2		11037331.0	2012-06-14 16:27:21		5		"<p>You're applying <em>two</em> filters here. The <code>where</code> clause will only return values which have the given owner - and then the predicate in the <code>FirstOrDefault</code> clause will only consider values which have no owner.</p>

<p>I suggest you use:</p>

<pre><code>var value = list.Where(c =&gt; c.Type == ""X"" &amp;&amp; 
                            (c.Owner == null || c.Owner == owner))
                .OrderByDescending(c =&gt; c.Owner)
                .FirstOrDefault();
</code></pre>

<p>Using <code>OrderByDescending</code> will put any value with a null owner <em>after</em> a value with a non-null owner, so when you take the first result it will get one with an owner if it's present.</p>
"	22656.0					2012-06-14 16:27:21				0			
11200850	2		11186392.0	2012-06-26 04:38:40		0		"<p>The reason why you are getting null is because you are returning new instance of list.</p>

<pre><code>return new List&lt;Request&gt; { };
</code></pre>

<p>Can you replace the above line of code to</p>

<pre><code>return req;
</code></pre>

<p>As shown in the below code.</p>

<pre><code>public static List&lt;Request&gt; CreateRequest(XDocument input)
        {
            IEnumerable&lt;Request&gt; req = from r in input.Descendants(""Request"")
                                       select new Request()
                                       {
                                           //MidaClientID = (int)r.Attribute(""MidaClientID""),
                                           MidaClientID = Convert.ToInt32(r.Element(""MidaClientID"").Value),
                                           Password = (int)r.Attribute(""MidaClientPassword""),
                                           CandNum = (int)r.Attribute(""CandNum""),
                                           CandFirstName = (string)r.Attribute(""CandFirstName""),
                                           CandLastName = (string)r.Attribute(""CandLastName""),
                                           CandPhone1 = (int)r.Attribute(""CandPhone1""),
                                           CandPhone2 = (int)r.Attribute(""CandPhone2""),
                                           CandPhone3 = (int)r.Attribute(""CandPhone3""),
                                           CandAttach1 = (string)r.Attribute(""CandAttach1""),
                                           CandAttach2 = (string)r.Attribute(""CandAttach2""),
                                           CandAttach3 = (string)r.Attribute(""CandAttach3""),
                                           ClientNum = (int)r.Attribute(""ClientNum""),
                                           ClientName = (string)r.Attribute(""ClientName""),
                                           ContactNum = (int)r.Attribute(""ContactNum""),
                                           ContactFirstName = (string)r.Attribute(""ContactFirstName""),
                                           ContactLastName = (string)r.Attribute(""ContactLastName""),
                                           ContactEmail = (string)r.Attribute(""ContactEmail""),
                                           EventNum = (int)r.Attribute(""EventNum""),
                                           EventDate = (DateTime)r.Attribute(""EventDate""),
                                           EventTime = (DateTime)r.Attribute(""EventTime""),
                                           QuestNum = (int)r.Attribute(""QuestNum"")
                                       };
            return req;
</code></pre>

<p>}</p>
"	1411801.0					2012-06-26 04:38:40				4			
373757	1			2008-12-17 05:58:07		1	215.0	"<p>I have Linq entities which contain non-nullable string properties.  I'd like to iterate over the properties, perhaps in the partial <code>OnValidate</code> method, and set those properties to an empty string if they are null.</p>

<p>How can I do this without explicitly writing code for each property by name?</p>
"	40396.0	betitall	2555451.0	Fabian Steeg	2013-10-23 16:15:16	2013-10-23 16:15:16	Linq validation non-nullable properties	<.net><linq>	1.0	0			
467077	1	468142.0		2009-01-21 21:24:05		0	320.0	"<p>I'm struggling a bit here so I thought why not ask:</p>

<p>Every entity in my system has a list of tags (a list of strings), and I want to be able to search for multiple tags at once.</p>

<p>I have a IQueryable to work with. Every Entity has a IList called Tags and my input parameter is a IList.</p>

<p>I simply could go through all tags and do IQueryable.Where(p => p.Tags.Contains(currentTag), but that would not scale very well with many tags as input, and also I have the feeling that this could be done inside LinQ.</p>

<p>Hope anyone has an Idea.</p>

<p>Edit: Clarification of question:
I search for a way to only select Items from my IQueryable that contain ALL supplied parameter tags (of IList). </p>

<p>greetings Daniel / Tigraine</p>
"	21699.0	Tigraine	21699.0	Tigraine	2009-01-21 21:34:31	2009-01-22 05:38:58	Select items by tag when searching multiple tags	<.net><linq>	2.0	0	1.0		
467105	2		467077.0	2009-01-21 21:31:39		0		"<p>Not sure I really understand what you're asking, but maybe something like the following would work.</p>

<pre><code>List&lt;string&gt; searchTags = ...

var query = db.MyEntity
              .Where( e =&gt; e.Tags.Intersect( searchTags ).Count() &gt; 0 );
</code></pre>

<p>This should give you the set of entities where the list of tags contains at least one of the items in <code>searchTags</code></p>
"	12950.0	tvanfosson				2009-01-21 21:31:39				1			
483154	2		373757.0	2009-01-27 12:04:13		1		"<p>It is not what you requested, but an alternative could be to use the OnCreated event and to set the properties to string.empty at the time this event is fired already.</p>

<p>That would obviously apply to all uses of the entity, and I am not sure whether such an approach would be sufficient in your case.</p>
"		Derick				2009-01-27 12:04:13				1			
535731	2		535531.0	2009-02-11 07:05:17		2		"<p>This answer is effectively the same as spoon16's but without using a query expression. I generally don't use a query expression for single operations (e.g. <em>just</em> an ordering, or <em>just</em> a filter, or <em>just</em> a projection). I figured it would be good to see the alternatives :)</p>

<pre><code>var orderedList = nameList.OrderByDescending(x =&gt; x.FullName.Length);
</code></pre>
"	22656.0	Jon Skeet				2009-02-11 07:05:17				0			
545885	1			2009-02-13 13:17:45		7	1049.0	"<p>I recently came across <a href=""http://blogs.msdn.com/lukeh/archive/2007/10/01/taking-linq-to-objects-to-extremes-a-fully-linqified-raytracer.aspx"" rel=""nofollow noreferrer"">this raytracer in LINQ</a>. Just wondering if anyone can top that?</p>

<pre><code>var pixelsQuery =
from y in Enumerable.Range(0, screenHeight)
let recenterY = -(y - (screenHeight / 2.0)) / (2.0 * screenHeight)
select from x in Enumerable.Range(0, screenWidth)
       let recenterX = (x - (screenWidth / 2.0)) / (2.0 * screenWidth)
       let point = Vector.Norm(Vector.Plus(scene.Camera.Forward, 
                                           Vector.Plus(Vector.Times(recenterX, scene.Camera.Right),
                                                       Vector.Times(recenterY, scene.Camera.Up))))
       let ray = new Ray { Start = scene.Camera.Pos, Dir = point }
       let computeTraceRay = (Func&lt;Func&lt;TraceRayArgs, Color&gt;, Func&lt;TraceRayArgs, Color&gt;&gt;)
        (f =&gt; traceRayArgs =&gt;
         (from isect in
              from thing in traceRayArgs.Scene.Things
              select thing.Intersect(traceRayArgs.Ray)
          where isect != null
          orderby isect.Dist
          let d = isect.Ray.Dir
          let pos = Vector.Plus(Vector.Times(isect.Dist, isect.Ray.Dir), isect.Ray.Start)
          let normal = isect.Thing.Normal(pos)
          let reflectDir = Vector.Minus(d, Vector.Times(2 * Vector.Dot(normal, d), normal))
          let naturalColors = 
              from light in traceRayArgs.Scene.Lights
              let ldis = Vector.Minus(light.Pos, pos)
              let livec = Vector.Norm(ldis)
              let testRay = new Ray { Start = pos, Dir = livec }
              let testIsects = from inter in
                                   from thing in traceRayArgs.Scene.Things
                                   select thing.Intersect(testRay)
                               where inter != null
                               orderby inter.Dist
                               select inter
              let testIsect = testIsects.FirstOrDefault()
              let neatIsect = testIsect == null ? 0 : testIsect.Dist
              let isInShadow = !((neatIsect &gt; Vector.Mag(ldis)) || (neatIsect == 0))
              where !isInShadow
              let illum = Vector.Dot(livec, normal)
              let lcolor = illum &gt; 0 ? Color.Times(illum, light.Color) : Color.Make(0, 0, 0)
              let specular = Vector.Dot(livec, Vector.Norm(reflectDir))
              let scolor = specular &gt; 0 
                           ? Color.Times(Math.Pow(specular, isect.Thing.Surface.Roughness), light.Color) 
                           : Color.Make(0, 0, 0)
              select Color.Plus(Color.Times(isect.Thing.Surface.Diffuse(pos), lcolor),
                                Color.Times(isect.Thing.Surface.Specular(pos), scolor))
          let reflectPos = Vector.Plus(pos, Vector.Times(.001, reflectDir))
          let reflectColor = 
              traceRayArgs.Depth &gt;= MaxDepth
              ? Color.Make(.5, .5, .5)
              : Color.Times(isect.Thing.Surface.Reflect(reflectPos), 
                            f(new TraceRayArgs(new Ray { Start = reflectPos, Dir = reflectDir }, 
                                               traceRayArgs.Scene, 
                                               traceRayArgs.Depth + 1)))
          select naturalColors.Aggregate(reflectColor, (color, natColor) =&gt; Color.Plus(color, natColor)))
                              .DefaultIfEmpty(Color.Background).First())
       let traceRay = Y(computeTraceRay)
       select new { X = x, Y = y, Color = traceRay(new TraceRayArgs(ray, scene, 0)) };

foreach (var row in pixelsQuery)
    foreach (var pixel in row)
        setPixel(pixel.X, pixel.Y, pixel.Color.ToDrawingColor());
</code></pre>
"	64565.0	Ries	172363.0	PhiLho	2012-05-04 03:33:43	2012-05-04 03:33:43	What is the most impressive LINQ statement that you have come across?	<.net><linq>	3.0	0			
585084	2		585080.0	2009-02-25 07:55:56		7		"<p>Do you mean you want to <em>query</em> only the name? In which case:</p>

<pre><code>var names = ctx.Students.Select(s=&gt;s.Name);
</code></pre>

<p>or in query syntax:</p>

<pre><code>var names = from s in ctx.Students
            select s.Name;
</code></pre>

<p>To <em>insert</em> you'd need to create a number of <code>Student</code> objects - set the names but not the other properties, and add them to the context (and submit it). LINQ is a <em>query</em> tool (hence the Q); insertions are currently object oriented.</p>
"	23354.0	Marc Gravell	23354.0	Marc Gravell	2009-02-25 08:07:42	2009-02-25 08:07:42				1			
592096	2		589570.0	2009-02-26 19:44:37		0		"<pre><code>IEnumerable&lt;CD&gt; goodCDs = CDs
  .Where(cd =&gt; cd.Songs.All(song =&gt; song.Rating &gt; 6))
</code></pre>
"	8155.0	David B				2009-02-26 19:44:37				0			
648784	2		648782.0	2009-03-15 23:15:03		11		"<p>Actual code should be </p>

<p>1)</p>

<pre><code>var orders = from o in Orders
             where o.OrderItems.Any(i =&gt; i.PartId == 100)
             select o;
</code></pre>

<p>The Any() method returns a bool and is like the SQL ""in"" clause. This would get all the order where there are Any OrderItems what have a PartId of 100.</p>

<p>2a)</p>

<pre><code>// This will create a new type with the 2 details required 
var orderItemDetail = from o in Orders
                      from i in Orders.OrderItems
                      where i.PartId == 100
                      select new()
                      {
                          o.OrderNumber,
                          i.PartName
                      }
</code></pre>

<p>The two from clauses are like an inner join.</p>

<p>2b)</p>

<pre><code>// This  will populate the OrderItemSummary type
var orderItemDetail = from o in Orders
                      from i in Orders.OrderItems
                      where i.PartId == 100
                      select new OrderItemSummary()
                      {
                          OriginalOrderNumber = o.OrderNumber,
                          PartName = i.PartName
                      }
</code></pre>

<p>3)</p>

<pre><code>// This will create a new type with two properties, one being the
// whole OrderItem object.
var orderItemDetail = from o in Orders
                      from i in Orders.OrderItems
                      where i.PartId == 100
                      select new()
                      {
                          OrderNumber = o.OrderNumber,
                          Item = i
                       }
</code></pre>

<p>Since ""i"" is an object of Type OrderItem, Item is create as an OrderItem.</p>
"	10784.0	Robert Wagner				2009-03-15 23:15:03				1			
676500	1	676504.0		2009-03-24 08:10:25		166	104798.0	"<blockquote>
  <p><strong>Possible Duplicate:</strong><br>
  <a href=""https://stackoverflow.com/questions/73542/ilistt-to-iqueryablet"">IList&lt;T&gt; to IQueryable&lt;T&gt;</a>  </p>
</blockquote>



<p>I have a List data, but I want a IQueryable data , is it possible from  List data to IQueryable data?
Show me code</p>
"		Spencer	-1.0	Brian Rasmussen	2017-05-23 12:02:44	2014-01-03 12:12:32	How change List<T> data to IQueryable<T> data	<.net><linq>	1.0	0	11.0	2010-05-18 18:46:16	
777496	2		777400.0	2009-04-22 14:32:06		2		"<p>I totally agree with Adam Robinson, in fact the BIG mistake is that people stops on the beauty syntax not going deeper in the tech-facts, in terms of impacts or architectural views.</p>

<p>Sometimes people think about it as one thing when it's really another thing.. about that it's important to note Linq is a ""Technology"" and could be implemented in many ways, each of them could impact in different way about performance and design (for example), the basic syntax remain the same but the underlying things could changes.</p>

<p>Actually, starting from the great and growing implementations, there's not a complete list of best practices, the best practices could begin from:</p>

<ol>
<li>understanding before what kind of implementation will be used (Linq2Sql, Linq2Objects, Linq2CSV, Linq2Excel, Linq2LDAP, Linq2JSON, Linq2Xml, Linq2Xsd and more)</li>
<li>then trying to understand what the basic technology features are intended in the choosed implementation</li>
</ol>
"	79259.0					2009-04-22 14:32:06				0			
876064	2		876054.0	2009-05-18 02:49:33		1		"<p>We've used the dynamic linq library before to do this.  <a href=""http://weblogs.asp.net/scottgu/archive/2008/01/07/dynamic-linq-part-1-using-the-linq-dynamic-query-library.aspx"" rel=""nofollow noreferrer"">Here's a link</a> to Scott Guthrie's blog where he describes it.</p>

<p>Basically you could alter the above query to look like this:</p>

<pre><code>var q = db.Products
        .OrderBy(""ProductName Descending"")
</code></pre>
"	94351.0		94351.0		2009-05-18 02:55:19	2009-05-18 02:55:19				1			
919483	1	919506.0		2009-05-28 06:38:11		2	1773.0	"<p>Hi I have noted that if I use TimespanObj.ToString() the it gives me perfect output  like 12:33:00.</p>

<p>But I use following linq query.</p>

<pre><code>var time = SomeSimpleQuery.Select(t =&gt; new { time = t.FromTime.ToString() });
</code></pre>

<p>where FromTime is time(7) in SQL Database and Timespan in LINQ-TO-SQL Class (by Default).</p>

<p>Then I get the output having format like ""jan 1 1900 12:00PM"". Why?</p>
"	415865.0					2009-05-28 07:45:56	Timespan to string problem in LINQ query	<.net><linq>	2.0	0	1.0		
968595	2		968573.0	2009-06-09 07:07:06		12		"<p>Do you want to <em>read</em> (query) the data in a specific order, or do you actually want to re-order the data in the xml? To read in a specific order, just use the LINQ <code>OrderBy</code> method:</p>

<pre><code>    var qry = from book in el.Elements(""book"")
              orderby (int)book.Element(""year"")
              select new
              {
                  Year = (int)book.Element(""year""),
                  Title = (string)book.Element(""title""),
                  Author = (string)book.Element(""author"")
              };
</code></pre>

<p>(edited) Changing the xml is trickier... maybe something like:</p>

<pre><code>    var qry = (from book in el.Elements(""book"")
               orderby (int)book.Element(""year"")
               select book).ToArray();

    foreach (var book in qry) book.Remove();
    foreach (var book in qry) el.Add(book);
</code></pre>
"	23354.0		23354.0		2009-06-09 07:14:33	2009-06-09 07:14:33				1			
1404055	2		1404039.0	2009-09-10 08:26:29		2		"<p><code>Any&lt;&gt;</code> checks whether any items satisfy the criterion, i.e. returns <code>bool</code>, meaning that it only has to find the first item, which can be very fast. Whereas <code>Where&lt;&gt;</code> enumerates all the items that satisfy the condition, meaning that it has to iterate the whole collection. </p>
"	12790.0					2009-09-10 08:26:29				0			
1415777	1	1415805.0		2009-09-12 18:24:41		29	13931.0	"<p>Can you use LINQ in an object that exposes only Add(), Remove(), Count(), Item() and GetEnumerator() from System.Collections.IEnumerator?</p>
"	167454.0		41956.0		2013-01-09 19:20:05	2013-09-30 14:30:42	Using LINQ for an object that only has GetEnumerator()	<.net><linq>	3.0	0	4.0		
1620606	1	1620706.0		2009-10-25 10:48:46		5	232.0	"<p>Why doesn't link simply use the == operator in joins if t can use it in a 'where' clause?</p>
"	8741.0					2009-10-25 11:55:08	Why the 'equals' operator in LINQ joins?	<.net><linq>	2.0	0	1.0		
2094386	2		2094359.0	2010-01-19 15:04:22		13		"<p>I would personally start with LINQ to Objects. You don't need any buy-in then - you can use LINQ in your code, let him use foreach loops, conditions etc in his code... and eventually he may notice that your code is more declarative, clearer and shorter.</p>

<p>The decision to use an ORM vs plain ADO.NET is a bigger one, IMO - and one with ramifications well beyond just LINQ syntax.</p>
"	22656.0					2010-01-19 15:04:22				1			2010-01-19 15:04:22
2107750	2		2107604.0	2010-01-21 08:11:15		4		"<p>Many of the ideas behind LINQ are <a href=""http://blogs.msdn.com/charlie/archive/2007/01/26/anders-hejlsberg-on-linq-and-functional-programming.aspx"" rel=""nofollow noreferrer"">borrowed from functional programming languages</a>, although Microsoft is the first that I'm aware of that has packaged up these ideas into an in-language query language that resembles SQL, and in fact can be translated to SQL at runtime.</p>

<p>The underlying concepts, though, are nearly as old as computers, in many cases.</p>
"	24380.0					2010-01-21 08:11:15				0			
2141376	2		2141360.0	2010-01-26 17:44:49		2		"<p>I would prefer the second. It does only one conversion, instead of many.</p>

<p>But unless this is a performance-critical piece of code (unlikely; it seems like GUI code), you won't notice a difference.</p>
"	14637.0					2010-01-26 17:44:49				1			
2145813	2		2145773.0	2010-01-27 09:48:58		3		"<p>It would be tricky or expensive to calculate the exact age for each record. Assuming you're really wanting to say something like ""find me everyone 18 or over"" it would be a better idea to work out the date of birth of someone who is <em>exactly</em> 18 today, and find everyone with a date of birth less than or each to that:</p>

<pre><code>DateTime latestAdultBirth = DateTime.Today.AddYears(-18);
var adults = people.Where(person =&gt; person.dateOfBirth &lt; latestAdultBirth);
</code></pre>
"	22656.0					2010-01-27 09:48:58				0			
2436933	2		2436924.0	2010-03-13 01:42:36		3		"<p><a href=""http://www.linqpad.net/"" rel=""nofollow noreferrer"">LINQPad</a> to practice your queries.</p>
"	65691.0					2010-03-13 01:42:36				0			
2548432	2		2548402.0	2010-03-30 20:23:37		2		"<p>The other two overloads provide an initial, seed, value.  With a seed value, the aggregation has something to return even when the source is empty.</p>
"	118703.0					2010-03-30 20:23:37				4			
2548439	2		2548402.0	2010-03-30 20:24:20		1		"<p>The one overload that throws the exception takes arguments of type <code>IEnumerable&lt;TSource&gt;</code> (<code>this</code>) and <code>Func&lt;TSource, TSource, TSource&gt;</code>. It starts with the first value and accumulates from there. Without a first value (if <code>source</code> is empty), there's no way for the function to know what to return.</p>

<p>The other two overloads accept an argument of type <code>TAccumulate</code> to act as the seed. Even if <code>source</code> is empty in this case, the function can simply return the seed value.</p>

<hr>

<p><strong>Update</strong>: You ask why the decision was made <em>not</em> to simply use <code>default(T)</code> in the case of an empty sequence. The answer doesn't boil down to any specific pattern or known idiom, but rather simply to what is (in my opinion) the sensible choice in terms of API design. The point of <code>Aggregate</code> is to make it easy for developers to implement calculations for their own domain-specific problems, <em>without making assumptions about the semantics of those calculations</em>.</p>

<p>To use <code>default(T)</code> in the case of an empty sequence would be making not one but <strong>two</strong> pretty <em>big</em> assumptions:</p>

<ul>
<li>that this calculation should produce a meaningful result in the case of an empty sequence; and</li>
<li>that this result should be <code>default(T)</code></li>
</ul>

<p>As a trivial counter-example to the <em>first</em> assumption, let's say I use <code>Aggregate</code> to compute the <a href=""http://en.wikipedia.org/wiki/Mode_%28statistics%29"" rel=""nofollow noreferrer"">mode</a> of a sequence of integers. This should give me the value occurring most frequently in the sequence, so a result of zero would simply be false (since the value <code>0</code> <em>never</em> occurs in an empty sequence).</p>

<p>As a counter-example to the <em>second</em>, suppose I take the product of reciprocals of a sequence of positive integers:</p>

<pre><code>Aggregate [1, 2, 3, ...] -&gt; 1 * 1/2 * 1/3 * ...
</code></pre>

<p>In this case the result would actually approach zero as the sequence gets <em>larger</em>, so a default value of zero would, again, be completely misleading.</p>
"	105570.0		105570.0		2011-07-15 20:54:58	2011-07-15 20:54:58				2			
2724096	1	2724246.0		2010-04-27 18:55:05		201	85421.0	"<p><strong>LINQ:</strong></p>

<p>Is it more efficient to use the <code>Single()</code> operator over <code>First()</code> when ever I know for certain that the query will return <strong>a single record</strong>?</p>

<p>Is there a difference?</p>
"	172861.0		196919.0		2013-04-05 17:24:49	2019-03-19 15:22:23	LINQ Single vs First	<.net><linq>	11.0	0	43.0		
2724146	2		2724096.0	2010-04-27 18:59:55		16		"<p>If you don't specifically want an exception thrown in the event that there is more than one item, <strong>use <code>First()</code></strong>.</p>

<p>Both are efficient, take the first item.  <code>First()</code> is slightly more efficient because it doesn't bother checking to see if there is a second item.</p>

<p>The only difference is that <code>Single()</code> expects there to be only one item in the enumeration to begin with, and will throw an exception if there are more than one.  You <em>use</em> <code>.Single()</code> <em>if you specifically want an exception thrown</em> in this case.</p>
"	97890.0		26931.0		2016-11-04 19:46:23	2016-11-04 19:46:23				1			
2724148	2		2724096.0	2010-04-27 19:00:12		5		"<p>They are different.  Both of them assert that the result set is not empty, but single also asserts that there is not more than 1 result.  I personally use Single in cases where I only expect there to be 1 result just because getting more than 1 result back is an error and probably should be treated as such.</p>
"	218716.0					2010-04-27 19:00:12				0			
2724155	2		2724096.0	2010-04-27 19:00:51		18		"<p>There is a subtle, semantic difference between these two methods.</p>

<p>Use <code>Single</code> to retrieve the first (and only) element from a sequence that should contain one element and no more.  If the sequence has more than on element your invocation of <code>Single</code> will cause an exception to be thrown since you indicated that there should only be one element.</p>

<p>Use <code>First</code> to retrieve the first element from a sequence that can contain any number of elements.  If the sequence has more than on element your invocation of <code>First</code> will not cause an exception to be thrown since you indicated that you only need the first element in the sequence and do not care if more exist.</p>

<p>If the sequence contains no elements both method calls will cause exceptions to be thrown since both methods expect at least one element to be present.</p>
"	34211.0					2010-04-27 19:00:51				0			
2922574	2		2922371.0	2010-05-27 15:42:01		1		"<p>Something like this:</p>

<pre><code>        var nested = categories.GroupBy(c =&gt; c.ParentId)
                               .Select(cat =&gt; new Category
                               {
                                   ParentId =  cat.Key,
                                   Categories = cat.Select(x =&gt; new Category
                                                                    {
                                                                        Id = x.Id
                                                                    }).ToList()
                               });
</code></pre>

<p>I did something similar and works but with two levels, if you need something more generic and with multiple levels I'm not sure if you can do it with LINQ at least.</p>

<p>HTH</p>
"	32424.0					2010-05-27 15:42:01				0			
3314864	2		3314854.0	2010-07-23 01:58:54		6		"<p>Dictionaries are not sorted, so the Key doesn't have any index really. See my question here: <a href=""https://stackoverflow.com/questions/4227/"">Accessing a Dictionary.Keys Key through a numeric index</a></p>

<p>Use an <a href=""http://msdn.microsoft.com/en-us/library/system.collections.specialized.ordereddictionary.aspx"" rel=""nofollow noreferrer"">OrderedDictionary</a> which has an <a href=""http://msdn.microsoft.com/en-us/library/ms132598.aspx"" rel=""nofollow noreferrer"">indexer that takes an Int</a>.</p>

<p><strong>Edit:</strong> 'm not really sure I understand what you want. If you want to iterate through a Dictionary, just use</p>

<pre><code>foreach(KeyValuePair kvp in yourDict)
</code></pre>

<p>If the key is an Int and you want the next, use</p>

<pre><code>var newkey = oldkey+1;
if(yourdict.ContainsKey(newkey)){
    var newvalue = yourdict[newkey];
}
</code></pre>

<p>If the ints are not sequential, you can use</p>

<pre><code>var upperBound = d.Max(kvp =&gt; kvp.Key)+1; // to prevent infinite loops
while(!yourdict.ContainsKey(newkey) &amp;&amp; newkey &lt; upperBound) {
    newkey++;
}
</code></pre>

<p>or, alternatively:</p>

<pre><code>var keys = (from key in yourdict.Keys orderby key select key).ToList();
// keys is now a list of all keys in ascending order
</code></pre>
"	91.0		-1.0		2017-05-23 12:24:45	2010-07-23 02:09:39				6			
3314889	2		3314854.0	2010-07-23 02:03:53		2		"<p>As Michael Stum noted, <code>Dictionary&lt;TKey, TValue&gt;</code> is not sorted (it's a hashtable) so there is no such thing as the ""index"" of a key. Instead, you can use <a href=""http://msdn.microsoft.com/en-us/library/system.collections.sortedlist.aspx"" rel=""nofollow noreferrer"">SortedList</a> which <em>is</em> (as the name implies) sorted and does provide an <a href=""http://msdn.microsoft.com/en-us/library/system.collections.sortedlist.indexofkey.aspx"" rel=""nofollow noreferrer"">IndexOfKey</a> method.</p>

<p>Be aware that the performance characteristics of <code>Dictionary&lt;TKey, TValue&gt;</code> is different to <code>SortedList&lt;TKey, TValue&gt;</code> though. While Dictionary is O(1) for inserts and deletes, SortedList is O(logn). </p>
"	241462.0					2010-07-23 02:03:53				0			
3343117	2		3343089.0	2010-07-27 11:30:39		0		"<p>Linq is a set of extension methods on to of IEnumerable.  It's meant to let you abstract away some of the details of getting objects out of collections.  When you 'query' your collection via Linq, you do it in a way that's <em>declarative</em> instead of <em>imperative</em>.  What that means is that your Linq query shows what you want to get, instead of precisely how you're going to get it.  In a foreach() loop, you're going to have to be really explicit about how you're going to filter, group, and sort your results.  With Linq, it's just a few short statements and the implementation details are abstracted away from you.</p>

<p>A lot of people have the misconception that it has to do with SQL because of Linq-to-Sql, but really that's just one small part of Linq.  You don't have to use L2S to get full the power of Linq, and in fact many people don't.  Though Linq-to-SQL in my personal opinion is the cat's meow if you're a .NET shop with just SQL Server as your DB.</p>
"	83144.0		83144.0		2010-07-27 11:36:05	2010-07-27 11:36:05				0			
3343120	2		3343089.0	2010-07-27 11:30:55		2		"<p>It is several different things.</p>

<p>Linq, as it appears in the <a href=""http://msdn.microsoft.com/en-us/library/system.linq.aspx"" rel=""nofollow noreferrer"">System.Linq</a> namespace is a set of extension methods that allow you to query collections directly in code. It is an acronym for ""Language INtegrated Query"".</p>

<p>It is also a set of providers that allow you to query different data sources - SQL with Linq to SQL, XML with Linq to XML and more.</p>
"	1583.0					2010-07-27 11:30:55				0			
3759726	1	3759745.0		2010-09-21 11:14:17		2	982.0	"<p>I have the following method:</p>

<pre><code>/// &lt;summary&gt;
/// Gets the specified side of trades.
/// &lt;/summary&gt;
/// &lt;param name=""tradesDictionary""&gt;The trades dictionary.&lt;/param&gt;
/// &lt;param name=""side""&gt;The side.&lt;/param&gt;
public IEnumerable&lt;TradeRecord&gt; GetTrades(Dictionary&lt;Guid, TradeRecord&gt; tradesDictionary, Side side)
{
    return (from tradeRecord in tradesDictionary.Values.ToList().AsParallel()
            where (tradeRecord.OrderRecord.PairRecord.Id == _pairId)
               &amp;&amp; (tradeRecord.Side == side.ToString())
            orderby tradeRecord.Date, tradeRecord.DateCreated, tradeRecord.Id
            select tradeRecord);
}
</code></pre>

<p>Which causes the following exception:</p>

<blockquote>
  <p>Destination array is not long enough
  to copy all the items in the
  collection. Check array index and
  length.</p>
</blockquote>

<p>The dictionary passed in, is constantly increasing in size. I wasn't getting the error before, the only thing that has changed is the volume of data in the tradesDictionary.</p>

<ol>
<li>Why does this exception happen?</li>
<li>How do i prevent it from happening?</li>
</ol>
"	441137.0					2010-09-21 11:17:17	.NET LINQ: Check array index and length EXCEPTION	<.net><linq>	1.0	0	0.0		
3762267	2		3762202.0	2010-09-21 16:12:56		8		"<p>Well, I'd do something like this:</p>

<pre><code>public sealed class Range
{
    public int Low { get; private set; }
    public int High { get; private set; }

    public Range(int low, int high)
    {
        this.Low = low;
        this.High = high;
    }
}
</code></pre>

<p>Then (completely untested, may not even compile, but hopefully you'll get the drift):</p>

<pre><code>public static IEnumerable&lt;Range&gt; FindRanges(IEnumerable&lt;int&gt; values)
{
    using (IEnumerator&lt;int&gt; iterator = values.GetEnumerator())
    {
        if (!iterator.MoveNext())
        {
            yield break;
        }
        int low = iterator.Current;
        int high = low;
        while (iterator.MoveNext())
        {
            int next = iterator.Current;
            if (next &gt; high + 1)
            {
                // Previous range (or possibly single value) has finished
                yield return new Range(low, high);
                low = next;
            }
            high = next;
        }
        // Yield trailing range
        yield return new Range(low, high);
    }
}
</code></pre>

<p>I don't think this is particularly easy to do using straight LINQ, to be honest.</p>

<p>EDIT: To adapt this now that everything starts with H, just use:</p>

<pre><code>var numbers = strings.Select(x =&gt; int.Parse(x.Substring(1));
var ranges = FindRanges(numbers);

var rangeStrings = ranges.Select(r =&gt; r.High == r.Low 
                                   ? ""H"" + r.Low : ""H"" + r.Low + ""-"" + r.High);
var result = string.Join("","", rangeStrings);
</code></pre>
"	22656.0		22656.0		2010-09-21 18:14:29	2010-09-21 18:14:29				3			
4062649	2		4062622.0	2010-10-31 09:56:54		2		"<p>You can find here the documentation for all the collections namespace :</p>

<p><a href=""http://msdn.microsoft.com/en-us/library/system.collections(v=VS.100).aspx"" rel=""nofollow"">http://msdn.microsoft.com/en-us/library/system.collections(v=VS.100).aspx</a></p>
"	492638.0					2010-10-31 09:56:54				2			
4260751	1	4262378.0		2010-11-23 20:47:45		0	166.0	"<p>I'm trying to create a method that can update the sub-table of an entity regardless of whether it's new or existing.  My understanding is that for new entities, I add children like this:</p>

<pre><code>ChildEntityENT child = new ChildEntityENT();
Entity.ChildEntityENT = child;
</code></pre>

<p>And from then on I can access it like this:</p>

<pre><code>Entity.ChildEntityENT.Value1 = MyValue;
Entity.ChildEntityENT.Value2 = MyValue;
</code></pre>

<p>But I have a base class that I want to work with various Entity and ChildEntityENT types.  My initial thought was to do something along these lines, but I can't seem to make it work.  Basically I was going to let the developer use a lambda expression to point from the base Entity to the ChildEntityENT, and then my method would check the ChildEntityEnt and instantiate a new, blank copy if one didn't already exist.  If it does exist, it doesn't need to do anything.</p>

<pre><code>public void CreateIfNull(Expression&lt;Func&lt;Entity, object&gt;&gt; Child)
{
    if (Entity.Child == null)
    {
        ChildENT = new ChildENT();
        Entity.ChildENT = ChildENT;
    }
}
</code></pre>

<p>If I am totally missing the ball on this one, please let me know.  I am all about finding easier ways to do things.  I wish LINQ didn't require me to manually create a new ChildEntityENT before trying to assign values to it. </p>

<p>EDIT: I'm actually trying to do the exact same thing as this guy: <a href=""https://stackoverflow.com/questions/2073915"">Adding a child entity to parent entityset</a></p>
"	482286.0		-1.0		2017-05-23 12:19:05	2010-11-24 00:36:36	LINQ: Create a subtable on an entity if not already there	<.net><linq>	1.0	0			
4366154	1	4965985.0		2010-12-06 11:59:08		0	118.0	"<p>How would you convert this SQL statement to LINQ, most efficient ?</p>

<pre><code>SELECT categoryName, 
      (SELECT COUNT(*) cnt 
         FROM itemCategories 
        WHERE (categories.categoryId = itemCategories.categoryId) 
          AND (Items.countryPartId = 1)) AS cnt 
  FROM categories, Items
</code></pre>

<p>This is the LINQ query I've got right now:</p>

<pre><code>var q =
    from c in context.categories 
    select new CategoryCount
    {
        CategoryName = c.categoryName, 
        Counter = (
            from i in context.itemCategories 
            where c.categoryId == i.categoryId 
            select i).Count()
    };
</code></pre>
"	76152.0		264697.0		2010-12-06 12:12:18	2011-02-11 05:40:53	This SQL to LINQ	<.net><linq>	2.0	3			
4549339	1	4549362.0		2010-12-28 20:39:47		65	9112.0	"<p>Can I split an <code>IEnumerable&lt;T&gt;</code> into two <code>IEnumerable&lt;T&gt;</code> using LINQ and only a single query/LINQ statement?  </p>

<p>I want to avoid iterating through the <code>IEnumerable&lt;T&gt;</code> twice.  For example, is it possible to combine the last two statements below so allValues is only traversed once?</p>

<pre><code>IEnumerable&lt;MyObj&gt; allValues = ...
List&lt;MyObj&gt; trues = allValues.Where( val =&gt; val.SomeProp ).ToList();
List&lt;MyObj&gt; falses = allValues.Where( val =&gt; !val.SomeProp ).ToList();
</code></pre>
"	356790.0		50776.0		2011-10-04 14:28:03	2017-05-03 20:15:26	Can I split an IEnumerable into two by a boolean criteria without two queries?	<.net><linq>	3.0	0	13.0		
4653678	2		4653669.0	2011-01-11 02:45:11		1		"<p>You need to group your <code>&amp;&amp;</code> expressions with parentheses in order to get the compiler to evaluate them in that order:</p>

<pre><code>var c = from cat in context.Categories
where (ParamCat != null &amp;&amp; cat.ParentId == ParamCat.Id)
||
(ParamCat == null &amp;&amp; cat.ParentId == null)
select cat;
</code></pre>
"	82187.0		82187.0		2011-01-11 02:58:06	2011-01-11 02:58:06				4			
4672495	1	4672660.0		2011-01-12 18:29:30		2	7287.0	"<p>I'm trying to use LINQ to iterate over the rows in a DataTable, and instantiate objects from the column values. The tricksy code is shown below.</p>

<p>The problem is that the code won't even compile. The nefarious error message is ""cannot resolve symbol Select"". </p>

<p>I'm satisfied that DataRowCollection implements IEnumerable (it gets it from System.Data.InternalDataCollectionBase), so you would think there'd be no problem with the following (obviously, I'm wrong on that count).</p>

<p>I have included System.Linq System.Data, and System.Data.SqlClient in my project. It also has all the necessary references. I've been using LINQ throughout the app before (mostly with lists of POCOs and XDocuemnts), and this is the first time I've seen this particular message.</p>

<p>Any advice on how to resolve it?</p>

<pre><code>using (var command = connection.CreateCommand())
{
    command.CommandText = ""dbo.sp_pTicklerContacts_sel_W_ContactRole_by_ComKey"";
    command.CommandTimeout = 120;
    command.CommandType = CommandType.StoredProcedure;
    command.Parameters.Add(""@iComKey"", SqlDbType.Int).Value = companyKey;

    using (var adapter = new SqlDataAdapter(command))
    {
        var dataset = new DataSet();
        adapter.Fill(dataset);
        if (dataset.TableCount() &gt; 0 &amp;&amp; dataset.Tables[0].Rows.Count &gt; 0)
        {
            return (from row in dataset.Tables[0].Rows
                    select new TicklerContact
                               {
                                   CompanyKey = row.ToInt32(""iTicklerContact""),
                                   Contact = row.ToString(""ccontact""),
                                   ContactKey = row.ToInt32(""iconkey""),
                                   TicklerContactKey = row.ToInt32(""iTicklerContactKey""),
                                   Role = row.ToString(""contactrole""),
                                   Exists = row.ToBool(""contactexists"")
                                 }).ToList();

        }
        return null;
    }
}
</code></pre>
"	47580.0					2011-01-12 18:59:47	"""Cannot Resolve Symbol Select"" Trying to use LINQ with DataRowCollection"	<.net><linq>	2.0	1	2.0		
4672660	2		4672495.0	2011-01-12 18:45:39		7		"<p>I don't think you can use Linq over DataSet rows since it doesn't implement <code>IEnumerable&lt;T&gt;</code>. If you add a reference to <code>System.Data.DataSetExtensions</code> to your project you can use an extension method though, that allows you this:</p>

<pre><code> return (from row in dataset.Tables[0].AsEnumerable()
 ...
</code></pre>

<p>Also see this previous answer on SO: <a href=""https://stackoverflow.com/questions/10855/linq-query-on-a-datatable/11593#11593"">LINQ query on a DataTable</a></p>

<p>From the msdn article for <a href=""http://msdn.microsoft.com/en-us/library/system.data.datatableextensions.asenumerable.aspx"" rel=""nofollow noreferrer"">DataTableExtensions.AsEnumerable</a>:</p>

<blockquote>
  <p>Language-Integrated Query (LINQ)
  queries work on data sources that
  implement the IEnumerable interface
  or the IQueryable interface. The
  DataTable class does not implement
  either interface, so you must call the
  AsEnumerable method to use the
  DataTable as a source in the From
  clause of a LINQ query. You can also
  obtain custom, domain-specific
  operators, such as CopyToDataTable, by
  returning an IEnumerable object.</p>
</blockquote>
"	329769.0		-1.0		2017-05-23 12:09:11	2011-01-12 18:59:47				4			
5013579	2		5013472.0	2011-02-16 07:19:17		3		"<p>Like Kobi said.</p>

<p>If you do not want to create a class specifically for this case, you can use a <code>Tuple</code>. Only supported .Net 4 though.</p>
"	162176.0					2011-02-16 07:19:17				0			
5031786	2		5031726.0	2011-02-17 16:39:20		8		"<p>Say you have an array that contains <code>[1, 3, 5, 7, 9, 0, 2, 4, 6, 8]</code>.  Now:</p>

<p><code>var whereTest = array.Where(i =&gt; i &lt;= 5);</code> will return <code>[1, 3, 5, 0, 2, 4]</code>.</p>

<p><code>var whileTest = array.TakeWhile(i =&gt; i &lt;= 5);</code> will return <code>[1, 3, 5]</code>.</p>
"	56778.0					2011-02-17 16:39:20				3			
5031845	2		5031726.0	2011-02-17 16:44:17		8		"<p>MSDN says</p>

<p><a href=""http://msdn.microsoft.com/en-us/library/system.linq.enumerable.takewhile.aspx"" rel=""noreferrer""><code>Enumerable.TakeWhile Method</code></a></p>

<blockquote>
  <p>Returns elements from a sequence as
  long as a specified condition is true,
  and then skips the remaining elements.</p>
</blockquote>

<p><a href=""http://msdn.microsoft.com/en-us/library/bb534803.aspx"" rel=""noreferrer""><code>Enumerable.Where</code></a></p>

<blockquote>
  <p>Filters a sequence of values based on
  a predicate.</p>
</blockquote>

<p>The difference is that <code>Enumerable.TakeWhile</code> <strong>skips the remaining elements from the first non-match whether they match the condition or not</strong></p>
"	17447.0					2011-02-17 16:44:17				0			
5489048	2		5481900.0	2011-03-30 16:14:35		1		"<p>I love Linq and dictionaries:  </p>

<pre><code>public static IEnumerable&lt;string&gt; InjectFields(IDictionary&lt;string, string&gt; address)
{
    string country = address[""Country""];
    return formatStrings[country]
            .Select(s =&gt; address.Aggregate(s, (acc, pair) =&gt; acc.Replace(""{""+pair.Key+""}"", pair.Value)))
            .ToArray();
}

private static Dictionary&lt;string, IEnumerable&lt;string&gt;&gt; formatStrings = 
             new Dictionary&lt;string, IEnumerable&lt;string&gt;&gt;(StringComparer.InvariantCultureIgnoreCase)
                    {
                        { ""Romania"", new[] {
                            ""{StreetName}[ {StreetSuffix}] {HouseNumber}[, {ApartmentLabel} {ApartmentNumber}"",
                            ""{PostalCode} {City}"",
                            ""{Country}"",
                        } },
                        { ""Canada"", new[] {
                            ""{HouseNumber} {StreetName}[ {StreetSuffix}]"",
                            ""[{ApartmentLabel} {ApartmentNumber}]"",
                            ""{City} {StateProvince} {PostalCode}"",
                            ""{Country}""
                        } },
                    };
</code></pre>
"	570357.0					2011-03-30 16:14:35				0			
5501131	2		5500879.0	2011-03-31 14:03:17		1		"<p>To do this efficiently you can use a join - this will be translated to an inner join in SQL:</p>

<pre><code>var query = from available in available_cars
    join client_car in cars_x_client on available.car_id equals client_car.car_id
    where client_car.client_id != my_client_id
    select car;
</code></pre>

<p>There are also mechanisms available for outer joins - e.g. if there's a car which doesn't belong to any client then use something like:</p>

<pre><code>var query = from available in available_cars
    join client_car in cars_x_client on available.car_id equals client_car.car_id into outer_join
    from outer in outer_join.DefaultIfEmpty
    where (outer == null || outer.client_id != my_client_id)
    select car;
</code></pre>

<p>For more on linq including joins I recommend 101 linq examples - <a href=""http://msdn.microsoft.com/en-us/vcsharp/aa336746.aspx"" rel=""nofollow"">http://msdn.microsoft.com/en-us/vcsharp/aa336746.aspx</a></p>
"	373321.0					2011-03-31 14:03:17				1			
5865013	2		5864984.0	2011-05-03 04:28:31		3		"<p>Most of the LINQ methods require an <code>IEnumerable&lt;T&gt;</code>, use the <code>Enumerable.Cast</code> method to convert it.</p>

<p>So <code>x.Cast&lt;SPFolder&gt;().OrderBy(whatever)</code>.</p>
"	691884.0					2011-05-03 04:28:31				1			
5977671	2		5977295.0	2011-05-12 12:03:55		3		"<p>An interleave extension method (replaces <code>Zip</code>/<code>SelectMany</code> in Jon Skeets version). This may be a little faster and it includes the remaining of the longest list if the lists aren't of equal length:</p>

<pre><code>public static IEnumerable&lt;T&gt; Interleave&lt;T&gt;(this IEnumerable&lt;T&gt; first, IEnumerable&lt;T&gt; second)
{
    var e0 = first.GetEnumerator();
    var e1 = second.GetEnumerator();

    bool e0HasValue = false;
    bool e1HasValue = false;

    // Could be made a little faster by not checking both when one is empty
    while ((e0HasValue = e0.MoveNext()) | (e1HasValue = e1.MoveNext()))
    {
        if (e0HasValue)
            yield return e0.Current;

        if (e1HasValue)
            yield return e1.Current;
    }
}
</code></pre>

<p>And if you want distinct items, use:</p>

<pre><code>var result = firstList.Interleave(secondList).Distinct();
</code></pre>

<p>This answer, of cause, doesn't solve the uncertainty about <code>Distinct</code> as described in comments to Jon Skeet´s answer. But it could be combined with Jon Skeet´s order preserving extension method.</p>
"	174574.0		174574.0		2011-05-12 12:35:36	2011-05-12 12:35:36				0			
6535958	2		6535922.0	2011-06-30 14:00:47		4		"<p>I'm not sure that LINQ is particularly useful here... how about:</p>

<pre><code>foreach (var item in list)
{
    item.Active = (item == desiredActiveItem ? 1 : 0);
}
</code></pre>
"	22656.0					2011-06-30 14:00:47				1			
6902312	1	6902351.0		2011-08-01 17:49:27		0	204.0	"<p>I have this entity:</p>

<pre><code>public class Product
{
    public string Name { get; set; }
    public double Price { get; set; }

    public ProductManufacturer Manufacturer { get; set; }
}
</code></pre>

<p>I want my Services to return a list of Products to display in a View. I also need to display information about the related manufacturer (Product.Manufacturer) using lazy loading.</p>

<p>Should my Services return an IQueryable or an IEnumerable? Thank you.</p>
"		user386167	76337.0		2011-08-01 19:24:32	2011-08-01 19:24:32	If my Service Returns an IEnumerable of Entities, can I Lazy Load Related Entities?	<.net><linq>	2.0	3			
7596316	2		7596222.0	2011-09-29 10:58:22		1		"<p>Two things:</p>

<ul>
<li>Since you're adding filters, move the projection (selecting into a new anonymous type) to the last line instead of the first, the <code>DataSource</code> line.</li>
<li>You're ordering very early. Unless the queryable or the query analyzer are smart enough to analyze and optimize this, the database will have to order 250,000 rows before it starts filtering. Move the ordering to as late as you can, probably just before the projection takes place.</li>
</ul>

<p>Here's a short attempt at modifying your sample:</p>

<pre><code>var qryN = dbs.Uploads.AsQueryable();

if (dlType.Text != "" "" &amp;&amp; dlType.Text != """")
    qryN = qryN.Where(bn =&gt; bn.Mfgr == dlType.SelectedValue);

if (txtWord.Text != """")
    qryN = qryN.Where(bn =&gt; bn.description.Contains(txtWord.Text));

gvLoggedOff.DataSource = qryN.OrderByDescending(bn =&gt; bn.ID)
    .Select(bn =&gt; new { 
        bn.ID, Serial = bn.serial_no, Manufacturer = bn.Mfgr,
        Model = bn.model, Code = bn.code, Qty = bn.qty,
        Description = bn.description, Comments = bn.comments,
        Location = bn.location, Price = bn.price,
        Email = ""Register / Login for full details"" });

gvLoggedOff.DataBind();
</code></pre>

<p>Since this was accepted as an answer: <a href=""https://stackoverflow.com/questions/7596222/tips-to-speed-up-linq-query/7596405#7596405"">Steven's answer</a> about text searching is probably also applicable in some situations. Full text searching can drain performance like you wouldn't believe.</p>
"	573976.0		-1.0		2017-05-23 11:47:52	2011-09-29 13:35:51				4			
7596464	2		7596222.0	2011-09-29 11:09:40		1		"<p><code>Description.Contains</code> sounds heavy, you may try to use full text search instead.</p>

<p><a href=""https://stackoverflow.com/questions/224475/is-it-possible-to-use-full-text-search-fts-with-linq"">Here</a> is a post describing how you can use FTS from LINQ.</p>
"	401728.0		-1.0		2017-05-23 12:19:56	2011-09-29 11:09:40				0			
7696999	1	7697067.0		2011-10-08 13:05:50		2	100.0	"<p>I have a nested collection of collection of array that can go to any level I have to query based on a particular id and get the details of that array.</p>
"	398707.0		468973.0		2011-10-08 13:37:22	2011-10-08 13:37:22	Querying a collection of collection using Linq	<.net><linq>	1.0	0			
7855425	2		7437494.0	2011-10-21 21:22:49		3		"<p>Modified the code to:</p>

<pre><code>   Expression  toLower = Expression.Call(memberAccess, ""ToLower"", null, null);                  
   lambda = Expression.Lambda(condition, parameter);
</code></pre>
"	2030479.0					2011-10-21 21:22:49				0			
8089142	1			2011-11-11 02:57:04		1	93.0	"<p>I have a simple function to get a list of conference rooms from DB.
I am using the following function:</p>

<pre><code>    public List&lt;ConferenceRoom&gt; RunRoomQuery&lt;T1&gt;(T1 fieldValue, Func&lt;ConferenceRoom, T1, bool&gt; predicate)
    {
        var confRooms = _dataContext.ConferenceRooms.Where(delegate(ConferenceRoom c)
        {
            return predicate(c, fieldValue);
        });
        return confRooms.ToList();
    }
</code></pre>

<p>It works fine; but as you noticed, I am passing a ""ConferenceRoom"" type.
Instead, I would like to make it more generic and pass T2 like this:</p>

<pre><code>    public List&lt;T2&gt; RunRoomQuery&lt;T1,T2&gt;(T1 fieldValue, Func&lt;T2, T1, bool&gt; predicate)
    {
        var confRooms = _dataContext.ConferenceRooms.Where(delegate(T2 c)
        {
            return predicate(c, fieldValue);
        });
        return confRooms.ToList();
    }
</code></pre>

<p>confRoom.ToList() doesn't compile and ""Where"" is not happy about it either.</p>

<p>QUESTION: WHY? WHAT IS IT THAT I AM MISSING?
Following are errors:</p>

<pre><code>error CS0305: Using the generic method 'ConferenceDB.ConferenceDb.RunRoomQuery&lt;T1,T2&gt;(T1, System.Func&lt;T2,T1,bool&gt;)' requires 2 type arguments
C:\Projects\ConferenceDB\ConferenceDB.cs(82,25): (Related location)
C:\Projects\ConferenceDB\ConferenceDB.cs(69,27): error CS0305: Using the generic method 'ConferenceDB.ConferenceDb.RunRoomQuery&lt;T1,T2&gt;(T1, System.Func&lt;T2,T1,bool&gt;)' requires 2 type arguments
</code></pre>

<p>Why?</p>
"	1040965.0		976554.0		2011-11-11 07:03:48	2011-11-11 07:03:48	LINQ with Generic Parameter	<.net><linq>	2.0	1			
8617907	1			2011-12-23 15:47:21		2	1542.0	"<p>I have a class that maps to a table using LINQ but not ORM. It works with all the strings in the class and displays them in the view. However, if I add any <code>Int32</code>, <code>Int16</code> or <code>DateTime</code> I get the error </p>

<blockquote>
  <p>The null value cannot be assigned to a member with type.</p>
</blockquote>

<p>With the code below:</p>

<pre><code>[Table(Name = ""RegisterBoo"")]
public class RegistrationBoo
{
    [Column] public string BooNum { get; set; }
    //[Column(CanBeNull = true)] public Int32 ServiceStatusId { get; set; }
</code></pre>

<p>If I uncomment the commented out line the code fails in the controller at:</p>

<pre><code>        return View(BooRepository.Registrations.ToList());
</code></pre>

<p>with:</p>

<blockquote>
  <p>The null value cannot be assigned to a member with type Int32</p>
</blockquote>

<p>Most of the columns in the database can be NULL and this is something that I cannot change because I am not DBA. Why does <code>CanBeNull</code> not work? How do I solve this error? I also tried using <code>Nullable&lt;&gt;</code> and using some of the ideas outlined in the forums.</p>
"	1113614.0		13302.0		2011-12-23 15:51:28	2011-12-23 15:54:23	The null value cannot be assigned to a member with type Int32 but strings work	<.net><linq>	3.0	2			
8659647	1	8661171.0		2011-12-28 18:17:30		5	382.0	"<p>Here's a situation I run into frequently: I've got Parent and Child objects, and the Child object has a Parent property.  I want to run a query that gets the child objects and joins each one to the correct parent object:</p>

<pre><code>Dim db = New DataContextEx()

get the children, along with the corresponding parent
Dim Children = From x In db.ChildTable
                Join y In db.ParentTable
                On x.ParentId Equals y.Id
                Execute x.Parent = y       &lt;-- pseudocode
                Select x   
</code></pre>

<p>The pseudocode shows what I want to accomplish: to return the child object x but with the code after the (fake) Execute statement executed.  I can think of a lot of ways to accomplish the end goal, but they all have a lot more lines of code and/or creation of temporary objects or functions that I find inelegant.  (Note this is VB.NET syntax, but it's not a VB syntax question, since AFAIK C# would have the same problem.)</p>

<p>So what would be the cleanest way to do what I'm trying to do?</p>

<p><strong>Edit</strong>: People have asked about what ORM I'm using, but this is really a plain vanilla LINQ question; I'm not trying to convert this into logic to be run on the server, I just want some syntactic sugar to run the code client side after the query has been run on the server.</p>
"	349974.0		426894.0		2011-12-28 18:29:26	2012-04-20 09:12:28	What's the right way to select and combine objects with LINQ?	<.net><linq>	5.0	4			
8854181	1	8854247.0		2012-01-13 16:51:06		36	25392.0	"<p>Can somebody explain how <code>DefaultIfEmpty()</code> can be used in <em>LINQ</em>. I have ready some material but still need something solid to see what the use of it is.</p>
"	996431.0		1628280.0		2014-09-07 18:52:13	2014-09-15 08:08:00	DefaultIfEmpty in LINQ	<.net><linq>	2.0	6	1.0		
8929044	2		8929024.0	2012-01-19 15:51:14		17		"<pre><code>var allButTheFirst = collection.Skip(1);
</code></pre>

<p>More info:</p>

<p><a href=""http://msdn.microsoft.com/en-us/library/bb358985.aspx"">http://msdn.microsoft.com/en-us/library/bb358985.aspx</a></p>
"	12716.0					2012-01-19 15:51:14				2			
9433427	2		9433334.0	2012-02-24 15:35:11		4		"<p>There are definitely some issues with your MyGrouping class. </p>

<p>First, your overriden Equals method has infinite recursion if it is ever called because you never cast the object to your specific type. Second, you don't override the <code>GetHashCode()</code> method (which you should always do if you override <code>Equals()</code>). Third, if you're implementing a custom Equals method for your specific type, you should also add the <code>IEquatable&lt;T&gt;</code> interface to your class.</p>

<p>My class would look something like:</p>

<pre><code>private class MyGrouping : IMyGrouping, IEquatable&lt;IMyGrouping&gt;
{
    public int GroupId { get; set; }

    public override bool Equals(object obj)
    {
        if(obj == null) return false;
        if(GetType() != obj.GetType()) return false;
        return Equals(obj as MyGrouping);
    }

    public override bool GetHashCode()
    {
        return GroupId.GetHashCode();
    }

    public bool Equals(IMyGrouping obj)
    {
        if(obj == null) return false;
        return GroupId == obj.GroupId;
    }
}
</code></pre>
"	84651.0		84651.0		2012-02-24 15:59:33	2012-02-24 15:59:33				7			
9708496	2		9708380.0	2012-03-14 19:05:51		0		"<p>(This is assuming I've understood you correctly...)</p>

<p>Well, one simple option is:</p>

<pre><code>var span = Timespan.FromMinutes(5);    
var grouped = from dataPoint in data
              group dataPoint by GroupTime(dataPoint.SomeDateTime, span)
                  into aggregateData
              select new {
                  Avg = aggregateData.Average(x =&gt; x.Counter),
                  Start = aggregateData.Key
              };


...

private static DateTime GroupTime(DateTime dateTime, TimeSpan span)
{
    long ticks = span.Ticks;
    return new DateTime((dateTime.Ticks / ticks) * ticks);
}
</code></pre>

<p>That's less efficient than it might be, mind you - a more efficient version would be:</p>

<pre><code>var span = Timespan.FromMinutes(5);
long ticks = span.Ticks;
var grouped = from dataPoint in data
              group dataPoint by dataPoint.SomeDateTime.Ticks / ticks
                  into aggregateData
              select new {
                  Avg = aggregateData.Average(x =&gt; x.Counter),
                  Start = new DateTime(aggregateData.Key * ticks)
              };
</code></pre>

<p>You'll get ""interesting"" results if you group by (say) 3 minutes and 22 seconds... basically this code starts the buckets at <code>DateTime.MinValue</code>...</p>
"	22656.0					2012-03-14 19:05:51				0			
9808361	1	9808492.0		2012-03-21 16:03:06		0	74.0	"<p>I'm brand new to LINQ to XML (comfortable with LINQ to sql) and learning my way around with this tutorial
<a href=""http://www.joe-stevens.com/2010/01/08/linq-to-xml-tutorial/"" rel=""nofollow"">http://www.joe-stevens.com/2010/01/08/linq-to-xml-tutorial/</a></p>

<p>When I write this linq query </p>

<pre><code>Dim data As XDocument = XDocument.Load(xmlFileLocation)
Dim outputFileLoc = (From c In data.Descendants(""Program"") Where c.Attribute(""ProgramName"").Equals(""EnviroEpi"") Select c)
</code></pre>

<p>on this XML file:</p>

<pre><code>&lt;?xml version=""1.0"" encoding=""UTF-8"" standalone=""yes""?&gt;
&lt;Programs&gt;
   &lt;Program ProgramName=""EnviroEpi""&gt;
      &lt;Type&gt;csv&lt;/Type&gt;
      &lt;Location&gt;test&lt;/Location&gt;
   &lt;/Program&gt;
   &lt;Program ProgramName=""Epi""&gt;
       &lt;Type&gt;HL7&lt;/Type&gt;
       &lt;Location&gt;test&lt;/Location&gt;
   &lt;/Program&gt;
   &lt;Program ProgramName=""Lead""&gt;
      &lt;Type&gt;csv&lt;/Type&gt;
      &lt;Location&gt;test&lt;/Location&gt;
   &lt;/Program&gt;
&lt;/Programs&gt;
</code></pre>

<p>I get an error:</p>

<blockquote>
  <p>Sequence contains no elements</p>
</blockquote>

<p>Does this mean that LINQ can't see the <code>ProgramName</code> attribute of my program nodes? Or am I missing something else? As far as I can tell, I'm doing everything exactly like in the tutorial.</p>

<p>Thanks again for the help. I'm really just getting a feel for LINQ to XML.</p>

<p><strong>Edit</strong></p>

<pre><code>... where c.attribute(""ProgramName"").Equals(""EnviroEpi"") // returns no elements. 
</code></pre>

<p>This works: </p>

<pre><code> c.attribute(""ProgramName"").value.equals(""EnviroEpi"") //added in .value to get it to work
</code></pre>
"	821742.0		821742.0		2012-03-21 17:47:44	2012-03-21 20:58:11	Why doesn't linq to xml recognize my the attributes in my XML file?	<.net><linq>	2.0	2			
10382524	2		10382343.0	2012-04-30 10:56:20		2		"<p>You could write:</p>

<pre><code>  var query = from row in dTable.AsEnumerable()
      select new
      {
         manager = row.Field&lt;string&gt;(""Manager""),
         phone = row.Field&lt;string&gt;(""Phone"")                         
      };
</code></pre>
"	452274.0					2012-04-30 10:56:20				0			
10760418	2		10760250.0	2012-05-25 19:37:27		1		"<p>The LINQ statement</p>

<pre><code>(from row in dt.AsEnumerable() select row.Field&lt;string&gt;(""VNDR_ID"")).Distinct()
</code></pre>

<p>returns <code>IEnumerable&lt;string&gt;</code> not <code>DataTable</code>, so the cast will fail.</p>

<p>Is there a reason you need the result put into another <code>DataTable</code>?  I'd just use the <code>IEnumerable</code> returned by the query, or turn it into a <code>List&lt;string&gt;</code> with <code>ToList()</code> if you want the query to be evaluated immediately (so that you could change the contents of <code>dt</code>)</p>
"	270366.0					2012-05-25 19:37:27				0			
11006160	1	11006197.0		2012-06-12 23:12:46		0	78.0	"<p>I'm a newbie with LINQ2XML. I'm trying to filter an xml file and get another xml with the results. I want to filter by the value of some attributes.</p>

<p>The xml looks like this (abreviated version, the actual version has more nodes and attributes):</p>

<pre><code>&lt;Root&gt;
    &lt;Group Price=""50""&gt;
       &lt;Item Price=""60""/&gt;
       &lt;Item Price=""50""/&gt;
       &lt;Item Price=""70""/&gt;
    &lt;/Group&gt;
    &lt;Group Price=""55""&gt;
       &lt;Item Price=""62""/&gt;
       &lt;Item Price=""57""/&gt;
       &lt;Item Price=""55""/&gt;
    &lt;/Group&gt;
    &lt;Group Price=""61""&gt;
       &lt;Item Price=""62""/&gt;
       &lt;Item Price=""61""/&gt;
       &lt;Item Price=""65""/&gt;
    &lt;/Group&gt;
    &lt;!--More Group Nodes--&gt; 
&lt;/Root&gt;
</code></pre>

<p>Now let's suppose I want nodes with value whose price is lower than 60. What I want to get is:
I've removed nodes with prices 60, 70 and 62. EDIT: I want to remove Group Node with price 61 (it doesn't fullfill the condition).</p>

<pre><code>&lt;Root&gt;
    &lt;Group Price=""50""&gt;
       &lt;Item Price=""50""/&gt;
    &lt;/Group&gt;
    &lt;Group Price=""55""&gt;
       &lt;Item Price=""57""/&gt;
       &lt;Item Price=""55""/&gt;
    &lt;/Group&gt;
    &lt;!--More Group Nodes--&gt; 
&lt;/Root&gt;
</code></pre>

<p>Or maybe is there any way to remove nodes what don't fullfill the conditions? Thanks for your answers.</p>

<p>PS: I'd like to know if this can be done using XPATH too. I post it in another question:</p>
"	1153485.0		1153485.0		2012-06-13 07:40:03	2012-06-13 13:16:23	Filter xml with LINQ2XML	<.net><linq>	1.0	0			
11042627	2		11042596.0	2012-06-14 23:13:49		15		"<p>If you have a think about this you can probably work it out.</p>

<p><code>FirstOrDefault</code> enumerates the set until it finds a matching item</p>

<p><code>SingleOrDefault</code> enumerates the entire collection to ensure the item occurs exactly once</p>

<p>This means <code>SingleOrDefault</code> cant be faster than <code>FirstOrDefault</code>. But it does depend a little on the query providers implementation</p>

<p>EDIT:</p>

<p>Any can be implemented even faster. Concider a SQL implementation:</p>

<pre><code>Select Top 1 from myTable //(its not quite this but this implementation but it will be similar)
</code></pre>

<p>will execute faster than:</p>

<pre><code>Select Top 1 from myTable where &lt;somecondition&gt;
</code></pre>
"	1070291.0		1070291.0		2012-06-14 23:21:01	2012-06-14 23:21:01				3			
11359828	1	11359993.0		2012-07-06 09:47:08		0	185.0	"<p>I have such DataTable, which I am trying to query.  </p>

<pre><code>ID|Language
sfd2133 English
asd213d English
vgjj31j English
fvjfjf2 German
dac31e3 English
asaq213 French
dent231 French
1dedae3 German
</code></pre>

<p>I manage to get single Language:</p>

<pre><code>        IEnumerable&lt;Tuple&lt;string, string&gt;&gt; ids=
            from asset in selectedItems.AsEnumerable()
            select new Tuple&lt;string, string&gt;(asset[""ID""].ToString(), 
            asset[""Language""].ToString());
</code></pre>

<p>How do I get <code>IEnumerable&lt;List&lt;Tuple&lt;string, string&gt;&gt;</code> where <code>List&lt;Tuple&lt;string,string&gt;&gt;</code> is collections of ID's and Single market, say French only. </p>
"	956575.0					2012-07-06 10:09:22	LINQ to DataTable query	<.net><linq>	3.0	2			
11523886	2		11523837.0	2012-07-17 13:48:00		0		"<p>Check out the LINQ ""Except"" extension:</p>

<p><a href=""http://www.dotnetperls.com/except"" rel=""nofollow"">http://www.dotnetperls.com/except</a></p>

<blockquote>
  <p>Except subtracts elements from a collection. This extension method is found in the System.Linq namespace in the .NET Framework. It essentially subtracts all the elements in one collection from another.</p>
</blockquote>
"	297808.0					2012-07-17 13:48:00				2			
11523896	2		11523837.0	2012-07-17 13:48:14		7		"<p>The simplest way would be to do this:</p>

<pre><code>foreach(var item in bList) aList.Remove(item);
</code></pre>

<p><code>Remove</code> doesn't do anything if the item isn't already in the list.</p>

<p>If by ""use LINQ"" you mean use LINQ to determine if an item in <code>aList</code> is in <code>bList</code>, that's not necessary.</p>

<p>A LINQ solution would be more efficient ONLY if both of these conditions are true:</p>

<ol>
<li><code>aList</code> is very small compared to <code>bList</code></li>
<li>All of the items in <code>aList</code> that are also in <code>bList</code> are at the very beginning of <code>bList</code></li>
</ol>
"	82187.0					2012-07-17 13:48:14				2			
11523936	2		11523837.0	2012-07-17 13:50:10		2		"<p>You can use the <a href=""http://msdn.microsoft.com/en-us/library/bb300779.aspx"" rel=""nofollow""><code>Except</code></a> extension method:</p>

<pre><code>var result = aList.Except(bList);
</code></pre>

<p>Note that you can also pass an <a href=""http://msdn.microsoft.com/en-us/library/ms132151"" rel=""nofollow""><code>IEqualityComparer&lt;T&gt;</code></a> as a second argument if you need to customize the equality checking.</p>
"	940.0					2012-07-17 13:50:10				1			
11777883	1	11778150.0		2012-08-02 12:55:10		0	4920.0	"<p>I'm having trouble adding a ""<em>where x in (select ...)</em>"" statement to my linq query. 
The query represents a Master [MEDIEN] / Detail [EXEMPLARE] scenario.</p>

<p>The missing where statement should represent the following SQL:</p>

<p><strong>WHERE e.EXEMPLARSTATUS IN (SELECT EXEMPLARSTATUS FROM ANYTABLE)</strong></p>

<pre><code>Dim eMedien = ( _
    From p In db.MEDIEN _
    Where p.MEDIENNR = ""1235155""
    Select New With {.HST = p.HST,
        .ANYNAME = ( _
        From e In p.EXEMPLAR _
        **** WHERE QUERY ****
        Select New With {.ZWEIGSTELLE = e.ZWEIGSTELLE, .EXEMPLARSTATUS = e.EXEMPLARSTATUS})
                    })
</code></pre>

<p>Any help is apreciated!</p>
"	524290.0					2012-08-02 13:17:03	Linq vb.net - where X IN (SELECT ...)	<.net><linq>	1.0	0			
12437508	2		12437411.0	2012-09-15 12:47:01		0		"<p>I found a suitable answer.</p>

<p>FindActiveById() now returns Enumerable.Empty().AsQueryable() instead of null.</p>
"	1437135.0					2012-09-15 12:47:01				1			
13229226	2		13229048.0	2012-11-05 09:29:19		1		"<p>Your <code>SelectMany</code> method takes a <code>Maybe&lt;TSource&gt;</code> as a parameter, but you're using it on a <code>List&lt;Maybe&lt;TSource&gt;&gt;</code>, so it actually uses the <code>SelectMany</code> method from <code>Enumerable</code>. It's not clear from your example what you expect the type of <code>y</code> to be, but as it is the code doesn't really make sense.</p>
"	98713.0					2012-11-05 09:29:19				1			
13503822	2		652742.0	2012-11-21 23:38:00		1		"<p>Good question. As Reed points out they all mostly stem from <a href=""http://msdn.microsoft.com/en-us/library/bb738633.aspx"" rel=""nofollow noreferrer""><em>deferred execution</em></a> (but unlike he I find it a drawback. Just thinking why cant deferred executions be carried out by memorizing the state). Here are a couple of examples - all are more or less variants of deferred execution problem.</p>

<p>1) <strong>I'm too lazy to do something on time</strong> </p>

<blockquote>
  <p>Linq is executed only on demand. </p>
</blockquote>

<p>A common mistake newbies (myself in the past included) make is not knowing about deferred execution. For eg, something like </p>

<pre><code> var p = listOfAMillionComplexItems.OrderBy(x =&gt; x.ComplexProperty);
</code></pre>

<p>runs in a jiffy, but the actual sorting is not completed until you enumerate the list, in other words, the execution is not completed until you need the result of the execution. To get it executed, you need something like:</p>

<pre><code>foreach(var item in p)...
//or
p.Count();
//or
p.ToList();
//etc
</code></pre>

<p>See them as SQL queries. If you have </p>

<pre><code>var query = from i in otherValues where i &gt; 5 select i;
</code></pre>

<p>think its akin to writing </p>

<pre><code>string query = ""SELECT i FROM otherValues WHERE i &gt; 5"";
</code></pre>

<p>Does the latter run a call to db? No. You have to</p>

<pre><code>Execute(query);
</code></pre>

<p>Its the same thing here as well with Linq.</p>

<p>2) <strong>I live in the present</strong> </p>

<blockquote>
  <p>Be cautious about variables inside Linq expressions getting changed
  later on.</p>
</blockquote>

<p>To be safe, backup variables first and then use the backup in query if the variable can change later on before the actual execution of query. </p>

<p><a href=""http://visualstudiomagazine.com/articles/2010/08/31/5-traps-to-avoid-in-csharp.aspx"" rel=""nofollow noreferrer"">From here:</a></p>

<pre><code>decimal minimumBalance = 500;
var customersOver500 = from c in customers 
                       where c.Balance &gt; minimumBalance 
                       select c;

minimumBalance = 200;
var customersOver200 = from c in customers
                       where c.Balance &gt; minimumBalance 
                       select c;

int count1 = customersOver500.Count();
int count2 = customersOver200.Count();
</code></pre>

<p><em>Suppose we have four customers with the following balances: 100, 300, 400 and 600. What will count1 and count2 be? They'll both be 3. The ""customersOver500"" references the ""minimumBalance"" variable, but the value isn't obtained until the query results are iterated over (through a for/each loop, a ToList() call or even a ""Count()"" call as shown above). At the time the value is used to process the query, the value for minimumBalance has already changed to 200, so both LINQ queries produce identical results (customers with a balance over 200).</em></p>

<p>3) <strong>My memory is too weak to remember the valuables of the past</strong> </p>

<blockquote>
  <p>The same as above, the context being a little different.</p>
</blockquote>

<p>or this from the same site:</p>

<p><em>Consider this simple example of a method using LINQ-to-SQL to get a list of customers:</em></p>

<pre><code>public IEnumerable&lt;Customer&gt; GetCustomers()
{
    using(var context = new DBContext())
    {
        return from c in context.Customers
               where c.Balance &gt; 2000
               select c;
    }
}
</code></pre>

<p><em>Seems pretty harmless -- until you get an ""ObjectDisposedException"" when you try and enumerate the collection. Why? Because LINQ doesn't actually perform the query until you try and enumerate the results. The DBContext class (which exposes the Customers collection) is disposed of when this call exits. Once you try and enumerate through the collection, the DBContext.Customers class is referenced and you get the exception.</em></p>

<p>4) <strong>Don't try to catch me, I might still slip away</strong> </p>

<blockquote>
  <p>Try-catch is pointless for a statement if not wisely used.</p>
</blockquote>

<p>Instead global exception handling will be better here.</p>

<pre><code>try
{
    wallet = bank.Select(c =&gt; Convert.ToInt32(""""));
}
catch (Exception ex)
{
    MessageBox.Show(""Cannot convert bad int"");
    return;
}

foreach(int i in wallet)
  //kaboom!
</code></pre>

<p>Neither we get the correct error message nor the function is quit by <code>return</code>.</p>

<p>5) <strong>I'm not only unpunctual, but I don't learn from mistakes as well</strong></p>

<blockquote>
  <p>Linq is executed each time you enumerate over them. So do not reuse Linq enumerables.</p>
</blockquote>

<p>Suppose you have an <code>IQueryable</code> or <code>IEnumerable</code> returned from a Linq expression. Now enumerating the collection will get the statement executed, but only once? No, every time you do. This had bitten me in the past. If you have:</p>

<pre><code>var p = listOfAMillionComplexItems.OrderBy(x =&gt; x.ComplexProperty);
MessageBox.Show(p.Count().ToString()); //long process.
MessageBox.Show(p.Count().ToString()); //long process still.
</code></pre>

<p>So better do</p>

<pre><code>int i = p.Count(); //store in a variable to access count
//or better
var list = p.ToList(); //and start using list
</code></pre>

<p>6) <strong>If you don't know to use me, I can cause side effects!</strong></p>

<blockquote>
  <p>The same as above, just to show how reusing Linq enumerables can cause undesired behaviour. </p>
</blockquote>

<p>Ensure you don't do side-effect programming (since re-enumerating in Linq is much more common) To give a wild example,</p>

<pre><code>p = bag.Select((t, i) =&gt; {if(i == 1) MessageBox.Show(""Started off""); return t;});
</code></pre>

<p>If you enumerate twice you know what undesired thing can happen.</p>

<p>7) <strong>Be wary of order I am executed when chaining</strong></p>

<blockquote>
  <p>Not just for variables, even the chained Linq functions can be executed in different order from what you normally expect (though behaviour is correct). Don't think imperative (step by step), think how Linq can possibly execute it.</p>
</blockquote>

<p>Eg,</p>

<pre><code>var d = Enumerable.Range(1, 100);
var f = d.Select(t =&gt; new Person());
f = f.Concat(f);
f.Distinct().Count() ??
</code></pre>

<p>What will be the count of distinct people in <code>f</code>? I would guess 100, no but it is 200. The problem is that when the actual execution of the logic of concatenation takes place, <code>f</code> is still <code>d.Select(t =&gt; new Person()</code> <strong>unexecuted</strong>. So this effectively yields in </p>

<pre><code>f = d.Select(t =&gt; new Person()).Concat(d.Select(t =&gt; new Person()));
</code></pre>

<p>which then has 200 distinct members. <a href=""https://stackoverflow.com/questions/13500641/is-the-order-of-execution-of-linq-the-reason-for-this-catch"">Here's a link for the actual problem</a></p>

<p>8) <strong>Hey, actually we're smarter than you think.</strong></p>

<blockquote>
  <p>Not a caveat per se, but there are many cases where Linq can outperform your imperative style program. So before optimizing, give a second thought, and even benchmark.</p>
</blockquote>

<p>The reason that deferred execution is basically executed on demand makes Linq much more efficient than it appears. The iterator block ""yields"" one item at a time, as demanded, lending the ability to stop execution when its no more needed. Here is a very good question that details just that: <a href=""https://stackoverflow.com/questions/10110013/order-of-linq-extension-methods-does-not-affect-performance"">Order of LINQ extension methods does not affect performance?</a></p>

<p>9) <strong>I'm not meant to crunch number</strong></p>

<blockquote>
  <p>Abuse of Linq can make code inefficient as well as less readable.</p>
</blockquote>

<p>For number crunching algorithms, Linq is not the right tool, especially for large data sets whose complexity can scale exponentially. Sometimes just two for loops would suffice better. The same can apply for raw SQL when compared to LINQ to SQL.</p>

<p>10) <strong>Hire me for the right job</strong></p>

<blockquote>
  <p>Asking Linq to mind your normal business is bad programming choice, something that goes against readability.</p>
</blockquote>

<p>Some eg: </p>

<pre><code>medicines.Any(p =&gt;
{
    Console.WriteLine(p);
    return false;
});
</code></pre>

<p>for a foreach on an enumerable.</p>

<p>or</p>

<pre><code>medicines = medicines.Select(p =&gt;
{
    p.Id = 3;
    return p;
});
</code></pre>

<p>Just bad tools.</p>

<p>11) <strong>Debugging and Profiling can be a nightmare</strong></p>

<blockquote>
  <p>Its hard to follow what's happening under hood a Linq expression from VS</p>
</blockquote>

<p>Not that its entirely impossible, but its bit of a task to debug a linq query as efficiently as non linq code from VS itself. Profiling also becomes a tad harder because of the nature of deferred execution. But it shouldn't stop anyone from doing the trivial one or two liners!</p>

<hr>

<p>A bunch of caveats all related to deferred execution more or less! <a href=""https://stackoverflow.com/questions/3703681/common-linq-standard-query-operator-mistakes-mis-steps"">A ditto question here</a>. Some related reading on SO:</p>

<p><a href=""https://stackoverflow.com/questions/779876/examples-on-when-not-to-use-linq?lq=1"">Examples on when not to use LINQ</a></p>

<p><a href=""https://stackoverflow.com/questions/271384/pros-and-cons-of-linq-language-integrated-query"">Pros and Cons of LINQ (Language-Integrated Query)</a></p>

<p><a href=""https://stackoverflow.com/questions/777400/what-is-the-biggest-mistake-people-make-when-starting-to-use-linq"">What is the biggest mistake people make when starting to use LINQ?</a></p>

<p><a href=""https://stackoverflow.com/questions/814476/drawbacks-of-linq?lq=1"">drawbacks of linq</a></p>
"	661933.0		-1.0		2017-05-23 11:56:11	2013-02-18 18:43:31				0			2012-11-21 23:38:00
14158257	2		14157404.0	2013-01-04 13:38:19		1		"<p>Give a try to <code>JOIN</code>s, <code>UNION</code>s</p>

<p><strong>Example</strong></p>

<pre><code>var ctx = dataContextProvider.GetContext(environment);

var byCreator = from r in ctx.Structures where r.CreatedUserId == userId select r;

var byUserAccess = from r in ctx.PermissionUsers 
                   join s in ctx.Structures on r.StructureId equals s.StructureId
                   where r.UserId == userId select s;

var byGroups = from ug in ctx.UsersGroups 
               join pg in ctx.PermissionGroups on ug.GroupId equals pg.GroupId
               join s in ctx.Structures on pg.StructureId equals s.StructureId
               where ug.UserId == userId select s;

var res = byCreator.Union(byUserAccess).Union(byGroups);
</code></pre>

<p><em>Update</em></p>

<p>I have removed unnecessary call to <code>Distinct()</code> according to @Magnus comment. Call to <code>Distinct()</code> would be necessary only if <code>Concat()</code> instead of <code>Union()</code> is used.</p>
"	1193333.0		1193333.0		2013-01-04 20:20:11	2013-01-04 20:20:11				4			
1132138	1			2009-07-15 15:28:07		1	597.0	"<p>i have a class user, and i also have implemented a collection for the same user class - users. users will store user objects. users collection class implements the generic collection class - collection.</p>

<p>i want to cast the LINQ query result into an object of my collection class - users. Everytime i try explicit casting, it gives me a cannot class runtime exception.</p>

<p>i tried to implement the iEnumerable interface also in my users collection class, but still i could not cast the query result.</p>

<p>Now i have to do a for loop within the query result set, and fill up my own custom collection - users.</p>

<p>please help me regarding this, thanx in advnce.
Sanjay Sachdev </p>
"		Sanjay Sachdev	48910.0		2009-07-15 15:31:32	2009-07-15 22:44:38	LINQ to objects cast result of query	<.net><linq>	3.0	1			
1404049	2		1404039.0	2009-09-10 08:25:38		2		"<p><code>Any()</code> returns a bool. I.e. are there any elements matching the condition. Use <code>Any()</code> if you just want to know if you have elements to work with. E.g. prefer <code>Any()</code> over <code>Count() == 0</code> for instance as the latter will possible enumerate the entire sequence to find out if it is empty or not. </p>

<p><code>Where()</code> returns a sequence of the elements matching the condition.</p>
"	38206.0					2009-09-10 08:25:38				0			
1568039	1	1568054.0		2009-10-14 18:09:57		11	4059.0	"<p>What is a ""LINQ provider,"" and what is its purpose?</p>
"	159072.0		102937.0		2009-10-14 18:31:30	2012-11-19 15:59:46	What is a LINQ provider?	<.net><linq>	2.0	0	2.0	2012-11-19 10:25:18	
1568049	2		1568039.0	2009-10-14 18:12:01		3		"<blockquote>
  <p>""LINQ (Language Integrated Query)
  works as a middle tier between data
  store and the language environment.
  From a developer's point of view, it
  is just a new pattern for querying
  data from multiple data structures
  directly in the IDE. Behind the scenes
  it does a whole lot of tasks like
  expression processing, validation and
  calling the right routine to fetch
  data or build a query to run in SQL
  Server. In short, LINQ stands as
  common query gateway between the
  language and the data store.""
  <a href=""http://dotnetslackers.com/articles/csharp/LINQProviderBasics.aspx"" rel=""nofollow noreferrer"">http://dotnetslackers.com/articles/csharp/LINQProviderBasics.aspx</a></p>
</blockquote>

<p>A particular gateway for a particular data store (e.g. xml files, sql rdmbs) <em>is</em> called a LINQ Provider. It is realised by implementing the IQueryable Interface.</p>

<p>Matt Waren has a great <a href=""http://blogs.msdn.com/mattwar/"" rel=""nofollow noreferrer"">tutorial</a> series on implementing a cusotm linq provider.</p>
"	125407.0		125407.0		2009-10-14 19:16:49	2009-10-14 19:16:49				1			
1997951	1	2000146.0		2010-01-04 07:12:12		0	759.0	"<p>I'm still getting my head around <a href=""http://en.wikipedia.org/wiki/Language_Integrated_Query"" rel=""nofollow noreferrer"">LINQ</a> queries and the LINQ extension methods.  </p>

<p>Say I have a base class <code>BaseA</code> and subclass <code>SubB</code> with a property <code>IsAwesome</code>.  I have an <code>ObservableCollection&lt;BaseA&gt;</code>. Is there some neat way I can grab a collection of only SubB classes where IsAwesome is true?</p>
"	145429.0		63550.0		2010-01-04 15:41:29	2011-02-03 20:22:47	LINQ query finds subclass in an ObservableCollection of base class	<.net><linq>	2.0	0			
2094724	2		2094359.0	2010-01-19 15:46:47		0		"<p>Tell them that you've reconsidered: you now dislike LINQ and think its an awful way to go.</p>

<p>That should do the trick. Just kidding (mostly). </p>
"	254133.0					2010-01-19 15:46:47				0			2010-01-19 15:46:47
2094876	2		2094359.0	2010-01-19 16:05:49		1		"<p>Brown bag lunch session.  Project your code on a screen and show how his 20 lines of code can be re-written in 2 or 3.  </p>

<p>That's pretty much sold everyone I've shown it to.</p>
"	1572436.0					2010-01-19 16:05:49				0			2010-01-19 16:05:49
2107604	1	2107750.0		2010-01-21 07:39:56		2	186.0	"<p>I was wondering, if there are examples of Linq like features in other languages and programming platforms prior to .NET or this was the invention of Microsoft.</p>
"	260.0					2010-01-21 08:11:15	Is there any Linq like feature in any languages prior to .NET?	<.net><linq>	2.0	0	1.0		
2436924	1	2436931.0		2010-03-13 01:39:40		4	185.0	"<p>Where is a good place to start learning LINQ for .net, and what are the resources i should use to put the knowledge into practice?</p>
"	292756.0					2012-09-19 16:13:59	Where is a good place to start learning LINQ	<.net><linq>	4.0	2	1.0	2013-02-08 14:58:09	
2548402	1	2548439.0		2010-03-30 20:19:38		3	416.0	"<p>Why only one overload throws this exception?</p>

<p>Little update: I understand that there was a design decision made by framework developers. The question is really why that decision has been made, is there a related design pattern or whatever? Because if I was designing that I'd return default(TSource). What is wrong with such approach?</p>
"	229949.0		436641.0		2011-09-20 23:57:44	2011-09-20 23:57:44	What is the reason for InvalidOperationException in Enumerable.Aggregate<TSource>?	<.net><linq>	3.0	0			
2677231	1	2677496.0		2010-04-20 17:25:28		-1	85.0	"<p>I have object A which contains multiple instances of object B, which in turn contains multiple instances of object C.  I need to write a function which, given Object A needs search through instances of objects B and objects C and find a particular object C.  How would I do this using LINQ?</p>
"	155909.0					2010-04-20 18:21:50	a linq query to find something	<.net><linq>	3.0	2			
3073423	2		3073406.0	2010-06-18 22:21:21		0		"<p>Oops I see Enumerable takes a count and not a start to end. This appears to work if start is from 1.</p>
"	254428.0					2010-06-18 22:21:21				0			
3343089	1	3343191.0		2010-07-27 11:26:49		7	4275.0	"<blockquote>
  <p><strong>Possible Duplicate:</strong><br>
  <a href=""https://stackoverflow.com/questions/16322/learning-about-linq"">Learning about LINQ</a>  </p>
</blockquote>



<p>Hi everyone,</p>

<p>I just want to understand what exactly is LINQ in DOTNET? And How does it work?</p>

<p>Tx</p>
"		user399356	-1.0		2017-05-23 12:14:25	2010-07-27 11:38:57	What is LINQ exactly?	<.net><linq>	5.0	2	0.0	2010-07-27 11:53:43	
3343131	2		3343089.0	2010-07-27 11:32:28		3		"<p>MSDN does a very good job of introducing LINQ:</p>

<blockquote>
  <p>[...]</p>
  
  <p>.NET Language-Integrated Query defines
  a set of general purpose standard
  query operators that allow traversal,
  filter, and projection operations to
  be expressed in a direct yet
  declarative way in any .NET-based
  programming language. The standard
  query operators allow queries to be
  applied to any IEnumerable-based
  information source. LINQ allows third
  parties to augment the set of standard
  query operators with new
  domain-specific operators that are
  appropriate for the target domain or
  technology. More importantly, third
  parties are also free to replace the
  standard query operators with their
  own implementations that provide
  additional services such as remote
  evaluation, query translation,
  optimization, and so on. By adhering
  to the conventions of the LINQ
  pattern, such implementations enjoy
  the same language integration and tool
  support as the standard query
  operators.</p>
  
  <p>[...]</p>
</blockquote>

<p><a href=""http://msdn.microsoft.com/library/bb308959.aspx"" rel=""nofollow noreferrer"">http://msdn.microsoft.com/library/bb308959.aspx</a></p>
"	389236.0					2010-07-27 11:32:28				0			
3575634	2		3575575.0	2010-08-26 13:41:17		1		"<p>It depends what you are doing with it. If you are only using it to construct queries for something else to process, for example Fluent NHibernate, then linq will never see the objects themselves, so won't be a factor.</p>

<p>If you're using linq to objects with millions of objects, you might want to avoid loading all of the objects into memory at once. In which case, you'll want to only use lazy linq queries. Jon has a good overview of the issues in his article <a href=""http://msmvps.com/blogs/jon_skeet/archive/2010/03/25/just-how-lazy-are-you.aspx"" rel=""nofollow noreferrer"">Just how lazy are you?</a></p>
"	119271.0					2010-08-26 13:41:17				0			
3575641	2		3575575.0	2010-08-26 13:42:09		0		"<p>If you have ""millions of record"" in your database, you of course don't want to return them all to your LINQ client to process. However, the same is true whatever technology you are using - Linq, Entity Framework, NHibernate, ADO.Net etc.</p>

<p>If you use LINQ sensibly (i.e. FILTER YOUR RESULTS) then the number of rows in the backing store is largely irrelevant.</p>
"	67436.0					2010-08-26 13:42:09				0			
3654825	1			2010-09-06 23:26:53		0	387.0	"<p>In the spirit of <a href=""https://stackoverflow.com/questions/146329/what-is-the-worst-gotcha-youve-experienced"">this question</a>, I'd like to know what Gotchas you've come across in Linq.  The reason I'm posting this is because I came across a brain teaser today, and I want to share it with the rest of you.</p>

<p><em>note: I've posted it as an answer</em></p>
"	124069.0		-1.0		2017-05-23 11:47:48	2010-11-08 18:01:04	What are some Linq Gotchas that you've come across?	<.net><linq>	3.0	0			2010-09-06 23:26:53
3654826	2		3654825.0	2010-09-06 23:27:12		0		"<p>I came across this little subtly today</p>

<pre><code>        Dim Activity = (From al In user.ActivityLogs
                        Take 2
                        Select al.ActivityDate
                        Order By ActivityDate Descending)
</code></pre>

<p>Although this ""works"", it calls the ""Take"" before calling the ""Order By"", which results in the query returning the ""Top 2, Order By Ascending"", and then simply reverse orders the two records returned after the fact.</p>

<p>If you want to pull up the last two records in the table, you need to use the following</p>

<pre><code>        Dim Activity = (From al In user.ActivityLogs
                        Select al.ActivityDate
                        Order By ActivityDate Descending).Take(2)
</code></pre>

<p>This will Order the call Descending and then grab the Top 2 records.</p>

<p>This was a ""gotcha"" for me because I ""ASSumed"" that the syntax would be a smooth transition from SQL</p>

<pre><code>Select Top 2 ActivityDate From ActivityLogs Order By ActivityDate Descending
</code></pre>
"	124069.0		124069.0		2010-11-08 18:01:04	2010-11-08 18:01:04				4			2010-09-06 23:27:12
3762202	1	3762331.0		2010-09-21 16:05:02		7	1437.0	"<p>I'm looking for a way to compute the range of a give set of number for example. </p>

<p>if I had H555,H567,H589,H590,H591,H592,H593,H594,H595,H596,H597</p>

<p>I would like output of H555,H567,H589-H597.</p>

<p>I have looked through relevant questions and can not find anything like what I'm looking for. </p>

<p>Thanks</p>
"	375456.0		375456.0		2010-09-21 16:11:48	2010-09-21 18:14:29	Get Range of integers with linq	<.net><linq>	2.0	5	1.0		
3762331	2		3762202.0	2010-09-21 16:20:55		4		"<p>I think that Linq is really overhead here but if you want it here you are:</p>

<pre><code>        int[] arr = { 555, 567, 589, 590, 591, 592, 593, 594, 595, 596, 597 };
        int gr = 0;
        var q = arr
            .Skip(1)
            .Select((x, i) =&gt; new { x, group = (x - arr[i]) == 1 ? gr : gr++ })
            .GroupBy( a =&gt; a.group)
            .Select(
                a =&gt; a.Count() == 1 
                    ? a.First().x.ToString() 
                    : string.Format(""{0}-{1}"", a.First().x, a.Last().x));
        foreach (var item in q)
        {
            Console.Write(item);
            Console.Write("", "");
        }
</code></pre>
"	283676.0					2010-09-21 16:20:55				3			
3862503	2		3862480.0	2010-10-05 09:48:08		0		"<p>Just use the where-keyword, LINQ will sort it out for you.</p>

<p>EDIT: 
<a href=""http://msdn.microsoft.com/en-us/vcsharp/aa336746.aspx"" rel=""nofollow"">Some nice examples on the use of LINQ</a></p>
"	449441.0		449441.0		2010-10-05 10:03:55	2010-10-05 10:03:55				5			
3863063	2		3862854.0	2010-10-05 11:08:05		2		"<p>It depends on the <strong>scope</strong> for what you need this ""type"" for.</p>

<p>If you only need access to this result in a particular method, you can project the result into an <strong><a href=""http://msdn.microsoft.com/en-us/library/bb397696.aspx"" rel=""nofollow"">anonymous type</a></strong> (as they only have method scope).</p>

<p>Example:</p>

<pre><code>var result = (from a in tablea join b in tableb
            on a.key equals b.key
            select new { 
                PropertyOne = a.Something, 
                PropertyTwo = b.Something 
             }).SingleOrDefault();
</code></pre>

<p>In that example, <strong>result</strong> will be an anonymous type, containing two properties, PropertyOne and PropertyTwo.</p>

<p>Note, before calling <strong>SingleOrDefault</strong>, the query is an <code>IQueryable&lt;T&gt;</code>, so you can choose to project the result set into a collection, by using <code>.ToList()</code>.</p>

<p>Modify the select new (called 'projection') to contain whatever you want.</p>

<p>If you need access to this type <strong>outside</strong> the method, instead of <code>select new { }</code>, do this:</p>

<pre><code>select new SomeClass { ... } // projection into concrete class
</code></pre>

<p>And project the fields into that class (which can have the appropriate accessibility modifier).</p>

<p>Also (on a side note), please don't forget to go back and accept some of your answers (including this one, if it's correct), as it will result in more people providing you with assistance.</p>

<p>HTH</p>
"	321946.0		321946.0		2010-10-05 11:22:42	2010-10-05 11:22:42				0			
3870884	1	3870933.0		2010-10-06 08:56:10		0	532.0	"<p>Here is my example:</p>

<pre><code>class test{
    public DateTime dt;
    public double value;
    public int id;
}
</code></pre>

<p>i have:</p>

<pre><code>IEnumerable&lt;Test&gt; TestList;
</code></pre>

<p>I want select rows from it, with group by id, with max(dt).</p>

<p>my query:</p>

<pre><code>var q = from p in TestList
        group p by p.id
        into g
        select new { id = g.Key, dt = g.Max(w =&gt; w.dt) }); 
</code></pre>

<p>In result i have anonyoumus class with {id_param,dt}, but i want to have field ""value"" too, like {id,dt,value},how can i do it?</p>
"	438597.0					2010-10-06 09:51:20	Linq Group By With Having	<.net><linq>	2.0	2			
4077602	1			2010-11-02 12:27:28		0	203.0	"<p>I'm just getting to grips with LINQ and I have the following scenario:</p>

<p>I have a database which represents sports matches between teams on various dates, organised as follows:</p>

<pre><code>Table MATCH
___________
MatchID
MatchLocation
MatchDate


Table MATCHTEAM
________________
MatchID
TeamID
HomeOrAway
Points

Table TEAM
__________
TeamId
TeamName
</code></pre>

<p>Now I want to be able to query the database to look at all matches a particular team played in, and the associated team data for each match. So far I've been able to perform a query that does a GROUP JOIN as follows:</p>

<pre><code>    Using MyMatchEntites As New MatchEntities
        Return (From M In MyMatchEntites.Match, _
                MT In MyMatchEntites.MatchTeam _
                Where M.MatchId = MT.Match.MatchId And _
                MT.Team.TeamId = inputTeamId _
                Select M _
                Group Join MT2 In MyMatchEntites.MatchTeam _
                On MT2.Match.MatchId Equals M.MatchId _
                Into _
                MatchTeams = Group).ToList
    End Using
</code></pre>

<p>This gives me a list of matches played in by the input team and each record has an associated list of the teams that played in the match. However, I also want to include the team name in this sublist for display purposes. How would I include the TeamName field in the MatchTeams group created in the query?</p>
"	494711.0		22656.0		2010-11-02 12:37:36	2010-11-02 13:16:14	LINQ query with GROUP JOIN - require additional data in the group	<.net><linq>	1.0	2			
4077996	2		4077602.0	2010-11-02 13:16:14		0		"<p>Just a guess...</p>

<p>Is it possible to do something like that:</p>

<pre><code>Select M, T _
Group Join MT2 In MyMatchEntites.MatchTeam _
On MT2.Match.MatchId Equals M.MatchId _
Group Join T In MyMatchEntites.Team
On T.TeamId = MT2.TeamId
</code></pre>

<p>I'm pretty sure that you can do multiple GroupJoins with LINQ, but I don't know about retrieving multiple entities in the select clause. By the way, this would return the whole Team entity, not only the field TeamName.</p>

<p>Hope this helps.</p>
"	366495.0					2010-11-02 13:16:14				3			
4508668	1	4508729.0		2010-12-22 11:24:15		1	616.0	"<p>Is there some pedantic Enumerator-theory-based reason why the Any() method throws an <code>ArgumentNullException</code> for a null enumerable?</p>

<p>I use IEnumerable wherever possible to pass collections of data around - but in most cases I then have this kind of code:</p>

<pre><code>public class Foo
{
  public IEnumerable&lt;IBar&gt; Bars { get; set; }
}

////----

public static void UseAFoo(Foo foo)
{
  //if Bars has something in it, then do something:
  if(foo.Bars != null &amp;&amp; foo.Bars.Any())
  {
    //blah
  }
}
</code></pre>

<p>Or,</p>

<pre><code>if((foo.Bars ?? Enumerable.Empty&lt;IBar&gt;()).Any())
{
  //ugh!
}
</code></pre>

<p>Or modify the property declaration thus:</p>

<pre><code>public class Foo
{
  private IEnumerable&lt;IBar&gt; _bars;
  public IEnumerable&lt;IBar&gt; Bars
  { 
    get { return _bars ?? Enumerable.Empty&lt;IBar&gt;(); }
    set { _bars = value; }
  }
}
</code></pre>

<p>Or the 'more efficient' way:</p>

<pre><code>get { return _bars; }
set { _bars = value ?? Enumerable.Empty&lt;IBar&gt;(); }
</code></pre>

<p>In every case - it's nasty.  Okay so I can do my own extension method (which I have) - but naming is a bit tricky, because the best name is already taken!  I've gone for <code>NotNullAndAny()</code> but I don't like it.</p>

<p><code>Any()</code> (and it's delegate-driven brother) should, in my opinion, return false if the Enumerable is null - it should not throw an <code>ArgumentNullException</code>.</p>

<p>But then like I say at the start - is there some hidden contract here that I'm missing?  Or is it just pedantry ;)</p>

<p><strong>UPDATE</strong></p>

<p>I had a feeling that the consensus was going to be that all linq extensions should throw <code>ArgumentNullException</code>, even the case of <code>Any()</code> - and to be honest while I feel that the case can still be made for <code>Any()</code>, the arguments for are not persuasive enough to overcome the basic fact that if an enumerable is null, no general operation can be completed satisfactorily for it and therefore an exception has to be thrown.</p>

<p>Thus I will go with an extra extension method <code>NotNullAndAny()</code> to clean up my code where nulls are reasonably possible (and not an error).  In cases where a null enumerable is not allowed I already throw <code>ArgumentNullException</code> too.  In some cases however it's more practical to allow consumers of my code to leave a property unset whilst equally not forcing my classes to require manually implemented properties or default constructors to make sure these properties don't ever get a <code>null</code>.  If that's my choice, then I consign my own code to have to check both null and empty.</p>

<p>Only thing now is which response to mark as the answer! :)</p>
"	157701.0		157701.0		2010-12-22 12:35:57	2010-12-22 12:35:57	Enumerable.Any<T>(this IEnumerable<T> source) should handle null enumerable too, surely?	<.net><linq>	3.0	4			
4508707	2		4508668.0	2010-12-22 11:28:26		2		"<p>I think it should not return <code>false</code> when parameter is <code>null</code>. </p>

<p>With this one throwing an exception for a <code>null</code> parameter matches up with general behavior of other <code>BCL</code> classes.</p>

<p>It does return <code>false</code> when the <code>sequence</code> is <code>empty</code>.</p>

<p>There is a difference between having a <code>null</code> value and having a parameter value as an <code>empty sequence</code> (which is a sequence with no elements in it).</p>
"	362218.0					2010-12-22 11:28:26				3			
4517047	1	4519523.0		2010-12-23 08:37:27		0	699.0	"<p>I have a table with the following fields:</p>

<ol>
<li>Action => Click/Open</li>
<li>DateTime => Date and time action
occured</li>
</ol>

<p>example:</p>

<p>Action | DateTime</p>

<hr>

<ol>
<li>click  | 3/12/2010 3:00AM</li>
<li>click  | 3/12/2010 3:12AM</li>
<li>open   | 3/12/2010 3:34AM</li>
<li>click  | 3/12/2010 4:12AM</li>
<li>click  | 3/13/2010 1:12PM</li>
</ol>

<p>etc..</p>

<p>I need to group these by hour so that I have a number of clicks and opens hourly.</p>

<p>how would i do it?
thanks</p>
"	455042.0					2010-12-23 14:19:47	LINQ group by Hour and Type (click/open ratio)	<.net><linq>	3.0	0	2.0		
4965985	2		4366154.0	2011-02-11 05:40:53		2		"<p>This should produce the exact same query (excluding the seemingly unnecessary use of the <code>Items</code> table) and is much more natural to me IMHO.</p>

<pre><code>var query = from c in context.categories 
            join ic in context.itemCategories
                on c.categoryId equals ic.categoryId into joined
            select new CategoryCount
            {
                CategoryName = c.categoryName,
                Counter = joined.Count(),
            };
</code></pre>

<p>If the join makes you queasy for whatever reason, here's an alternative.</p>

<pre><code>var query = from c in context.categories 
            select new CategoryCount
            {
                CategoryName = c.categoryName,
                Counter = context.itemCategories
                                 .Where(ic =&gt; ic.categoryId == c.categoryId)
                                 .Count(),
            };
</code></pre>
"	390278.0					2011-02-11 05:40:53				0			
5013568	2		5013472.0	2011-02-16 07:17:49		2		"<p>As you have created an anonymous(<strong>Anonymous types are generated by the compiler, so we cannot know the type name in our codes</strong>) class so that you can not return it.Create a separate class with three properties Id,Name and Address then returned it.</p>

<pre><code>  public class Contact
        {
            public int Id { get; set; }
            public string Name { get; set; }
            public string Address { get; set; }

        }

 private IList&lt;Contact&gt; GetJoinAAndB()
    {
        var query = from a in objA
                    join b in objB
                    on a.ID equals b.AID
                    select new Contact{ a.ID, a.Name, b.Address };
        return query.ToList();
    }
</code></pre>
"	449897.0					2011-02-16 07:17:49				0			
5200880	2		5200873.0	2011-03-05 00:57:21		2		"<p>No.  LINQ is built on top of compiler and framework features that were not available in .NET 1.1.  This is unlikely to ever work.</p>

<p>There are options to get LINQ to (at least somewhat) work on machines with only .NET 2 installed, such as <a href=""http://www.albahari.com/nutshell/linqbridge.aspx"" rel=""nofollow"">LINQBridge</a>.  However, those still require a C# 3.0 compiler.  Without the C# language features in C# 3.0, it would be impossible to write LINQ operations in a form at all similar to ""LINQ"".  They also require generics at a minimum.</p>
"	65358.0					2011-03-05 00:57:21				0			
5200881	2		5200873.0	2011-03-05 00:57:28		0		"<p>No. Linq came with Visual Studio 2008.</p>
"	23528.0					2011-03-05 00:57:28				0			
5215536	2		5215469.0	2011-03-07 03:30:36		2		"<p>It's not the most efficient technique, but this will produce an <code>IEnumerable&lt;IEnumerable&lt;Person&gt;&gt;</code> sequence, with each inner sequence containing ten elements:</p>

<pre><code>var query = allPendingPersons.Select((x, i) =&gt; new { Value = x, Group = i / 10 })
                             .GroupBy(x =&gt; x.Group,
                                      (k, g) =&gt; g.Select(x =&gt; x.Value));
</code></pre>

<p>And if the result really does need to be a list-of-lists rather than a simple sequence then you can create a <code>List&lt;List&lt;Person&gt;&gt;</code> instead by adding in a couple of <code>ToList</code> calls:</p>

<pre><code>var query = allPendingPersons.Select((x, i) =&gt; new { Value = x, Group = i / 10 })
                             .GroupBy(x =&gt; x.Group,
                                      (k, g) =&gt; g.Select(x =&gt; x.Value).ToList())
                             .ToList();
</code></pre>
"	55847.0		55847.0		2011-03-07 03:35:48	2011-03-07 03:35:48				1			
5220483	2		5215469.0	2011-03-07 13:51:59		4		"<p>These should be of some assistance.  </p>

<p><a href=""https://stackoverflow.com/questions/1349491/how-can-i-split-an-ienumerablestring-into-groups-of-ienumerablestring"">How can I split an IEnumerable&lt;String&gt; into groups of IEnumerable&lt;string&gt;</a><br>
<a href=""https://stackoverflow.com/questions/5172390/divide-a-large-ienumerable-into-smaller-ienumerable-of-a-fix-amount-of-item"">Divide a large IEnumerable into smaller IEnumerable of a fix amount of item</a><br>
<a href=""https://stackoverflow.com/questions/4030246/can-i-improve-these-pagination-extension-methods"">Can I improve these Pagination extension methods?</a><br>
<a href=""https://stackoverflow.com/questions/2686497/get-groups-of-4-elements-from-name-value-list-using-linq-in-c"">Get groups of 4 elements from name value list using LINQ in C#</a><br>
<a href=""https://stackoverflow.com/questions/4030172/linq-get-min-and-max-values-of-sequence-of-numbers-divided-into-subsequences"">LINQ: Get min and max values of sequence of numbers divided into subsequences</a><br>
<a href=""https://stackoverflow.com/questions/3773403/linq-partition-list-into-lists-of-8-members"">LINQ Partition List into Lists of 8 members</a></p>

<p>One very popular answer is to check out Jon Skeet's <a href=""http://code.google.com/p/morelinq/"" rel=""nofollow noreferrer"">MoreLinq</a>, in particular, the <code>Batch</code> function, which not only does what you are asking for, but also lets you specify a return selector!</p>
"	464094.0		-1.0		2017-05-23 12:18:17	2011-03-07 13:51:59				1			
5446463	1	5446481.0		2011-03-27 00:51:59		0	654.0	"<p>...new to LINQ and could do with some help.</p>

<p>I'm querying some remote xml and using LINQ to put the results into a List. When the xml query only returns 1 record all is fine and i get a fully populated 'GetMPResult' object by accessing [0] item in the list.</p>

<p>...but, if there is more than 1 record returned in the xml, i get  'Use the new keyword to create an object instance' </p>

<p>any ideas?</p>

<pre><code>XDocument myData = XDocument.Parse(e.Result);
        List&lt;GetMPResult&gt; mp = (from mpItem in myData.Descendants(""twfy"")
              select new GetMPResult
            { 
                Member_id = mpItem.Element(""member_id"").Value,
                House = mpItem.Element(""house"").Value,
                First_name = mpItem.Element(""first_name"").Value,
                Last_name = mpItem.Element(""last_name"").Value,
                Constituency = mpItem.Element(""constituency"").Value,
                Party = mpItem.Element(""party"").Value,
                Entered_house = mpItem.Element(""entered_house"").Value,
                Entered_reason = mpItem.Element(""entered_reason"").Value,
                Left_house = mpItem.Element(""left_house"").Value,
                Left_reason = mpItem.Element(""left_reason"").Value,
                Person_id = mpItem.Element(""person_id"").Value,
                Title = mpItem.Element(""title"").Value,
                Lastupdate = mpItem.Element(""lastupdate"").Value,
                Full_name = mpItem.Element(""full_name"").Value,
                Url = mpItem.Element(""url"").Value,
                Image = mpItem.Element(""image"").Value,
                Image_height = mpItem.Element(""image_height"").Value,
                Image_width = mpItem.Element(""image_width"").Value,
            }).ToList&lt;GetMPResult&gt;();
        GetMPCompleteEvent(mp[0]);
</code></pre>
"	669517.0					2011-03-27 00:59:24	LINQ: get 'Use the new keyword to create an object instance' when more than one records are returned	<.net><linq>	1.0	2	1.0		
5481900	1	5489048.0		2011-03-30 04:37:59		2	689.0	"<p>I'm a LINQ newbie working on a GIS project involving international postal addresses. One of my design problems involves dynamically transforming decomposed address data in key/value pair format into a multi-line postal address format by country. Each record will need to self-compose based on the <code>Country</code> field value, according a set of rules defined by country and address line:</p>

<pre><code>Dictionary&lt;string, string&gt; addressOne = new Dictionary&lt;string,string&gt;() {
    { ""StreetName"", ""Stradă Măguricea"" },
    { ""HouseNumber"", ""1"" },
    { ""ApartmentLabel"", ""Ap"" },
    { ""ApartmentNumber"", ""17"" },
    { ""PostalCode"", ""014231"" },
    { ""City"", ""BUCUREŞTI"" },
    { ""Country"", ""Romania"" }
};

Dictionary&lt;string, string&gt; addressTwo = new Dictionary&lt;string,string&gt;() {
    { ""StreetName"", ""PORTAGE"" },
    { ""StreetSuffix"", ""AVE"" },
    { ""HouseNumber"", ""811"" },
    { ""City"", ""WINNIPEG"" },
    { ""StateProvince"", ""MB"" },
    { ""PostalCode"", ""R3B 2A8"" },
    { ""Country"", ""CANADA"" }
};

//Example Concatenation Rules (these are approximations)...

//Romania:  AddressLine1 = ""{StreetName}[ {StreetSuffix}] {HouseNumber}[, {ApartmentLabel} {ApartmentNumber}""
//          AddressLine2 = ""{PostalCode} {City}""
//          AddressLine3 = ""{Country}""

//Canada:   AddressLine1 = ""{HouseNumber} {StreetName}[ {StreetSuffix}]""
//          AddressLine2 = ""[{ApartmentLabel} {ApartmentNumber}]""
//          AddressLine3 = ""{City} {StateProvince} {PostalCode}""
//          AddressLine4 = ""{Country}""
</code></pre>

<p>I'm currently planning a function table that calls by <code>Country</code> and <code>AddressLine</code>, with each <code>Func</code> returning a composite field formatted by the appropriate concatenation rule. I can always implement these rule functions with traditional <code>StringBuildler</code> logic, but this seems ripe for a LINQ query.</p>

<p>Most of my searching comes up with the usual <a href=""https://stackoverflow.com/questions/788535/eric-lipperts-challenge-comma-quibbling-best-answer"">comma aggregation scenarios</a>; this is more of a selective, conditional pattern matching problem (I can smell the Regex, already). Is this a good use-case for LINQ, or should I stick to old-school branching string operations?</p>

<p>Thanks for reading!</p>
"	681029.0		-1.0		2017-05-23 09:58:41	2013-01-12 08:28:56	LINQ conditional concatenation queries	<.net><linq>	1.0	1			
5500879	1	5501131.0		2011-03-31 13:46:39		0	54.0	"<p>Supose I have a table ""available_cars"" [car_id, descritpion] and another table ""cars_x_client"" [client_id, car_id]. How can I query all the cars that the client doesn't have?</p>

<p>I know do it in SQL. Maybe it is a piece of cake, but I don't know how to do it in Linq.</p>
"	312808.0					2011-03-31 14:03:17	"how can I do a ""locate non-coincident"" query in Linq?"	<.net><linq>	2.0	0			
5821832	1	5821845.0		2011-04-28 16:21:52		0	101.0	"<p>I have the following LINQ in ASP.NET 4.0. I'm reading in my data through an XML file and trying to filter the results into a strongly typed object.  </p>

<pre><code>    List&lt;Books&gt; books = (from q in _XmlConnection.Descendants(""BookShelf"")
                                    select new
                                    {
                                        Title = q.Element(""title"").Value,
                                        Author = q.Element(""autor"").Value
                                    }).ToList();
</code></pre>

<p>Now what I can do is run through a foreach after this statement and create a new Books object which is assigned to a list. What I would like to do though is contain all that in the LINQ statement, so that when I define a value for Title or Author, it's assigning it to List&lt; Books > straight away. That way I can jump straight to ""return books"". Is there a way to do this? </p>

<p>(Note: The above code returns an error, but for now this is fine. I can use ""var books"" and it works ok, but I left it as this to show what I would like it to look like).</p>

<p>Cheers :)</p>
"	493812.0		414076.0		2011-06-05 17:40:35	2011-06-05 17:40:35	Casting to a type while in LINQ statement	<.net><linq>	2.0	0			
5864984	1	5865013.0		2011-05-03 04:23:03		1	178.0	"<p>I was hoping to use <a href=""http://msdn.microsoft.com/en-us/library/system.linq.enumerable.orderby.aspx"" rel=""nofollow"">OrderBy</a> on a <a href=""http://msdn.microsoft.com/en-us/library/microsoft.sharepoint.spfoldercollection.aspx"" rel=""nofollow"">SPFolderCollection</a> object but after I include System.Linq, OrderBy still does not come up in intellisense.  </p>

<p>According to the Documentation, SPFolderCollectionClass inherits from <a href=""http://msdn.microsoft.com/en-us/library/microsoft.sharepoint.spbasecollection.aspx"" rel=""nofollow"">SPBaseCollection</a> which uses IEnumerable.  I thought this was all that I needed, am I missing something?</p>
"	226897.0					2011-05-03 04:34:50	Why can't I use Enumerable.OrderBy on this collection?	<.net><linq>	3.0	0			
5865050	2		5864984.0	2011-05-03 04:34:50		0		"<p>Perhaps you mixed up <a href=""http://msdn.microsoft.com/en-us/library/9eekhta0.aspx"" rel=""nofollow"">System.Collections.Generic.IEnumerable<code>&lt;T&gt;</code></a> interface and <a href=""http://msdn.microsoft.com/en-us/library/bb345746.aspx"" rel=""nofollow"">System.Linq.Enumerable</a> class</p>
"	139396.0					2011-05-03 04:34:50				0			
5977384	2		5977295.0	2011-05-12 11:40:32		4		"<p>(Note that <code>List&lt;T&gt;</code> is <em>not</em> an array, by the way.)</p>

<p>Well, I <em>think</em> this will do what you want, if you're using .NET 4 - and assuming the arrays are the same length:</p>

<pre><code>var query = first.Zip(second, (x, y) =&gt; new[] { x, y })
                 .SelectMany(pair =&gt; pair)
                 .Distinct();
</code></pre>

<p>EDIT: As pointed out in the comments, the ordering of <code>Distinct</code> is <em>not</em> guaranteed. However, I expect it to actually stay the same in practice... given other changes I've suggested which affect observable results only in a <em>positive</em> (and tiny) way, I can't imagine this is going to change.</p>

<p>lasseespeholt's solution deals with the interleaving part. If you want absolutely <em>guaranteed</em> ordering, you can always implement Disrinct yourself, much like I did in Edulinq:</p>

<pre><code>public static IEnumerable&lt;TSource&gt; OrderPreservingDistinct&lt;TSource&gt;(
    this IEnumerable&lt;TSource&gt; source)
{
    return source.OrderPreservingDistinct(EqualityComparer&lt;TSource&gt;.Default);
}

public static IEnumerable&lt;TSource&gt; OrderPreservingDistinct&lt;TSource&gt;(
    this IEnumerable&lt;TSource&gt; source,
    IEqualityComparer&lt;TSource&gt; comparer)
{
    if (source == null)
    {
        throw new ArgumentNullException(""source"");
    }
    return OrderPreservingDistinct(source, comparer ?? 
                                           EqualityComparer&lt;TSource&gt;.Default);
}

private static IEnumerable&lt;TSource&gt; OrderPreservingDistinct&lt;TSource&gt;(
    IEnumerable&lt;TSource&gt; source,
    IEqualityComparer&lt;TSource&gt; comparer)
{
    HashSet&lt;TSource&gt; seenElements = new HashSet&lt;TSource&gt;(comparer);
    foreach (TSource item in source)
    {
        if (seenElements.Add(item))
        {
            yield return item;
        }
    }
}
</code></pre>

<p>Then:</p>

<pre><code>var result = firstList.Interleave(secondList).OrderPreservingDistinct();
</code></pre>
"	22656.0		22656.0		2011-05-12 12:30:44	2011-05-12 12:30:44				12			
6536048	2		6535922.0	2011-06-30 14:06:45		2		"<p>I agree with Jon, but if you want to use LINQ anyway, you could do something like this:</p>

<pre><code>list = list.Select(i =&gt; { i.Active = (i == desiredActiveItem ? 1 : 0); 
                          return i; }).ToList();
</code></pre>

<p>This shows that it really is a good idea to not use LINQ here.</p>
"	572644.0					2011-06-30 14:06:45				0			
6902376	2		6902312.0	2011-08-01 17:56:37		1		"<p>I think the items are not serialized before you use them, if that's what you mean. I have had issues with this, returning LINQ expressions from WCF services, and gotten exceptions when the WCF serializer tries to serialize the result. The solution is to call ToArray() on the IQueryable result before serializing it. </p>

<p>Don't know if that completely answers your question?</p>
"	25338.0					2011-08-01 17:56:37				0			
7067513	1	7067549.0		2011-08-15 16:12:35		0	92.0	"<p>I have a table which has a column called lastUpdateTime, datetime type. How to do a query that will list all records that been updated within last 1 minute?</p>

<pre><code>DataContext dc=new DataContext();

from a in dc.Acccounts
where a.lastUpdateTime //how to write this line?
select a;
</code></pre>
"	695101.0		485076.0		2011-08-15 16:20:30	2011-08-15 16:40:37	linq: how to get records update within 1 minute?	<.net><linq>	2.0	0			
7067823	2		7067513.0	2011-08-15 16:39:12		0		"<p>I am sure there are about 900 ways to skins this cat.  I am making a lot of assumptions here but this should get you running.</p>

<ol>
<li>First I created a console application as I wasn't clear what you were using (assuming wpf or silverlight)</li>
<li><p>Created a person class with your LastUpdateDate:</p>

<pre><code>public class Person
{
    public int ID { get; set; }
    public string FirstName { get; set; }
    public DateTime LastUpdateDate { get; set; }
    public Person()

    {
    }
{
</code></pre></li>
<li><p>Populated a People list with arbitrary data. Peformed the query using a lambda expression.  Look up Timespan if the subtraction isn't making sense.  Notice 2 of them have an update date of greater than 1 minute ago.</p>

<pre><code>static void Main(string[] args)
{   
    List&lt;Person&gt; People = new List&lt;Person&gt;();
    People.Add(new Person() { ID = 1, FirstName = ""Test1"", LastUpdateDate = DateTime.Now.AddMinutes(-10) });
    People.Add(new Person() { ID = 2, FirstName = ""Test2"", LastUpdateDate = DateTime.Now.AddMinutes(-5) });
    People.Add(new Person() { ID = 3, FirstName = ""Test3"", LastUpdateDate = DateTime.Now });

    var result = People.Where(p =&gt; (DateTime.Now - p.LastUpdateDate).Minutes &lt;= 1);

    foreach (Person p in result)
    {
        Console.WriteLine(p.FirstName);
    }

    Console.ReadLine();
}
</code></pre></li>
<li><p>Result should be ""Test3""</p></li>
</ol>

<p>Cheers</p>

<p>Matt</p>
"	197684.0					2011-08-15 16:39:12				0			
7548808	2		7548783.0	2011-09-25 21:39:33		2		"<p>Or to make it even simpler:</p>

<pre><code>User user = users.Single(u =&gt; u.id == 5);
</code></pre>

<p>If the query returns more than one, you'll need to use <code>First</code>, as <code>Single</code> throws an exception if there is more than one element in the query.</p>
"	127059.0					2011-09-25 21:39:33				0			
7548847	2		7548783.0	2011-09-25 21:46:26		0		"<p>dmck is correct -- the <a href=""http://msdn.microsoft.com/en-us/library/bb155325.aspx"" rel=""nofollow"">Enumerable.Single() method</a> will accomplish this. However, by design it will throw an exception if there is more that one object in the set. If you want to avoid throwing an exception you have several other options:</p>

<ul>
<li>The <a href=""http://msdn.microsoft.com/en-us/library/bb291976.aspx"" rel=""nofollow"">Enumerable.First</a> or <a href=""http://msdn.microsoft.com/en-us/library/bb358775.aspx"" rel=""nofollow"">Enumerable.Last</a> methods</li>
<li><p>The Enumerable.ToArray method immediately followed by in indexer, such as:</p>

<pre><code>User user = (from User u in users  
    where u.id == 5 
    select u).ToArray()[0];
</code></pre></li>
</ul>
"	842685.0					2011-09-25 21:46:26				0			
7677992	2		7677428.0	2011-10-06 17:12:18		1		"<p>As others have mentioned, using anonymous types is a good solution because the compiler creates the <code>Equals</code> and <code>GetHashCode</code> methods for you.  However, the problem is that you lose the references to your original objects (<code>StreetInfo</code>) and instead you get a list of distinct anonymous types.</p>

<p>Instead, you can use a custom <code>IEqualityComparer</code> to compare the original objects based on any custom field you want.  Below is a reusable <code>CustomComparer</code> that compares any object based on any custom criteria.</p>

<pre><code>Public Class CustomComparer(Of TSource As Class, TCompareType)
    Implements IEqualityComparer(Of TSource)

    Private getComparisonObject As Func(Of TSource, TCompareType)

    Public Sub New(ByVal getComparisonObject As Func(Of TSource, TCompareType))
        If (getComparisonObject Is Nothing) Then
            Throw New ArgumentNullException(""getComparisonObject"")
        End If
        Me.getComparisonObject = getComparisonObject
    End Sub

    Public Function Equals(ByVal x As TSource, ByVal y As TSource) As Boolean
        If (x Is Nothing) Then
            Return (y Is Nothing)
        ElseIf (y Is Nothing) Then
            Return false
        End If
        Return EqualityComparer.Default.Equals(getComparisonObject(x), getComparisonObject(y))
    End Function

    Public Function GetHashCode(ByVal obj As TSource) As Integer
        Return EqualityComparer.Default.GetHashCode(getComparisonObject(obj))
    End Function
End Class
</code></pre>

<p>This allows you to write the following code:</p>

<pre><code>Dim query = From city In myCountry.Cities
      From street In city.Streets
      Select New StreetInfo With {.Name = street.Name, .Index = street.Index}
query = query.Distinct(new CustomComparer(function (street) New With {Key.Name = street.Name, Key.Index = street.Index}))
</code></pre>

<p>This will return all distinct <code>StreetInfo</code> instead of returning distinct anonymous types.</p>

<p>(Note: Please excuse any VB.NET syntax issues ... I switched to C# before lambdas and anon types)</p>
"	272072.0					2011-10-06 17:12:18				2			2011-10-06 17:12:18
8089187	2		8089142.0	2011-11-11 03:05:04		1		"<p><code>_dataContext.ConferenceRooms</code> is a collection of <code>ConferenceRoom</code>s.<br>
Therefore, it's <code>Where()</code> extension method takes a <code>ConferenceRoom</code>, not a <code>T2</code>.</p>

<hr>

<p>The point of a generic method is to be <strong>generic</strong> &ndash; to work with different types.<br>
It makes no sense to make your method generic, since it only works with <code>ConferenceRoom</code>s.</p>
"	34397.0					2011-11-11 03:05:04				1			
8660593	2		8659647.0	2011-12-28 19:53:52		0		"<p>If you're using LinqToObjects, use this code to assign Parents to the Children.</p>

<pre><code>ILookup&lt;int, Child&gt; lookup = children.ToLookup(c =&gt; c.ParentId)

foreach(Parent p in parents)
{
  foreach(Child c in lookup[p.Id])
  {
    c.Parent = p;
  }
}
</code></pre>

<hr>

<p>If you're using LinqToSql, use DataLoadOptions to load related records.</p>

<hr>

<p>If you're using LinqToEntities, use .Include to load related records.</p>
"	8155.0					2011-12-28 19:53:52				5			
8661171	2		8659647.0	2011-12-28 20:51:25		2		"<p>These suggestions, especially <a href=""https://stackoverflow.com/a/8660002/349974"">@Paul's</a>, were very helpful, but my final version is different enough that I'm going to write it up as my own answer.</p>

<p>I implemented the following totally general extension function:</p>

<pre><code>&lt;Extension()&gt; _
Public Function Apply(Of T)(ByVal Enumerable As IEnumerable(Of T), ByVal action As Action(Of T)) As IEnumerable(Of T)
    For Each item In Enumerable
        action(item)
    Next

    Return Enumerable
End Function
</code></pre>

<p>This is the same as ForEach, except that it returns the incoming sequence, and I think the name <strong>Apply</strong> makes it clear that there are side effects.  Then I can write my query as:</p>

<pre><code>Dim Children = (
            From x In db.ChildTable
            Join y In db.ParentTable
            On x.ParentId Equals y.Id
            ).
            Apply(Sub(item) item.x.Parent = item.y).
            Select(Function(item) item.x)
</code></pre>

<p>It would of course be better if there were a way to have custom query operators, so I wouldn't have to use the lambda syntax, but even so this seems very clean and reusable.  Thanks again for all the help.</p>
"	349974.0		-1.0		2017-05-23 11:55:32	2011-12-28 20:51:25				3			
8662259	1	8662300.0		2011-12-28 23:01:41		1	388.0	"<p>When I type a LINQ query, intellisense in Visual Studio 2010 shows that the where clause expects &lt; condition > . As in</p>

<pre><code>From anItem in listOfItems where ... Intellisense shows it expects a &lt; condition &gt;
</code></pre>

<p>What does this &lt; condition > refer to? Is it a type? A predicate? A boolean expression? For instance, if you type...</p>

<pre><code>listOfItems.RemoveAll(
</code></pre>

<p>...intellisense shows that it is expecting a <a href=""http://msdn.microsoft.com/en-us/library/bfcke1bz.aspx"" rel=""nofollow"">predicate</a>. What is the analog for a &lt; condition > in linq? (I get how to <strong>use</strong> a where condition, I want to know what it means). In the long run, I want to start writing complex where clauses and want to understand what LINQ is actually doing/expecting so I can understand what is going on.</p>

<p>I've googled around a little but nothing I find on msdn seems to fit:</p>

<ul>
<li><p><a href=""http://msdn.microsoft.com/en-us/library/ms606907.aspx"" rel=""nofollow"">http://msdn.microsoft.com/en-us/library/ms606907.aspx</a>   (seems wrong)</p></li>
<li><p><a href=""http://msdn.microsoft.com/en-us/library/7szfhaft.aspx"" rel=""nofollow"">http://msdn.microsoft.com/en-us/library/7szfhaft.aspx</a> (seems wrong)</p></li>
</ul>
"	821742.0					2011-12-28 23:23:42	What does intellisense mean when it shows that it expects a <Condition> in the where clause of a linq query?	<.net><linq>	2.0	0	0.0		
8662300	2		8662259.0	2011-12-28 23:08:15		2		"<p>It pretty much just asks for a Boolean expression that can be evaluated for every <code>anItem</code> in your query expression.</p>

<p>The first paragraph of <a href=""http://msdn.microsoft.com/en-us/library/bb311043.aspx"" rel=""nofollow"">where clause (C# Reference)</a> sums it up nicely:</p>

<blockquote>
  <p>The <code>where</code> clause is used in a query expression to specify which elements from the data source will be returned in the query expression. It applies a Boolean condition (<em>predicate</em>) to each source element (referenced by the range variable) and returns those for which the specified condition is true. A single query expression may contain multiple <code>where</code> clauses and a single clause may contain multiple predicate subexpressions.</p>
</blockquote>

<p>And this is what <a href=""http://msdn.microsoft.com/en-us/library/bb384663.aspx"" rel=""nofollow"">Where Clause (Visual Basic)</a> says:</p>

<blockquote>
  <p><em>condition</em></p>
  
  <blockquote>
    <p>Required. An expression that determines whether the values for the current item in the collection are included in the output collection. The expression must evaluate to a <code>Boolean</code> value or the equivalent of a <code>Boolean</code> value. If the condition evaluates to <code>True</code>, the element is included in the query result; otherwise, the element is excluded from the query result.</p>
  </blockquote>
</blockquote>
"	106224.0		106224.0		2011-12-28 23:23:42	2011-12-28 23:23:42				1			
8736730	1	8736777.0		2012-01-05 02:01:15		0	2298.0	"<p>I have two datetime pickers that I'm using to set a start and end date for desired records in a database. The ""dates"" in the database are stored as strings in the format <code>yyyymmdd</code>, but some dates are missing characters (ex. 2001094, which is missing the last digit on the day). </p>

<p>I want to write a single LINQ query that pulls the records for the relevant timespan, but if I just do this:</p>

<pre><code>var = 
    from rec in datacontext 
    where rec.date.substring(0,8) is in the daterange 
    select rec
</code></pre>

<p>then I get out of range exceptions for the short stringed records (because they are not 8 characters long). </p>

<p>Right now I'm pulling in the whole table and using two lambdas to (1) remove all the records that don't begin with 8 integers and then (2) remove all of the now .substring-safe records that don't match the range. This works, but it's really ugly.</p>

<p>If I have two conditions in my where clause, does LINQ evaluate them sequentially? So if I say</p>

<pre><code>from ... where (rec.date starts with 8 integers) AND (rec.date is in range) 
</code></pre>

<p>will LINQ skip over records when it sees they don't match the first condition?</p>

<p>The only other thing I can think of (also sort of ugly) is to use <code>.StartsWith</code> instead of <code>.SubString</code> in the initial LINQ queries, and then use lambdas after the initial query to remove the out of range records. This is better than pulling in all rows like I'm doing now, but not really the elegant single query I'm looking for.</p>

<pre><code>if datetimepickers are both in the same year...
var=from ... where rec.date.startswith(yyyy) 'at least I'm not pulling in everything...
var.remove(lambda to remove short date strings)
var.remove(lambda to remove out of range dates)
</code></pre>
"	821742.0		119549.0		2012-01-05 18:11:10	2012-01-05 18:11:10	How to safely use the .substring method in a linq where clause	<.net><linq>	1.0	1			
545914	2		545885.0	2009-02-13 13:24:52		6		"<p>I doubt that there's anything to top the raytracer. I'm quite fond of <a href=""http://msmvps.com/blogs/jon_skeet/archive/2008/02/26/visualising-the-mandelbrot-set-with-linq-yet-again.aspx"" rel=""nofollow noreferrer"">my Mandelbrot expression</a> though:</p>

<pre><code>from row in Enumerable.Range(0, ImageHeight)
from col in Enumerable.Range(0, ImageWidth)
// Work out the initial complex value from the row and column
let c = new Complex((col * SampleWidth) / ImageWidth + OffsetX,
                    (row * SampleHeight) / ImageHeight + OffsetY)
// Work out the number of iterations
select Generate(c, x =&gt; x * x + c).TakeWhile(x =&gt; x.SquareLength &lt; 4)
                                  .Take(MaxIterations)
                                  .Count() into count
// Map that to an appropriate byte value
select (byte)(count == MaxIterations ? 0 : (count % 255) + 1); 
</code></pre>
"	22656.0	Jon Skeet				2009-02-13 13:24:52				0			
589591	2		589570.0	2009-02-26 08:03:23		0		"<p>If you want to get the parents along with whether all its childrens are active.</p>

<pre><code>from p in MyContext.Parents
select new
{
   p,
   ChildrensActive = p.Childrens.All(c=&gt; c.IsActive)
}
</code></pre>
"	66372.0	Freddy Rios				2009-02-26 08:03:23				0			
599221	2		396513.0	2009-03-01 03:54:56		0		"<p>You can always do this for thread safety ,it will probably perform better in a lot of instances as there is no locking of the collection ( its a copy) . Note this means you do the LINQ or foreach not on the collection but on a member.</p>

<pre><code>  public IEnumerable&lt;ISubscription&gt; this[string topic] {
            get  { 
                rwlock.EnterReadLock();
                try {
                    return subscriptionsByTopic[GetTopic(topic)].ToArray&lt;ISubscription&gt;();              
                    //thread safe
                }
                finally {
                    rwlock.ExitReadLock();
                }
            }
        }
</code></pre>

<p>Also dont use IEnumerable for SOA/multi tier applications as you cant serialize interfaces ( without introducing lots of pain)  .WCF works better with List.</p>
"		Ben	5056.0	George Mauer	2009-03-09 14:27:10	2009-03-09 14:27:10				0			
652742	1	652749.0		2009-03-17 01:32:15		6	368.0	"<p>Linq is an awesome addition to .NET and I've found it has served me well in many situations even though I'm only beginning to learn about how to use Linq.</p>

<p>However, in the reading I've been doing about Linq, I've discovered that there are some subtle things a developer needs to keep an eye out for that can lead to trouble.</p>

<p>I've included one definite caveat that I've come across that is a result of deferred execution.</p>

<p>So I'm wondering, what other caveats exist for Linq that developers new to Linq should know about?</p>
"	39532.0	mezoid				2013-02-18 18:43:31	Linq Caveats	<.net><linq>	3.0	0	2.0		2009-03-17 01:32:15
777400	1	777412.0		2009-04-22 14:09:37		33	6722.0	"<p>What are the fundamental misunderstandings people have when they first start using LINQ? </p>

<p>For instance, do they think it is one thing when it is really something else? </p>

<p>And, are there some best practices to employ to avoid these mistakes?</p>
"	73794.0					2012-11-12 07:02:36	What is the biggest mistake people make when starting to use LINQ?	<.net><linq>	15.0	3	11.0	2016-11-15 00:52:21	
777459	2		777400.0	2009-04-22 14:22:14		2		"<p>LINQ as a language is pretty straight forward and not so unexpected, especially if you're familiar with functional programming.</p>

<p>The concept of <a href=""http://www.google.com/search?q=linq+deferred+execution"" rel=""nofollow noreferrer"">Deferred Execution</a> is probably the biggest gotcha, and one of the best features. When you use LINQ that returns an IQueryable it's important to remember you are NOT executing whatever code you just wrote. It isn't until you call one of the methods that produces some other result that the query is executed.</p>

<p>Also, in terms of the LINQ to SQL provider, the biggest gotcha I've found is the <a href=""http://jdconley.com/blog/archive/2007/11/28/linq-to-sql-surprise-performance-hit.aspx"" rel=""nofollow noreferrer"">performance cost</a>. Turns out there is significant CPU cost to constructing SQL queries that are incurred every time the LINQ query is ran, unless you pre-compile your highly trafficked queries.</p>
"	51769.0					2009-04-22 14:22:14				0			
8929047	2		8929024.0	2012-01-19 15:51:23		4		"<p>You can use the <a href=""http://msdn.microsoft.com/en-us/library/bb358985.aspx"" rel=""nofollow"">Skip(TSource)</a> extension method on any IEnumerable.</p>

<pre><code>var allButFirst = rows.Skip(1);
</code></pre>
"	383710.0					2012-01-19 15:51:23				0			
9166021	2		9165288.0	2012-02-06 19:30:07		0		"<p>You have to use <code>Contains</code> on the local sequence:</p>

<pre><code>Dim count = mydatacontext.table.Where(Function(sqlRec) _
                myList.[Select](Function(x) _ 
                   listItem.IdProperty.ToString()) _
                .Contains(sqlRec.guidIdField.ToString())).Count()
</code></pre>
"	468973.0		127257.0		2015-10-09 06:39:12	2015-10-09 06:39:12				0			
9223029	1			2012-02-10 05:13:19		-1	106.0	"<p>I am trying to convert the following sql statement into linq to entitys vb.net.  I have googled to no avail.  The sql removes duplicate residentkey records bringing back the top residentkey with the later version No.</p>

<pre><code>      SELECT * FROM   dbo.BI_Bond z
     WHERE z.id IN (SELECT TOP 1 x.id FROM dbo.BI_Bond x 
WHERE x.residentkey = z.residentkey ORDER BY Version DESC )
</code></pre>

<p>Any help would be much appreciated.</p>
"	631618.0		256431.0		2012-02-11 12:12:26	2012-02-11 12:12:26	convert a sql statement to linq to entity vb.net	<.net><linq>	2.0	0			
9845827	1	9845849.0		2012-03-23 20:04:41		0	1247.0	"<p>Here's a LINQ statement that I am trying to execute</p>

<pre><code>var usersQuery =
from user in Model.Users
select user.Plates;

var platesQuery =
from plate in usersQuery
group plate by plate.Time into grouping
select grouping;
</code></pre>

<p>I get the following error</p>

<pre><code>System.Collections.Generic.List&lt;AllYourPlates.Domain.Entities.Plate&gt;' does not contain a definition for 'Time' and no extension method 'Time' accepting a first argument of type 'System.Collections.Generic.List&lt;AllYourPlates.Domain.Entities.Plate&gt;' could be found (are you missing a using directive or an assembly reference?
</code></pre>

<p>I can't figure out what the problem is. </p>
"	72642.0					2012-03-23 20:06:33	System.Collections.Generic.List<Plate>' does not contain a definition for 'Time' and no extension method 'Time'	<.net><linq>	1.0	1			
10202478	2		10201383.0	2012-04-18 03:44:55		1		"<p>Your core algorithm currently is O(n^2) since you have two nested loops looking for matching characters. You can easily make that part O(n) by using a Dictionary that contains the character counts for each character in the <code>find</code> string:</p>

<pre><code>string find = ""find"";
var findMap = new Dictionary&lt;char, int&gt;();
foreach (char c in find)
{
    if (findMap.ContainsKey(c))
    {
        findMap[c] = findMap[c] + 1;
    }
    else
        findMap.Add(c, 1);
}
//findMap is pre-generated once

string word = ""pint"";
int count = 0;

//runs for each word in list, now in O(n)
foreach(char c in word)
{
    int charCount;
    if(findMap.TryGetValue(c, out charCount))
    {
        if(charCount &gt; 0)
        {
            charCount--;
            findMap[c] = charCount;
            count++;
        }
    }
}
</code></pre>
"	329769.0					2012-04-18 03:44:55				2			
10202629	2		10201383.0	2012-04-18 04:09:53		1		"<p>You can remove the <code>char.ToLower()</code> on fc if you ensure it's lower-cased before you start.</p>

<p>You could also try using <code>IndexOf()</code> to find the first (and then subsequent occurrences of the character) as the BCL implementation may internally be faster than you can manage with your own loop.</p>

<p>You could also try running your loops in reverse which can provide a speedup:</p>

<pre><code> for (int i = arr.Length - 1; i &gt;= 0; i--)
</code></pre>

<p>But really, for OCR why would you sum up matching characters from arbitrary positions in the string instead of doing a true edit distance like <a href=""http://en.wikipedia.org/wiki/Damerau%E2%80%93Levenshtein_distance"" rel=""nofollow"">Damerau-Levenshtein</a>?</p>
"	224370.0		224370.0		2012-04-18 04:18:27	2012-04-18 04:18:27				3			
10994422	2		10994383.0	2012-06-12 10:05:26		3		"<p>Sounds like you want something like:</p>

<pre><code>bool ContainsName(A a, string name)
{
    return a.name == name || a.minorList.Any(x =&gt; ContainsName(x, name));
}
</code></pre>

<p>Then:</p>

<pre><code>A a = majorList.First(x =&gt; ContainsName(x, name));
</code></pre>

<p>Of course you end up with a problem if there are any cycles in your lists...</p>
"	22656.0		22656.0		2012-06-12 10:28:42	2012-06-12 10:28:42				4			
11430856	2		10382343.0	2012-07-11 10:38:55		1		"<p>You can execute LINQ query on DataTable Or Specific table on DataSet with the help of the AsEnumerable.</p>

<p>Here is example this might be helpful.</p>

<pre><code>    DataSet ds = new DataSet();
    DataTable dt = new DataTable();
    DataColumn dc;
    DataRow dr;
    ds.DataSetName = ""products"";
    dt.TableName = ""product"";

    dc = new DataColumn(""product_id"",long.MaxValue.GetType());
    dt.Columns.Add(dc);

    dc = new DataColumn(""product_name"");
    dt.Columns.Add(dc);

    dr = dt.NewRow();
    dr[""product_id""] = 1;
    dr[""product_name""] = ""Monitor"";
    dt.Rows.Add(dr);

    dr = dt.NewRow();
    dr[""product_id""] = 2;
    dr[""product_name""] = ""Mouse"";
    dt.Rows.Add(dr);

    dr = dt.NewRow();
    dr[""product_id""] = 3;
    dr[""product_name""] = ""KeyBoard"";
    dt.Rows.Add(dr);

    dr = dt.NewRow();
    dr[""product_id""] = 4;
    dr[""product_name""] = ""LCD"";
    dt.Rows.Add(dr);

    ds.Tables.Add(dt);

    IEnumerable&lt;DataRow&gt; objResult1 = from tbl in dt.AsEnumerable()
                                   where tbl.Field&lt;long&gt;(0) &lt;= 2
                                   select tbl;

    Response.Write(""&lt;b&gt;Query Results 1&lt;/b&gt;"");
    foreach (DataRow row in objResult1)
    {
        Response.Write(string.Format(""&lt;br/&gt;Product ID: {0} ,  Product Name: {1}"", row.Field&lt;long&gt;(0), row.Field&lt;string&gt;(1)));
    }

    IEnumerable&lt;DataRow&gt; objResult2 = from tbl in ds.Tables[0].AsEnumerable()
                                   let product_name = tbl.Field&lt;string&gt;(1)
                                   where product_name.StartsWith(""Key"")
                                   || product_name.StartsWith(""Mo"")
                                   select tbl;

    Response.Write(""&lt;br/&gt;&lt;br/&gt;&lt;b&gt;Query Results 2&lt;/b&gt;"");
    foreach (DataRow row in objResult2)
    {
        Response.Write(string.Format(""&lt;br/&gt;Product ID: {0} ,  Product Name: {1}"", row.Field&lt;long&gt;(0), row.Field&lt;string&gt;(1)));
    }
</code></pre>
"	1282729.0		1288.0		2012-07-27 11:44:45	2012-07-27 11:44:45				0			
11523837	1	11523896.0		2012-07-17 13:45:14		3	5213.0	"<p>I have a list (<code>List&lt;T&gt;</code>) of objects <code>aList</code> and another list <code>bList</code>.</p>

<p>How to use Linq to delete all objects from <code>aList</code> contained in <code>bList</code>?</p>
"	185593.0					2012-07-17 14:01:32	LINQ: delete from a list elements contained in another list	<.net><linq>	4.0	0			
11543113	2		11543016.0	2012-07-18 13:57:45		1		"<p>It's called ""The Compiler"". If will let you use an anonymous type, without needing a formal class definition.</p>
"	3043.0					2012-07-18 13:57:45				2			
11868037	2		11867969.0	2012-08-08 15:31:23		2		"<p>What you have with your current code is an <em>Enumerable</em> that will iterate over exactly one item. You don't yet have the item itself. </p>

<p>Instead of <code>.Take(1)</code>, try using <code>.First()</code> or <code>.Single()</code>, or perhaps <code>.FirstOrDefault()</code> or <code>.SingleOrDefault()</code>. It's worth your time to lookup and read the documentation on each of those.</p>
"	3043.0					2012-08-08 15:31:23				0			
12122019	2		12121988.0	2012-08-25 12:35:20		1		"<p>Assuming you had an <code>IEnumerable&lt;int&gt;</code> called ids that contained the values you wanted to search for:</p>

<pre><code>var deals = r.FindBy()
            .Include(""DealSubcategories"")
            .Where(d =&gt; d.DealSubcategories.Any(s =&gt; ids.Contains(s.SubcategoryId)));
</code></pre>
"	519241.0					2012-08-25 12:35:20				1			
13339520	2		777400.0	2012-11-12 07:02:36		0		"<p>Understanding where you go from Linq2SQL/Entities to Linq2Objects.  Understanding what is and is-not being executed in the DB engine versus in your application.  Knowing when you are working with in-memory objects versus the underlying Linq provider that you are using, and then knowing how to intentionally transition from Linq2SQL to Linq2Objects whenever you need to perform post-query processing leveraging C#/.NET functions not supported in your provider.</p>
"	84206.0					2012-11-12 07:02:36				0			
13345937	2		13345853.0	2012-11-12 14:56:09		2		"<p>Move <code>Music music = new Music();</code> inside your <code>foreach</code> loop.</p>

<p>At the moment you're creating a single <code>Music</code> instance and adding it to the list multiple times. Every time you update it, every item in the list is affected because they're all the same item.</p>
"	215380.0					2012-11-12 14:56:09				1			
13623500	1			2012-11-29 10:18:49		1	44.0	"<p>I have three tables created as so:</p>

<p><img src=""https://i.stack.imgur.com/Vxxek.png"" alt=""enter image description here""></p>

<p>What I'd like to do is select an Attendee where an AdministratorAttendee record exists for a given AttendeeId and AdministratorId.</p>

<p>What I've tried is this:</p>

<pre><code>var result = (from a in dc.Attendees
              from aa in dc.AdministratorAttendees
              where aa.AdministratorId == this.CurrentAdminId &amp;&amp; a.AttendeeId == _attendee.AttendeeId
              select a);
</code></pre>

<p>But it's returning no results despite the fact an Attendee, Administrator and AdministratorAttendee record exists for the given Ids.</p>

<p>What is the correct linq query to use?</p>

<p>Thanks</p>
"	995337.0					2012-11-29 18:11:43	Having trouble with a many to many linq select	<.net><linq>	1.0	4			
13626518	2		13623500.0	2012-11-29 13:06:41		1		"<p>Did you try this way?</p>

<pre><code>var result = (from a in dc.Attendees
                  join aa in dc.AdministratorAttendees
                  on new { aa.AdministratorId, a.AttendeeId } equals 
                     new { this.CurrentAdminId, _attendee.AttendeeId } 
                  select a);
</code></pre>
"	350977.0		350977.0		2012-11-29 18:11:43	2012-11-29 18:11:43				2			
13741841	2		13741771.0	2012-12-06 10:40:05		4		"<p>Skip specifies a number of items to skip.</p>

<pre><code> myList.Skip(10)
</code></pre>

<p>SkipWhile allows you to supply a predicate function to determine how many to skip.</p>

<pre><code>myList.SkipWhile(x =&gt; x.Age &lt; 18)
</code></pre>

<p><code>Skip</code> Documentation: <a href=""http://msdn.microsoft.com/en-us/library/bb358985.aspx"" rel=""nofollow"">http://msdn.microsoft.com/en-us/library/bb358985.aspx</a></p>

<p><code>SkipWhile</code> Documentation: <a href=""http://msdn.microsoft.com/en-us/library/bb549075.aspx"" rel=""nofollow"">http://msdn.microsoft.com/en-us/library/bb549075.aspx</a></p>
"	863884.0		393908.0		2012-12-06 10:42:47	2012-12-06 10:42:47				0			
13926689	1			2012-12-18 05:11:59		0	72.0	"<p>I have a need to get 2 record types from a join out of LINQ.  I would prefer not to create a single amalgamated type out of the join because they both have about 2 dozen columns and I already have MVC model types defined to received types from each of the two tables.</p>

<p>So far, I have something like this:</p>

<pre><code>var qry = from recT1 in db.Tbl1
          join recT2 in db.Tbl2 on recT1.colA equals recT2.colA
          where recT1.colA != null
          select new { MyT1 = recT1, MyT2 = recT2 };
</code></pre>

<p>Then, I was trying to do something slick like:</p>

<pre><code>public class T1and2
{
    public T1Model T1 { get; set; }
    public T2Model T2 { get; set; }
}

T1and2[] aT12 = qry.Select( obj =&gt; new T1and2()
    {
        T1 = new T1Model(obj.MyT1),    //-- these ctors defined separately
        T2 = new T2Model(obj.MyT2)
    })
    .ToArray();
</code></pre>

<p>But this gives me a runtime <code>NotSupportedException</code> stating <code>""Only parameterless constructors are supported.""</code></p>

<p>My next step will be to simply create a for-loop to extract the model classes.  I was just trying to find out if there is a better way to make the transfer.</p>

<p><strong>ADD:</strong>
To add more clarity, I need to transfer the data from the recT? types to the T?Model types.  The T?Model types are model types that are adorned for MVC data display and formatting.  And one of the big things I'm trying to avoid is the same long list of property assignments at multiple places in the code.</p>
"	1726036.0		1726036.0		2012-12-18 16:34:15	2012-12-18 16:34:15	How can I get multiple record types out of LINQ?	<.net><linq>	2.0	3			
14157404	1	14158257.0		2013-01-04 12:41:23		3	1335.0	"<p>I'm trying to convert an SQL query to Linq and I get an exception:</p>

<p><em>System.NotSupportedException : Queries with local collections are not supported.</em></p>

<p>So is there a way to rephrase the query in a 'legal' way?</p>

<p>Thanks for any suggestions,</p>

<p>Anders, Denmark</p>

<h2>PS: I've seen the 'solution' to call .ToList() on any query before calling .Contains() -- but that would just result in four separate queries, right?</h2>

<p>At the bottom is my code that fails on execution.</p>

<p>The logical problem I'm trying to solve is to find the 'structures' that a user have access to, either by direct access or by membership of a group that has access. We do not have nested groups.</p>

<p>In other words, the user should have access if any of the following is true:</p>

<blockquote>
  <ul>
  <li>The user created the structure (id is 'stamped into' the structure record).</li>
  <li>An entry exists in the PermissionUsers table, linking the Permissions Table with the users table.</li>
  <li>an entry exists in the PermissionGroups table, linking the Permissions table with the Groups table and the user is referenced in
  the UsersGroups table, linking Users table with the Users table.</li>
  </ul>
</blockquote>

<p>Applying permissions/restricting result to accessible items is a relatively new thing and we would like the database to do the heavy pulling ;).</p>

<pre><code>[TestFixture]
public class LinqTest : CommandBasedIntegrationTestBase
{
    [Test, Category(""SuperIntegration""), RequiresSTAAttribute]
    public void TestThat()
    {
        DbIntegrationTestHelper.SetState();

        var dataContextProvider = ObjectFactory.GetInstance&lt;IDataContextProvider&gt;();

        const int userId = 1;

        var environment = ObjectFactory.GetInstance&lt;IState&gt;().DatabaseEnvironment;
        var dataClasses1DataContext = dataContextProvider.GetContext(environment);

        var idsByCreator = from r in dataClasses1DataContext.Structures where r.CreatedUserId == userId select r.StructureId;
        var idsByUserAccess = from r in dataClasses1DataContext.PermissionUsers where r.UserId == userId select r.StructureId;
        var idsOfGroupsContainingUser = from r in dataClasses1DataContext.UsersGroups where r.UserId == userId select r.GroupId;
        var idsByGroupAccess = from r in dataClasses1DataContext.PermissionGroups where idsOfGroupsContainingUser.Contains( r.GroupId ) select r.StructureId;


        var res = from s in dataClasses1DataContext.Structures
                  where
                      idsByCreator.Contains(s.StructureId) || 
                      idsByUserAccess.Contains(s.StructureId) ||
                      idsByGroupAccess.Contains(s.StructureId)
                  select s;

        foreach (var structure in res)
        {
            Debug.WriteLine(structure.Name);
        }
    }
}
</code></pre>
"	122985.0					2013-01-04 20:20:11	Linq - what to do when 'Queries with local collections are not supported'	<.net><linq>	2.0	0			
14307055	1	14307109.0		2013-01-13 19:05:56		-2	54.0	"<p>Here is a table I have got:</p>

<pre><code>ID  Name        Tid Quality     Quantity

40  903.02481-A.GEO 6   St3s        2   
41  903.02481-A.GEO 6   St3s        1   
42  903.02509-A.GEO 6   ST3S        1   
43  903.02942-A.GEO 6   ST3S        2   
44  903.02942-A.GEO 6   ST3S        4   
45  923.00186-B.GEO 6   ST3S        3   
46  924.03020-B.GEO 6   ST3S        1   
47  924.03021-A.GEO 6   ST3S        1   
48  924.03021-A.GEO 6   ST3S        1   
49  924.04082-C.GEO 6   ST3S        1
</code></pre>

<p>What I need is:</p>

<pre><code>40  903.02481-A.GEO 6   St3s        **3**   
42  903.02509-A.GEO 6   ST3S        1   
43  903.02942-A.GEO 6   ST3S        **6**   
45  923.00186-B.GEO 6   ST3S        3   
46  924.03020-B.GEO 6   ST3S        1   
47  924.03021-A.GEO 6   ST3S        **2**   
49  924.04082-C.GEO 6   ST3S        1
</code></pre>

<p>How to write LINQ query to get this?</p>
"	1974673.0					2013-01-13 19:12:18	How do I get the sum with LINQ	<.net><linq>	1.0	5	1.0		
14459857	2		14459760.0	2013-01-22 13:36:40		2		"<p>Use <code>Enumerable.Any</code> on your ""nested"" <code>LogDetails</code> list.</p>

<pre><code>List&lt;Log&gt; failedLogs = logs
            .Where(l =&gt; l.LogDetails.Any(ld =&gt; ld.LogStatus==LogStatus.Failed))
            .ToList();
</code></pre>

<p>This returns all logs where at least one log-detail has <code>LogStatus.Failed</code>.</p>

<p>Here's a <a href=""http://ideone.com/AJsC0M"" rel=""nofollow""><strong>Demo</strong></a>.</p>
"	284240.0		284240.0		2013-01-22 13:54:05	2013-01-22 13:54:05				5			
14529316	2		14529154.0	2013-01-25 19:49:16		4		"<p>Using their example:</p>

<pre><code>string[] words = { ""aPPLE"", ""AbAcUs"", ""bRaNcH"", ""BlUeBeRrY"", ""ClOvEr"", ""cHeRry"" }; 

var sortedWords = words.OrderBy(a =&gt; a, new CaseInsensitiveComparer()); 
</code></pre>

<p>if you want to shorten it to</p>

<pre><code>var sortedWords = words.OrderBy(new CaseInsensitiveComparer());
</code></pre>

<p>You could create another extension method that bypasses the Lambda:</p>

<pre><code>public static IOrderedEnumerable&lt;T&gt; OrderBy&lt;T&gt;(this IEnumerable&lt;T&gt; source, IComparer&lt;T&gt; comparer)
{
    return source.OrderBy(a=&gt;a, comparer);
}
</code></pre>

<p>Either way, it is (in my opinion) not a big enough gain (8 characters saved?) to bypass the standard lambda syntax.  </p>
"	1081897.0		1081897.0		2013-01-25 20:02:08	2013-01-25 20:02:08				2			
15514413	1	15515935.0		2013-03-20 02:50:18		2	211.0	"<p>Not the most important question in the world but as a soon graduate I figured I would like to have this knowledge going forward. Having said that, how does LINQ find the data I need based on the conditions I provide behind the scenes?</p>

<p>Consider:</p>

<pre><code>String[] straAr = {""Jordan"",""Jansyn"",""Corey"",""Josh"",""Whitney""};

var sel = from S in straAr
    where S.Contains(""syn"")
    select S;
</code></pre>

<p>This will, of course, result in ""Jansyn"". Before I was introduced to LINQ, I would have done this:</p>

<pre><code>String[] straAr = {""Jordan"",""Jansyn"",""Corey"",""Josh"",""Whitney""};

foreach(String s in straAr)
{
    if(s.Contains(""syn""))
    {
        Console.WriteLine(s);
    }
}
</code></pre>

<p>They both work, though I think LINQs implementation is much more elegant. Can anyone tell me:</p>

<ul>
<li><p><strong>How does LINQ query a data structure behind the scenes? Foreach?</strong></p></li>
<li><p><strong>Is one implementation more efficient than the other?</strong></p></li>
</ul>

<p>As always, thanks for any input!</p>
"	1414028.0		41071.0		2013-03-20 12:01:25	2013-03-20 12:01:25	Does LINQ iterate behind the scenes?	<.net><linq>	1.0	3	1.0	2014-04-03 01:52:52	
15515935	2		15514413.0	2013-03-20 05:19:45		3		"<p>I think the best way to learn about LINQ internals is by actually looking at the code. Well, you will not be able to look at the original code, but <a href=""http://msmvps.com/blogs/jon_skeet/archive/tags/Edulinq/default.aspx"" rel=""nofollow"">Edulinq</a> is really a great re-implementation of its full functionality for educational purposes.</p>

<p>To answer at least a part of your questions directly:</p>

<ul>
<li>No LINQ typically doesn't use foreach internally. Most of the time, <a href=""http://msdn.microsoft.com/de-de/library/system.collections.ienumerator%28v=vs.80%29.aspx"" rel=""nofollow"">enumerators</a> are used directly because this allows for a finer control of what's going on</li>
<li>In general, the second implementation will be more efficient because LINQ offers some additional features (such as laziness) which complicate the generated code a bit. However, this is hardly ever relevant in praxis</li>
</ul>
"	2073479.0					2013-03-20 05:19:45				0			
15902823	1	15902982.0		2013-04-09 13:07:54		0	108.0	"<p>I need to iterate two ordered <code>IEnumerable</code>-s, <code>a</code> and <code>b</code>, ordered by a given <code>IComparer</code>, ""side-by-side"", and <code>Zip</code> equal elements (equal according to the same <code>IComparer</code>).</p>

<p>I need to <code>Zip</code> all the elements without a match in the other collection with <code>null</code> (or <code>default</code> value, whatever).</p>

<p><em>By <code>Zip</code>ping I mean ""return a collection of <code>f()</code> call results, where <code>f()</code> is a given closure taking 2 parameters, one from <code>a</code> and one from <code>b</code>"".</em></p>

<p><code>a</code> and <code>b</code> can have different amount of elements, and don't have to match 1:1.</p>

<p>For example:</p>

<pre><code>IComparer comparer = ...;

int[] a = { 1, 2, 4, 7, 7 };
int[] b = { -1, 1, 3, 4, 7, 8 };

var zipped = EvenMoreLinq.ZipEqual(a, b, comparer, (a, b) =&gt; new int[]{ a, b });
</code></pre>

<p>I expect <code>zipped</code> to be:</p>

<pre><code>{ {0, -1}, {1, 1}, {2, 0}, {0, 3}, {4, 4}, {7, 7}, {7, 0}, {0, 8} };
</code></pre>

<p>Equal elements in <code>a</code> and <code>b</code> should be matched as much as there is a matching element in the other collection.</p>

<p>It is desirable for output collection to maintain the source order.</p>

<p>Does a library implementation of such exist?</p>
"	207791.0		207791.0		2013-06-05 10:53:58	2013-06-06 08:41:37	Given IComparer, Zip two ordered IEnumerable-s, pairing only equal elements?	<.net><linq>	2.0	7			
16109130	2		9280349.0	2013-04-19 16:18:55		0		"<p>I have started to go down this road with some initial success. For me, the key was transforming parts of the expressions that referenced <code>A.MemberOfA</code> to expressions that reference <code>B.MemberOfB</code>. For example, say you have a business object <code>A</code>:</p>

<pre><code>class A { public bool Selected { get; set; } }
</code></pre>

<p>and a data object (entity) <code>B</code>:</p>

<pre><code>class B { public int SelectedInd { get; set; } }
</code></pre>

<p>As you can see, in the database, the selected state of <code>B</code> is defined by an indicator <code>int</code>. If you want to get all the selected <code>A</code>s, you might have a predicate:</p>

<pre><code>Expression&lt;Func&lt;A, bool&gt;&gt; aPredicate = a =&gt; a.Selected;
</code></pre>

<p>Now you need to execute that predicate on your entity set. Maybe your business rule is a <code>B</code> is selected if <code>SelectedInd &gt; 0</code>:</p>

<pre><code>Expression&lt;Func&lt;B, bool&gt;&gt; bPredicate = b =&gt; b.SelectedInd &gt; 0;
</code></pre>

<p>For me, the trick was the <a href=""http://msdn.microsoft.com/en-us/library/system.linq.expressions.expressionvisitor.aspx"" rel=""nofollow"">ExpressionVisitor</a> class. By extending this class and overriding the <code>Visit</code> method, you can replace the parts that reference <code>A</code> and <code>A.Selected</code> with references to <code>B</code> and <code>B.SelectedInd &gt; 0</code>:</p>

<pre><code>class ExpressionTranslator : ExpressionVisitor
{
    public Expression&lt;Func&lt;B, bool&gt;&gt; TranslatePredicate(Expression&lt;Func&lt;A, bool&gt;&gt; predicate)
    {
        return (Expression&lt;Func&lt;B, bool&gt;&gt;)this.Visit(predicate);
    }

    public override Expression Visit(Expression exp)
    {
        if (exp is Expression&lt;Func&lt;A, bool&gt;&gt;)
        {
            Expression&lt;Func&lt;A, bool&gt;&gt; predicate = (Expression&lt;Func&lt;A, bool&gt;&gt;)exp;
            Expression body = this.Visit(predicate.Body);
            ParameterExpression parameter = (ParameterExpression)this.Visit(predicate.Parameters[0]);
            return Expression.Lambda&lt;Func&lt;B, bool&gt;&gt;(body, parameter);
        }
        else if (exp is ParameterExpression)
        {
            ParameterExpression param = (ParameterExpression)exp;
            if (param.Type == typeof(A))
                return bPredicate.Parameters[0];
        }
        else if (exp is MemberExpression)
        {
            MemberExpression mbrExpr = (MemberExpression)exp;
            if (mbrExpr.Member == typeof(A).GetProperty(""Selected""))
                return this.Visit(bPredicate.Body);
        }
        else
            return base.Visit(exp);
    }
}
</code></pre>

<p>Of course, you can imagine making this logic more generic. In my own implementation, I register objects mapping selectors so that <code>ExpressionTranslator.Visit</code> dynamically selects the expressions to return based on <code>exp</code>.</p>

<p>Hope this helps.</p>
"	2295885.0		2295885.0		2013-04-19 16:25:42	2013-04-19 16:25:42				0			
16939330	2		15902823.0	2013-06-05 11:57:05		1		"<p><strong>EDIT</strong></p>

<p>The grouping can be avoided but the result is obviously similar to <a href=""https://stackoverflow.com/a/15902982/659190"">Daniel's answer.</a></p>

<pre><code>public static IEnumerable&lt;Tuple&lt;T, T&gt;&gt; ZipEqual&lt;T&gt;(
    this IEnumerable&lt;T&gt; source,
    IEnumerable&lt;T&gt; other,
    IComparer&lt;T&gt; comparer = null)
{
    if (other == null)
    {
        throw new ArgumentNullException(""other"");
    }

    if (comparer == null)
    {
        comparer = Comparer&lt;T&gt;.Default;
    }

    var first = source.OrderBy(t =&gt; t, comparer).GetEnumerator();
    var second = other.OrderBy(t =&gt; t, comparer).GetEnumerator();

    var firstMore = first.MoveNext();
    var secondMore = second.MoveNext();

    while (firstMore &amp;&amp; secondMore)
    {
        var comp = comparer.Compare(first.Current, second.Current);

        if (comp == 0)
        {
            yield return Tuple.Create(first.Current, second.Current);
            firstMore = first.MoveNext();
            secondMore = second.MoveNext();
            continue;
        }

        if (comp &gt; 0)
        {
             yield return Tuple.Create(default(T), second.Current);
             secondMore = second.MoveNext();
             continue;
        }

        yield return Tuple.Create(first.Current, default(T));
        firstMore = first.MoveNext();
    }

    while (firstMore)
    {
        yield return Tuple.Create(first.Current, default(T));
        firstMore = first.MoveNext();
    }

    while (secondMore)
    {
        yield return Tuple.Create(default(T), second.Current);
        secondMore = second.MoveNext();
    }
}
</code></pre>

<hr>

<p>How about,</p>

<pre><code>public static IEnumerable&lt;Tuple&lt;T, T&gt;&gt; ZipEqual&lt;T&gt;(
    this IEnumerable&lt;T&gt; source,
    IEnumerable&lt;T&gt; other,
    IComparer&lt;T&gt; comparer = null)
{
    if (other == null)
    {
        throw new ArgumentNullException(""other"");
    }

    if (comparer == null)
    {
        comparer = Comparer&lt;T&gt;.Default;
    }

    var orderedGroups =
        source.Select(t =&gt; new { Value = t, First = true })
            .Concat(other.Select(t =&gt; new { Value = t, First = false }))
            .ToLookup(a =&gt; a.Value)
            .OrderBy(l =&gt; l.Key, comparer);

    foreach (var group in orderedGroups)
    {
        var firsts = group.Where(a =&gt; a.First).Select(a =&gt; a.Value).ToList();
        var seconds = group.Where(a =&gt; !a.First).Select(a =&gt; a.Value).ToList();

        var limit = Math.Max(firsts.Count, seconds.Count);
        for (var i = 0; i &lt; limit; i++)
        {
            yield return Tuple.Create(
                firsts.ElementAtOrDefault(i),
                seconds.ElementAtorDefault(i));
        }
    }
}
</code></pre>
"	659190.0		-1.0		2017-05-23 12:28:57	2013-06-06 08:41:37				1			
17481991	2		17481156.0	2013-07-05 05:57:03		0		"<p>Alright then, this seems to be a straightforward custom sort with the twist that the ordering constraint doesn't form a total order (only a partial one). This should do the trick:</p>

<pre><code>var sorted = myList.OrderBy(x =&gt; x, new CustomComparer()).ToList();

class CustomComparer : IComparer&lt;myObj&gt;
{
    public int Compare(myObj a, myObj b)
    {
        return a.ParentName == b.Name ? 1 : a.Name == b.ParentName ? -1 : 0;
    }
}
</code></pre>

<p>(Of course, you need to make sure there's no children that are their own grandparents for this to work properly.)</p>
"	21475.0					2013-07-05 05:57:03				0			
18290681	1	18290782.0		2013-08-17 15:57:54		0	191.0	"<p>Is there a solution in linq to get an element from an array and if it is out of range return a default value?</p>

<pre><code>static void Main(string[] args)
{
    var arr = new int[] { 5, 4, 8 };
    //Console.WriteLine(""{0}"", arr[5] ?? 6);
    //nah Console.WriteLine(""{0}"", arr.GetElementOrNull(5) ?? 6);
    Console.WriteLine(""{0}"", arr.GetElementOrValue(5, 6));
}
</code></pre>
"		user34537		user34537	2013-08-17 16:07:57	2013-08-17 16:14:45	Get element or default value?	<.net><linq>	2.0	2			
21001318	2		21000917.0	2014-01-08 16:33:48		0		"<p>Another possibility:</p>

<pre><code>var items = companies.Where( cpy =&gt; cpy != src &amp;&amp; cpy != plyr.PowerUpInAction.Passenger.Destination );
Company dest = items.First();
int min = int.MaxValue;
foreach( var company in items )
{
    int r = rand.Next();
    if( r &lt; min )
    {
        min = r;
        dest = company;
    }
}
</code></pre>

<p>This avoids sorting the entire list as well as constructing a new list.  It's still linear in the size of the list (since we have to evaluate what elements are valid).</p>
"	2779530.0					2014-01-08 16:33:48				0			
23406909	2		2724096.0	2014-05-01 11:36:41		5		"<p>You can try simple example to get difference.
Exception will thrown on line 3;</p>

<pre><code>        List&lt;int&gt; records = new List&lt;int&gt;{1,1,3,4,5,6};
        var record = records.First(x =&gt; x == 1);
        record = records.Single(x =&gt; x == 1);
</code></pre>
"	3139815.0					2014-05-01 11:36:41				0			
23454116	2		23440589.0	2014-05-04 08:26:36		1		"<p>Seems there is a limit in the <code>Jet engine</code> on how many <code>ANDs</code> you can have in a <code>SQL</code> statement.</p>

<p>This <a href=""http://blogs.msdn.com/b/spike/archive/2009/02/06/getting-query-is-too-complex-or-expression-is-too-complex-when-using-access.aspx"" rel=""nofollow"">article </a> can be useful.</p>
"	248703.0		855728.0		2014-05-04 08:47:22	2014-05-04 08:47:22				0			
24009496	2		12972295.0	2014-06-03 07:34:06		59		"<p>You can use <a href=""http://msdn.microsoft.com/en-us/library/vstudio/bb355419%28v=vs.100%29.aspx"">DefaultIfEmpty</a> followed by <a href=""http://msdn.microsoft.com/en-us/library/vstudio/bb291976%28v=vs.100%29.aspx"">First</a>:</p>

<pre><code>T customDefault = ...;
IEnumerable&lt;T&gt; mySequence = ...;
mySequence.DefaultIfEmpty(customDefault).First();
</code></pre>
"	2519151.0					2014-06-03 07:34:06				2			
26172648	2		2724096.0	2014-10-03 02:56:01		27		"<p><strong>Single()</strong></p>

<blockquote>
  <p>Returns a single specific element of a query</p>
  
  <p><strong><em>When Use</strong>: If exactly 1 element is expected; not 0 or more than 1. If the list is empty or has more than one element, it will throw an Exception ""Sequence contains more than one element""</em></p>
</blockquote>

<p><strong>SingleOrDefault()</strong></p>

<blockquote>
  <p>Returns a single specific element of a query, or a default value if no result found</p>
  
  <p><strong><em>When Use</strong>: When 0 or 1 elements are expected. It will throw an exception if the list has 2 or more items.</em></p>
</blockquote>

<p><strong>First()</strong></p>

<blockquote>
  <p>Returns the first element of a query with multiple results.</p>
  
  <p><strong><em>When Use</strong>:  When 1 or more elements are expected and you want only the first. It will throw an exception if the list contains no elements.</em></p>
</blockquote>

<p><strong>FirstOrDefault()</strong></p>

<blockquote>
  <p>Returns the first element of a list with any amount of elements, or a default value if the list is empty.</p>
  
  <p><strong><em>When Use</strong>: When multiple elements are expected and you want only the first. Or the list is empty and you want a default value for the specified type, the same as <code>default(MyObjectType)</code>. For example: if the list type is <code>list&lt;int&gt;</code> it will return the first number from the list or 0 if the list is empty. If it is <code>list&lt;string&gt;</code>, it will return the first string from the list or null if the list is empty.</em></p>
</blockquote>
"	484222.0		484222.0		2016-08-13 09:48:55	2016-08-13 09:48:55				1			
28000189	2		27999496.0	2015-01-17 13:56:58		1		"<p>Given this mock-up:</p>

<pre><code>List&lt;A&gt; ListOfA = new List&lt;A&gt;()
{
    new A { Id = 1 }, new A { Id = 2 }, new A { Id = 3 }
};

List&lt;B&gt; ListOfB = new List&lt;B&gt;()
{
    new B { ClassCId = 10, ClassBFirstString = ""a""},
    new B { ClassCId = 11, ClassBFirstString = ""b""},
    new B { ClassCId = 12, ClassBFirstString = ""c""}
};

List&lt;C&gt; ListOfC = new List&lt;C&gt;()
{
    new C { Id = 10, ClassAId = 1},
    new C { Id = 11, ClassAId = 1},
    new C { Id = 11, ClassAId = 3},
    new C { Id = 12, ClassAId = 3}
};
</code></pre>

<p>this implementation of method <code>IEnumerable&lt;A&gt; GetAllAbyClassBFirstStringFunction</code>:</p>

<pre><code>public static IEnumerable&lt;A&gt; GetAllAbyClassBFirstStringFunction(string strg)
{
    var q = from a in ListOfA
            join c in ListOfC on a.Id equals c.ClassAId
            join b in ListOfB on c.Id equals b.ClassCId
            where b.ClassBFirstString == strg
            select a;

    return q;
}
</code></pre>

<p>when invoked like this:</p>

<pre><code>var q = GetAllAbyClassBFirstStringFunction(""b"");
</code></pre>

<p>return the following result:</p>

<p><code>[0] = {ConsoleApplication1.A}</code> with <code>Id = 1</code></p>

<p><code>[1] = {ConsoleApplication1.A}</code> with <code>Id = 3</code></p>
"	2149718.0		2149718.0		2015-01-17 14:09:14	2015-01-17 14:09:14				0			
30179537	2		30178491.0	2015-05-11 23:59:36		0		"<p>It seems rather like a trivial exercise if you introduce an anonymous intermediate object.</p>

<p>Try this:</p>

<pre><code>var lookup =
    sequence
        .Select(x =&gt; new { x.Key, x.Value })
        .Distinct()
        .ToLookup(x =&gt; x.Key, x =&gt; x.Value);
</code></pre>

<p>Since you can call <code>.Distinct()</code> on anonymous variables then this should work just fine.</p>
"	259769.0					2015-05-11 23:59:36				0			
31173904	2		6961727.0	2015-07-02 00:44:06		1		"<p>To help anyone out there with similar requirements, I've written a series of tutorials on how to create a simple LINQ provider, parse expression trees, convert them into the desired output (e.g. SQL) and compile. Having developed one such provider for a production system, I eventually thought the experience might help someone else, with the challenge being to find the time to put it into writing. I've greatly benefited in the past from others sharing their knowledge, especially on subjects where it is scarce, so, hopefully, this may also find an audience:</p>

<ul>
<li><a href=""http://www.devbible.com/post/15/How_to_write_a_LINQ_to_SQL_provider_in_C_sharp_and_NET_40_part_1_of_4/"" rel=""nofollow"">How to write a LINQ to SQL provider in C# Part 1 - Introduction</a></li>
<li><a href=""http://www.devbible.com/post/16/How_to_write_a_LINQ_to_SQL_provider_in_C_sharp_and_NET_40_part_2_of_4-expression_visitor/"" rel=""nofollow"">How to write a LINQ to SQL provider in C# Part 2 - Expression Visitor</a></li>
<li><a href=""http://www.devbible.com/post/17/How_to_write_a_LINQ_to_SQL_provider_in_C_sharp_and_NET_40_part_3_of_4-where_clause_visitor/"" rel=""nofollow"">How to write a LINQ to SQL provider in C# Part 3 - Where Clause Visitor</a></li>
<li><a href=""http://www.devbible.com/post/18/How_to_write_a_LINQ_to_SQL_provider_in_C_sharp_and_NET_40_part_4_of_4-compiling_expression_trees/"" rel=""nofollow"">How to write a LINQ to SQL provider in C# Part 4 - Compiling Expression Trees</a></li>
</ul>
"	1509606.0					2015-07-02 00:44:06				0			
31904808	2		2724096.0	2015-08-09 13:37:25		8		"<p>Regarding peformance: A coworker and I were discussing the performance of Single vs First (or SingleOrDefault vs FirstOrDefault), and I was arguing for the point that First (or FirstOrDefault) would be faster and improve performance (I’m all about making our app run faster).</p>

<p>I’ve read several posts on Stack Overflow that debate this. Some say there are small performance gains using First instead of Single. This is because First would simply return the first item while Single must scan all the results to make sure there isn’t a duplicate (ie: if it found the item in the first row of the table, it still would scan every other row to make sure there isn’t a second value matching the condition which would then throw an error).  I felt like I was on solid ground with “First” being faster than “Single” so I set out to prove it and put the debate to rest.</p>

<p>I setup a test in my database and added 1,000,000 rows of 
    ID  UniqueIdentifier
    Foreign UniqueIdentifier
    Info nvarchar(50)  (filled with strings of numbers “0” to “999,9999” </p>

<p>I loaded the data and set ID as a primary key field.</p>

<p>Using LinqPad, my goal was to show that if you searched for a value on ‘Foreign’ or ‘Info’ using Single, that it would be much worse than using First.</p>

<p>I cannot explain the results I got. In almost every case, using Single or SingleOrDefault was slightly faster.  This doesn’t make any logical sense to me, but I wanted to share that.</p>

<p>Ex: I used the following queries:</p>

<pre><code>var q = TestTables.First(x=&gt;x.Info == ""314638"") ;
//Vs.
Var q = TestTables.Single(x=&gt;x.Info ==""314638"") ; //(this was slightly faster to my surprise)
</code></pre>

<p>I tried similar queries on the 'Foreign' key field which was not indexed thinking that would prove First is faster, but Single was always slightly faster in my tests.</p>
"	2643737.0					2015-08-09 13:37:25				3			
33418196	2		5031726.0	2015-10-29 15:21:02		6		"<p>While the existing answers are correct, none of them point out <strong>why</strong> you'd want to use TakeWhile if the results would be the same: Performance.  Suppose you have an ordered list with 2 billion items in it, and you want the ones that (probably 10 or 15 items) less than a given vallue. The Where clause will examine all 2 billion items, while the TakeWhile will stop as soon as it finds a value equal or greater than your supplied value</p>
"	234954.0					2015-10-29 15:21:02				0			
36322037	1			2016-03-31 00:14:33		0	55.0	"<p>Suppose I have a list of database records like this :</p>

<pre><code>Warehouse   goods

A           apple

A           orange

B           apple

B           banana
</code></pre>

<p>Is it possible using linq to select into two objects say object A and object B each contains a collection of its goods?</p>
"		user3983823	390278.0		2016-03-31 00:20:47	2016-03-31 05:34:21	Linq select into objects containing collection type variables	<.net><linq>	3.0	1			
36322346	2		36298284.0	2016-03-31 00:51:08		1		"<p>You can use the extension method <a href=""https://msdn.microsoft.com/en-us/library/system.linq.enumerable.selectmany(v=vs.100).aspx"" rel=""nofollow""><code>SelectMany</code></a></p>

<p>One example might be:</p>

<pre><code>IEnumerable&lt;IQueryable&lt;IEnumerable&lt;IList&lt;MyDomain&gt;&gt;&gt;&gt; domains = GetDomains();

IList&lt;MyDomain&gt; concatenatedDomains = domains.SelectMany(a =&gt; 
                                          a.SelectMany(b =&gt; 
                                              b.SelectMany(
                                                  c =&gt; c.Select(d =&gt; 
                                                      d))).ToList();
// OR
IList&lt;MyDomain&gt; concatenatedDomains = (from a in domains
                                       from b in a
                                       from c in b
                                       from d in c
                                       select d).ToList()
</code></pre>
"	465056.0		465056.0		2016-03-31 00:57:45	2016-03-31 00:57:45				0			
38307706	1	38307827.0		2016-07-11 13:03:42		2	169.0	"<p>im new to linq. and I'm having problem extracting the value of each column from a single row..here's my code.</p>

<pre><code>var websitedetail = (from x in dt.AsEnumerable()
                    where x[""CYBER_TY""].ToString() == ""WEBSITE""
                    select x).FirstOrDefault();

        var test2 = websitedetail.Field&lt;int&gt;(""CYBER_SERNO"");
</code></pre>

<p>dt is a datatable with a source from database sp.this gives me a specified cast is not valid. I tried convert.toint32 </p>

<p>thank you</p>
"	2651699.0					2016-07-11 13:28:50	how to get the row value of each column from linq	<.net><linq>	2.0	2	1.0		
40235929	2		40232183.0	2016-10-25 09:12:44		0		"<p>You are new to LINQ I guess, I would recommend you to create a free account in below mentioned website and watch the video for few hours. You feel excited about LINQ.</p>

<p>Website : <strong>www.pluralsight.com</strong>
Search for :<strong>LINQ Fundamentals with C# 6.0</strong>, by Scott Allen</p>

<p>There you will find a clear , correct answer to your question.</p>
"	3068718.0					2016-10-25 09:12:44				0			
40750073	2		40749064.0	2016-11-22 19:26:45		3		"<p>You're binding the repeater to list of strings. Change the binder expression to:</p>

<pre><code>&lt;ItemTemplate&gt;
    &lt;%# Container.DataItem?.ToString() ?? string.Empty%&gt;
&lt;/ItemTemplate&gt;
</code></pre>
"	881798.0					2016-11-22 19:26:45				5			
42818886	1	42830954.0		2017-03-15 19:21:41		1	48.0	"<p>This is the SQL query I am trying to convert into a LINQ query:</p>

<pre><code>SELECT
    ContactID,
    COUNT (ls.SoldToContactID) AS Count
FROM
    Contacts c
    LEFT OUTER JOIN LeadSales ls on c.ContactID = ls.SoldToContactID
GROUP BY 
    c.ContactID
</code></pre>

<p>I'm getting the results expected from <code>leadSales</code>, but I am not picking up any of the rows from <code>contacts</code> that have no match in <code>leadSales</code>.</p>

<pre><code>var leadSales = (IQueryable of the LeadSales table)
var contacts = (IQueryable of the Contacts table)

BuyerList = from ls in leadSales
    join contact in contacts on ls.SoldToContactID equals contact.ContactID into sb
    from subBuyer in sb.DefaultIfEmpty()
        group ls by new {
            subBuyer.ContactID,
            FirstName = subBuyer.FirstName,
            LastName = subBuyer.LastName
        } into g
        select new LeadBuyersByStateItem
        {
            ContactID = g.Key.ContactID,
            Name = g.Key.LastName + "", "" + g.Key.FirstName,
            LeadsCount = g.Count()
        };
</code></pre>

<p><strong>EDIT:</strong></p>

<p>Based on feedback from Ivan, I now have this:</p>

<pre><code>BuyerList = from contact in contacts
                        join ls in leadSales on contact.ContactID equals   ls.SoldToContactID into c_ls
                        from ls in c_ls.DefaultIfEmpty()
                        group contact by new
                        {
                            ls.Contact.ContactID,
                            FirstName = ls.Contact.FirstName,
                            LastName = ls.Contact.LastName
                        } into g
                        select new LeadBuyersByStateItem
                        {
                            ContactID = g.Key.ContactID,
                            Name = g.Key.LastName + "", "" + g.Key.FirstName,
                            LeadsCount = g.Count()
                        };
</code></pre>

<p>But, this is throwing this error:</p>

<blockquote>
  <p>The cast to value type 'System.Int32' failed because the materialized value is null. Either the result type's generic parameter or the query must use a nullable type.</p>
</blockquote>
"	1840823.0		1840823.0		2017-03-15 20:01:40	2017-03-16 10:10:10	Not getting LEFT JOIN query in LINQ to pick up empty rows	<.net><linq>	1.0	10			
45128096	1			2017-07-16 11:36:46		-2	63.0	"<p>I have an array of objects of type A:</p>

<pre><code>A[] ar
</code></pre>

<p>How can I insert a new object <code>a</code> into the array <strong>at index i</strong> using LINQ?</p>

<p>Thanks a lot.</p>
"	844136.0					2017-07-16 18:59:19	How to insert a new object into array using LINQ	<.net><linq>	1.0	5	0.0		
48901721	1	48909142.0		2018-02-21 08:59:44		0	163.0	"<p>I have two tables, let it be A and B. A is the primary table and B is the secondary. My need is to get when I join A and B the latest row from B for corresponding value of A and order by B's Primary key by using linq
    Table A
    A_id     Value 
    1      a1
    2      b1</p>

<pre><code>Table B
B_Id   values    A_id
1    123        1
2    456        1
3    789        2
4    321        2

Result should be 

A_id  name B_Id
2   b1     4
1   a1     2
</code></pre>

<p>My current code only returns in the reverse order. I know code has some syntax error please don't consider it</p>

<pre><code>from a in db.A
join b in db.b on a.A_Id equals b.B_Id into tem 
from b in tem.Take(1) orderby chat.Ch_IdNo descending
</code></pre>
"	6848066.0		1000551.0		2018-02-21 09:11:14	2018-02-21 15:12:48	Linq join get latest value from second table	<.net><linq>	2.0	0			
48909142	2		48901721.0	2018-02-21 15:04:58		2		"<p>I prefer to use <code>Max</code> instead of <code>OrderByDescending</code>/<code>First</code>, though I'm not sure which is more performant, or which would be best with SQL or EF.</p>

<p>So you can group join TableA to TableB and then find the maximum (latest?) B_Id from the joined group and return that.</p>

<pre><code>var ans = from a in TableA
          join b in TableB on a.A_id equals b.A_id into bj
          let maxB_Id = bj.Max(b =&gt; b.B_Id)
          select new { a, b = bj.First(b =&gt; b.B_Id == maxB_Id) };
</code></pre>

<p>In lambda syntax:</p>

<pre><code>var ansl = TableA.GroupJoin(TableB, a =&gt; a.A_id, b =&gt; b.A_id, (a, bj) =&gt; new { a, b = bj.First(b =&gt; b.B_Id == bj.Max(b2 =&gt; b2.B_Id)) });
</code></pre>

<p><strong>NOTE:</strong> This recomputes the <code>Max</code> per member of <code>bj</code>, while the <code>let</code> uses a hidden <code>select</code> to pass the value on. You can modify the lambda to use a full body to avoid this:</p>

<pre><code>var ansl = TableA.GroupJoin(TableB, a =&gt; a.A_id, b =&gt; b.A_id, (a, bj) =&gt; {
                                var maxB_Id = bj.Max(b2 =&gt; b2.B_Id);
                                return new { a, b = bj.First(b =&gt; b.B_Id == maxB_Id) };
                            });
</code></pre>

<p>If you are okay with <code>OrderByDescending</code> you can use group join for that as well:</p>

<pre><code>var ans2 = from a in TableA
           join b in TableB on a.A_id equals b.A_id into bj
           select new { a, b = bj.OrderByDescending(b =&gt; b.B_Id).First() };
</code></pre>

<p>In lambda syntax:</p>

<pre><code>var ans2l = TableA.GroupJoin(TableB, a =&gt; a.A_id, b =&gt; b.A_id, (a, bj) =&gt; new { a, b = bj.OrderByDescending(b =&gt; b.B_Id).First() });
</code></pre>
"	2557128.0		2557128.0		2018-02-21 15:12:48	2018-02-21 15:12:48				0			
50544598	2		50544269.0	2018-05-26 16:01:06		2		"<p>Here's my variant:</p>

<pre><code>using System;
using System.Linq;

namespace TagsSplitExample
{
    public class Product
    {
        public bool Active { get; set; }
        public string Tags { get; set; }
    }

    class Program
    {
        static void Main(string[] args)
        {
            var products = new[]
            {
                new Product{ Active = true, Tags = ""Tag1""},
                new Product{ Active = true, Tags = ""Tag1#Tag2""},
                new Product{ Active = true, Tags = ""Tag1#Tag2#Tag3""},
            };

            var allTags = products
                .Where(p =&gt; p.Active &amp;&amp; p.Tags != null)
                .Select(p =&gt; p.Tags)
                .Select(tags =&gt; tags.Split('#'))
                .SelectMany(tag =&gt; tag)
                .GroupBy(tag =&gt; tag)
                .Select(group =&gt; new { Tag = group.Key, Count = group.Count() })
                .OrderByDescending(pair =&gt; pair.Count)
                .ToList();

            allTags.ForEach(pair =&gt; Console.WriteLine($""{pair.Tag} : {pair.Count}""));

            Console.ReadLine();
        }
    }
}
</code></pre>

<p>Final ToList() can be omitted if you just need to enumerate result.</p>

<p>Result:</p>

<pre><code>Tag1 : 3
Tag2 : 2
Tag3 : 1
</code></pre>
"	3874401.0		3874401.0		2018-05-26 16:57:56	2018-05-26 16:57:56				3			
53085604	2		12972295.0	2018-10-31 14:22:11		0		"<p>I know its been a while but Ill add to this, based on the most popular answer but with a little extension Id like to share the below:</p>

<pre><code>static class ExtensionsThatWillAppearOnIEnumerables
{
    public static T FirstOr&lt;T&gt;(this IEnumerable&lt;T&gt; source, Func&lt;T, bool&gt; predicate, Func&lt;T&gt; alternate)
    {
        var thing = source.FirstOrDefault(predicate);
        if (thing != null)
            return thing;
        return alternate();
    }
}
</code></pre>

<p>This allows me to call it inline as such with my own example I was having issues with:</p>

<pre><code>_controlDataResolvers.FirstOr(x =&gt; x.AppliesTo(item.Key), () =&gt; newDefaultResolver()).GetDataAsync(conn, item.ToList())
</code></pre>

<p>So for me I just wanted a default resolver to be used inline, I can do my usual check and then pass in a function so a class isn't instantiated even if unused, its a function to execute when required instead!</p>
"	2357370.0					2018-10-31 14:22:11				0			
53119746	1	53147538.0		2018-11-02 13:45:34		1	55.0	"<p>LINQ's methods <code>Select</code>, <code>Where</code>, <code>SelectMany</code> (maybe others, not sure) use optimized implementation if provided collection implements <code>IList&lt;T&gt;</code> interface - it does not use <code>GetEnumerator</code> method, but retrieves elements by index instead (at least in dotnet core, to avoid using enumerator overhead, I suppose).</p>

<p>Is there any way to disable that optimization for certain type?</p>

<p>I have <code>IList</code> implementation, which proxies all calls to another collection, therefore iterating all elements using enumerator is actually much faster, than getting all elements by index.</p>
"	7780383.0		7780383.0		2018-11-04 22:47:05	2018-11-05 08:08:57	Disable LINQ optimization for custom IList implementation	<.net><linq>	3.0	8			
53121159	2		53119746.0	2018-11-02 15:09:51		0		"<p>Here are the Linq methods that see if the collection is actually an <code>IList</code> or <code>ICollection</code> and use index access instead of an enumerator:</p>

<ul>
<li><code>First</code>/<code>FirstOrDefault</code>/<code>Single</code>/<code>SingleOrDefault</code> (uses <code>list[0]</code> if no predicate is passed)</li>
<li><code>Last</code>/<code>LastOrDefault</code> (uses <code>list[count-1]</code> if no predicate is passed)</li>
<li><code>ElementAt</code>/<code>ElementAtOrDefault</code> </li>
<li><code>Count</code> (calls <code>ICollection.Count()</code> if no predicate is used)</li>
<li><code>Contains</code> (calls <code>ICollection.Contains</code>)</li>
</ul>

<p><code>Select</code>, <code>Where</code>, <code>OrderBy</code>, and all others will use an enumerator.</p>

<p>Some options are:</p>

<ul>
<li>Wrap your collection with an enumerator by including a <code>Select(x =&gt; x)</code> in your query if the index accessor is slower than an enumerator </li>
<li>Fix the index accessors so they are performant at least in these specific cases</li>
<li>Live with the inefficiency.</li>
</ul>
"	1081897.0					2018-11-02 15:09:51				2			
53543491	1	53546577.0		2018-11-29 16:28:36		-1	45.0	"<p>The orderbydescending not working if inherit the T type class using interface implementation.
But it work if i do inherit concrete class of the interface(Isort).</p>

<pre><code>     My interface: 
        public interface ISorter
            {
                IQueryable&lt;T&gt; NewsSort&lt;T&gt;(IQueryable&lt;T&gt; query) where T : ISort;
            }

Type class:
    public FinalResults : ISort
    {

      public  DateTime NewsDate{ get; set; }
    }

Implementation:
public class NewsSorter : ISorter
                    {
                public IQueryable&lt;T&gt; NewsSort&lt;T&gt;(IQueryable&lt;T&gt; query) 
               where T : ISort
                        {
                          query = query.OrderByDescending(p =&gt; p.NewsDate);
                        }
                  }
</code></pre>
"	7301354.0					2018-11-29 20:58:31	Why not working query orderby using generic method interface inheritance	<.net><linq>	2.0	2			
56031928	2		56031518.0	2019-05-08 00:11:33		0		"<p>You probably need something like this:</p>

<pre><code>.Select(c =&gt;
            {
                var cl = new Class();
                cl.Type.Number = ...;

                return cl;
            }
</code></pre>
"	787016.0		787016.0		2019-05-08 05:03:54	2019-05-08 05:03:54				5			
56843652	2		56842076.0	2019-07-01 23:37:45		1		"<p>You can call all queries asynchronously and calculate sum when all queries are completed.  </p>

<pre><code>var receiptLines = ReceiptLines.Where(p =&gt; p.ItemReceipt.TxnDate &lt; dt).SumAsync(p =&gt; p.Quantity);
var adjustmentLines = AdjustmentLines.Where(p =&gt; p.Adjustment.TxnDate &lt; dt).SumAsync(p =&gt; p.Quantity);
var transferLines = TransferLines.Where(p =&gt; p.Transfer.TxnDate &lt; dt).SumAsync(p =&gt; p.Quantity);
var returnLines = ReturnLines.Where(p =&gt; p.Return.TxnDate &lt; dt).SumAsync(p =&gt; p.Quantity);

await Task.WhenAll(receiptLines, adjustmentLines, transferLines, returnLines);

var count = receiptLines.Result + adjustmentLines.Result + transferLines.Result + returnLines.Result;
</code></pre>

<p>When calling asynchronously all queries will be executed almost simultaneously.</p>

<p>Because all queries have same return type (<code>Task&lt;int&gt;</code>), you can use a collection.</p>

<pre><code>var queryTasks = new[]
{
    ReceiptLines.Where(p =&gt; p.ItemReceipt.TxnDate &lt; dt).SumAsync(p =&gt; p.Quantity),
    AdjustmentLines.Where(p =&gt; p.Adjustment.TxnDate &lt; dt).SumAsync(p =&gt; p.Quantity),
    TransferLines.Where(p =&gt; p.Transfer.TxnDate &lt; dt).SumAsync(p =&gt; p.Quantity),
    ReturnLines.Where(p =&gt; p.Return.TxnDate &lt; dt).SumAsync(p =&gt; p.Quantity)
};

await Task.WhenAll(queryTasks);

var count = queryTasks.Select(task =&gt; task.Result).Sum();
</code></pre>
"	1565525.0					2019-07-01 23:37:45				2			
396672	2		396513.0	2008-12-28 20:56:16		4		"<p>""Shouldn't we be striving to make our methods thread safe?""</p>

<p>We should <strong>be deliberate</strong> about the <a href=""http://blogs.msdn.com/larryosterman/archive/2006/09/29/777022.aspx"" rel=""nofollow noreferrer"">abilities</a> of our code.  </p>

<p>Just because a method isn't threadsafe doesn't mean it's a failure, just that you need to know that fact before you try to use it in a multi-threaded program.  Do you strive to make <code>Main()</code> threadsafe? Does thread safety matter in a single-threaded program?</p>

<p>Anyway, I don't think it really makes sense to say ""Foo is threadsafe"", only that ""Foo has the following characteristics that are important in a multi-threaded context.""</p>

<p>""attempting to enumerate an IEnumerable twice - I believe throws an exception.""</p>

<p>That'd be bad.  Luckily you can test it, instead of expanding FUD. </p>

<p>I think what you're asking is ""shouldn't I return a copy of my collection, instead of a reference to an internal member collection, so that callers won't modify my data""?  And the answer is an unqualified ""<strong>maybe</strong>"".  There are a lot of ways to approach this problem.</p>
"	5314.0	Jay Bazuzi				2008-12-28 20:56:16				0			
398295	2		396513.0	2008-12-29 18:38:27		2		"<blockquote>
  <p>However I wonder, with the late evaluation of the IEnumerable generic type if that is a good idea. Does it make more sense to use the T[] generic type? IList? Or something else?</p>
</blockquote>

<p>You need to be careful about the terms you are using.  Be aware of the difference between the <em>type of a reference</em> and the <em>type of an instance</em>.</p>

<p>IEnumerable of T only says: ""I may iterate over this collection by calling GetEnumerator.  When I do that, each element can be refered to as a T.""  IEnumerable of T does not say anything about lazy evaluation.</p>

<p>Consider these three declarations:</p>

<pre><code>//someInts will be evaluated lazily
IEnumerable&lt;int&gt; someInts = Enumerable.Range(0, 100);

//oddInts will be evaluated lazily
IEnumerable&lt;int&gt; oddInts = someInts.Where(i =&gt; i % 2 == 1);

//evenInts will be evaluated eagerly
IEnumerable&lt;int&gt; evenInts = someInts.Except(oddInts).ToList();
</code></pre>

<p>Even though the reference type of all three are IEnumerable of int, only evenInts is eagerly evaluated (because ToList enumerates its target and returns a List instance).</p>

<p>As for the question at hand, what I typically do is to treat my callers as expecting an eagerly evaluated Enumerable, so I do this:</p>

<pre><code>public IEnumerable&lt;int&gt; GetInts()
{
  ...
  return someInts.ToList()
}
</code></pre>
"	8155.0	David B				2008-12-29 18:38:27				0			
545965	2		545885.0	2009-02-13 13:42:13		5		"<p><a href=""http://blogs.msdn.com/madst/archive/2007/05/11/recursive-lambda-expressions.aspx"" rel=""nofollow noreferrer"">Mads Torgersen demonstrates</a> how to write a self-contained recursive lambda expression in LINQ to calculate (e.g.) a factorial:</p>

<pre><code>i =&gt; new Func&lt;Func&lt;int,int&gt;,Func&lt;int,int&gt;&gt;(fac =&gt; x =&gt; x == 0 ? 1 : x * fac(x
- 1))(new SelfApplicable&lt;Func&lt;Func&lt;Func&lt;int,int&gt;,Func&lt;int,int&gt;&gt;,Func&lt;int,int&gt;
&gt;&gt;(y =&gt; f =&gt; x =&gt; f(y(y)(f))(x))(y =&gt; f =&gt; x =&gt; f(y(y)(f))(x))(fac =&gt; x =&gt; x
== 0 ? 1 : x * fac(x - 1)))(i)
</code></pre>

<p>Mads notes:</p>

<blockquote>
  <p>I can’t even figure out how to line break it so that it approaches readable, so I haven’t.</p>
</blockquote>
"	55943.0					2009-02-13 13:42:13				1			
571269	2		571265.0	2009-02-20 21:19:19		8		"<p><code>List&lt;T&gt;</code> has a <a href=""http://msdn.microsoft.com/en-us/library/bwabdf9z.aspx"" rel=""nofollow noreferrer""><code>ForEach()</code></a> method that is designed for this.</p>
"	55943.0					2009-02-20 21:19:19				1			
571442	2		571265.0	2009-02-20 22:13:38		11		"<p>Many people have asked for a <code>ForEach</code> method - and indeed it <em>is</em> handy (which is why we've got one in <a href=""http://code.google.com/p/morelinq/"" rel=""noreferrer"">MoreLINQ</a>). It's also <em>potentially</em> dangerous.</p>

<p>Most of LINQ firmly discourages side-effects. They're possible, but discouraged. That's why OrderBy etc return new collections rather than sorting existing ones.</p>

<p>Now consider <code>ForEach</code> - it's an ""action"" rather than a function, in that it doesn't return anything. If it doesn't have any side-effects, it's absolutely pointless! So, it goes against part of the philosophy of LINQ - it's basically not approaching things in a functional style.</p>

<p>I'm not trying to make a case for or against, really - in practice, I think a useful thing to have, and I'm not surprised that it's in <em>so</em> many libraries etc. It's a very obvious pseudo-operator to add. Just think about what you're doing, and notice the fact that you're introducing side-effects. It's sort of a border between the functional style of LINQ and a more imperative style of coding.</p>
"	22656.0	Jon Skeet				2009-02-20 22:13:38				2			
585080	1			2009-02-25 07:52:57		6	14557.0	"<p>In my database, I have a table named Students, with 3 Columns (SNo, SName, Class).</p>

<p>I want to insert the value of only SName. </p>

<p>Can anybody tell me how to write the LINQ Query for this.</p>

<p>Thanks,
Bharath. </p>
"		Bharath	23354.0	Marc Gravell	2009-02-25 08:07:05	2013-04-02 00:48:00	LINQ Query to insert data into the database	<.net><linq>	2.0	0	2.0		
589594	2		589570.0	2009-02-26 08:04:56		1		"<p>Many LINQ examples here: <a href=""http://msdn.microsoft.com/en-us/vcsharp/aa336746.aspx"" rel=""nofollow noreferrer"">http://msdn.microsoft.com/en-us/vcsharp/aa336746.aspx</a></p>
"	43836.0	Nick Gieshen				2009-02-26 08:04:56				0			
777456	2		777400.0	2009-04-22 14:21:47		22		"<p>That it only refers to LINQ to SQL</p>
"	25201.0					2009-04-22 14:21:47				2			
779422	2		779146.0	2009-04-22 21:57:06		4		"<p><a href=""http://community.bartdesmet.net/blogs/bart/Default.aspx"" rel=""nofollow noreferrer"">Bart De Smet</a>'s blog has some clever uses of LINQ such as <a href=""http://community.bartdesmet.net/blogs/bart/archive/2008/09/14/who-ever-said-linq-predicates-need-to-be-boolean-valued.aspx"" rel=""nofollow noreferrer"">Who ever said LINQ predicates need to be Boolean-valued?</a>.</p>
"	8877.0					2009-04-22 21:57:06				0			
779763	2		779146.0	2009-04-23 00:06:44		1		"<p>I'm rather surprised that Jon didn't mention his own....</p>

<p><a href=""http://msmvps.com/blogs/jon_skeet/archive/2007/10/03/linq-to-silliness-generating-a-mandelbrot-with-parallel-potential.aspx"" rel=""nofollow noreferrer"">http://msmvps.com/blogs/jon_skeet/archive/2007/10/03/linq-to-silliness-generating-a-mandelbrot-with-parallel-potential.aspx</a></p>

<p>Silly and clever at the same time ;-)</p>

<p>Edit: </p>

<p>oooh I forgot about <a href=""http://blogs.msdn.com/lukeh/archive/2007/10/01/taking-linq-to-objects-to-extremes-a-fully-linqified-raytracer.aspx"" rel=""nofollow noreferrer"">this one</a> as well. Ray tracing using Linq.</p>
"	10387.0		10387.0		2009-04-23 00:24:51	2009-04-23 00:24:51				0			
779780	2		779146.0	2009-04-23 00:12:25		5		"<p>You should also check out <a href=""http://www.codeplex.com/bindablelinq"" rel=""noreferrer"">Bindable LINQ</a>, from the CodePlex site:</p>

<blockquote>
  <p>""Bindable LINQ is a set of extensions
  to LINQ that add data binding and
  change propagation capabilities to
  standard LINQ queries. </p>
  
  <p>As well as propogating change,
  Bindable LINQ can analyse your queries
  at runtime and detect any dependencies
  your query has. If these dependencies
  provide events to subscribe to,
  Bindable LINQ will automatically
  monitor them for change. ""</p>
</blockquote>

<p>Here's one of the examples from the site:</p>

<blockquote>
  <p>Take this query for example:</p>
</blockquote>

<pre><code>   contactsListBox.ItemsSource = from c in customers
                                 where c.Name.StartsWith(textBox1.Text)
                                 select c;
</code></pre>

<blockquote>
  <p>Bindable LINQ will detect that the
  query relies on the Text property of
  the TextBox object, textBox1. Since
  the TextBox is a WPF control, Bindable
  LINQ knows to subscribe to the
  TextChanged event on the control.</p>
  
  <p>The end result is that as the user
  types, the items in the query are
  re-evaluated and the changes appear on
  screen. No additional code is needed
  to handle events.</p>
</blockquote>
"	18471.0					2009-04-23 00:12:25				0			
1028846	1	1028855.0		2009-06-22 18:56:53		1	1965.0	"<pre><code>    Dim myString As String = ""1234567890""
    Dim Part As String = """"

    Part = myString.Substring(2, 2) '34
    Part = New String(myString.Skip(2).Take(2).ToArray) '34
</code></pre>

<p>This code work but the linq one take about 1300% more time than the substring.</p>

<p>I have 2 questions</p>

<ol>
<li>Do I have the correct syntax(for LINQ)?</li>
<li>Should I stick with the string.substring?</li>
</ol>
"	40868.0					2009-06-23 07:59:10	to do a substring using LINQ on a string, do I have to correct syntax?	<.net><linq>	2.0	0			
1028855	2		1028846.0	2009-06-22 18:59:51		4		"<p>You should definitely stick with <code>Substring</code>. It's tailor-made for this situation, and it doesn't require all the extra bits of LINQ.</p>

<p>Just because you <em>can</em> do something with LINQ doesn't mean it's necessarily a good idea. When the data type you're using has the exact operation you want defined on it already, using an extra layer of abstraction is somewhat pointless.</p>
"	22656.0					2009-06-22 18:59:51				1			
1099349	2		1099333.0	2009-07-08 17:04:57		2		"<p>Have you considered <a href=""http://weblogs.asp.net/scottgu/archive/2008/01/07/dynamic-linq-part-1-using-the-linq-dynamic-query-library.aspx"" rel=""nofollow noreferrer"">Dynamic LINQ</a>?</p>
"	33708.0					2009-07-08 17:04:57				1			
1132346	2		1132138.0	2009-07-15 16:05:43		0		"<p>You can't cast an object into something that it isn't, even if they both implement the same interface.</p>

<p>For example you can't cast an <code>int</code> array into a <code>List&lt;int&gt;</code> eventhough they both implement <code>IEnumerable&lt;int&gt;</code>. You can cast either of them to the interface, but that doesn't change the actual type of the object. The array is still an array, and it can't be a list.</p>

<p>So, you have to loop through the result and put each item in your collection.</p>

<p>When it's a result from a LINQ query there is another reason why you have to loop through the result. What the query returns is not a collection with the finished result, but an object that will create the result when you loop through it. So, the result doesn't even exist before you loop through it.</p>
"	69083.0					2009-07-15 16:05:43				0			
1243049	1	1243198.0		2009-08-07 05:36:01		1	946.0	"<p>Iam using linq to entities and I want to get all Users that haven't signed up for the class. This is what I did. </p>

<pre><code>var classUsers = from cu in myEntities.ClassUsers
                         where cu.Class.ClassId == classId
                         select new
                         {
                             FirstName = cu.UserInfo.FirstName,
                             Id = cu.UserInfo.Id,
                             LastName = cu.UserInfo.LastName,
                             Select = new Boolean()
                         };

        var allUsers = from u in myEntities.UserInfo
                       select new
                       {
                           FirstName = u.FirstName,
                           Id = u.Id,
                           LastName = u.LastName,
                           Select = new Boolean()
                       };

        var availableUsers = allUsers.Except(classUsers).OrderBy(a=&gt;a.FirstName);
</code></pre>

<p>Is there a way I can merge the first two queries into one?</p>
"	148365.0		148365.0		2009-08-07 12:21:15	2012-08-10 13:25:58	".net linq to entities ""not in"" single query"	<.net><linq>	1.0	0			
1415805	2		1415777.0	2009-09-12 18:33:57		38		"<p>The existing Linq extension methods work on objects that implement <code>IEnumerable&lt;T&gt;</code>. I assume your object implements the non-generic <code>IEnumerable</code> interface. In that case you can use the <code>Cast&lt;T&gt;</code> extension method to get a generic <code>IEnumerable&lt;T&gt;</code> wrapper. For instance, if the elements are of type <code>int</code> :</p>

<pre><code>var wrapper = myObject.Cast&lt;int&gt;();
</code></pre>

<p>You can now use Linq on the wrapper</p>
"	98713.0					2009-09-12 18:33:57				0			
1842877	2		1842228.0	2009-12-03 20:57:59		0		"<p>You could write a helper function that given the last entity in a chain gives you the first entity.  Then you can combine that with pcampbell's answer to get the first entities in a chain.  Something along these lines</p>

<pre><code>resultSet.Where(e=&gt;e.prevEntityID == null).Select(e =&gt; GetHead(e, resultSet)).ToList();

Entity GetHead(Entity current, List&lt;Entity&gt; entities)
{
    Entity next = entities.Where(e =&gt; e.prevEntityID = current.id).FirstOrDefault();

     if (next == null)
        return current;
     else
        return GetHead(next, entities);
}
</code></pre>
"	20769.0					2009-12-03 20:57:59				1			
2094392	2		2094359.0	2010-01-19 15:04:46		0		"<p>Show them <a href=""http://blogs.teamb.com/craigstuntz/2009/12/31/38500/"" rel=""nofollow noreferrer"" title=""Projecting Onto a Presentation Model with the Entity Framework and ASP.NET MVC"">my projection demo</a> and ask them how much code it would take to do the same thing in ADO.NET. Then point out that in the real world there would probably be repositories and services in between, which you get nearly free with LINQ projections.</p>

<p>Then show them the <a href=""http://channel9.msdn.com/posts/DanielMoth/VS2010-Parallel-Computing-Features-Tour/"" rel=""nofollow noreferrer"">parallel extensions in .NET 4</a>.</p>
"	7714.0					2010-01-19 15:04:46				0			2010-01-19 15:04:46
2094402	2		2094359.0	2010-01-19 15:06:05		0		"<p>Some of the benefits:</p>

<ul>
<li>You can query not just databases, but XML files or any object collection with the <strong>same syntax</strong> - this is useful on the long run</li>
<li>Usign <strong>parameters</strong> is easier, no need
to worry about e.g. SQL injections</li>
<li>You can <strong>query across relationships</strong> 
without having to explicitly join,
<a href=""http://www.linqpad.net/WhyLINQBeatsSQL.aspx"" rel=""nofollow noreferrer"">like this</a></li>
</ul>

<p>The biggest benefit of all I would call is the first point, the same and simple syntax.</p>

<p>However if your colleague is an expert in the database field he might not want to switch immediately. LINQ does not bring immediate benefits, especially not on ongoing projects, but it makes you more efficient even on mid term in my opinion.</p>
"	151076.0		151076.0		2010-01-19 15:58:05	2010-01-19 15:58:05				0			2010-01-19 15:06:05
2107620	2		2107604.0	2010-01-21 07:43:00		1		"<p>See <a href=""http://en.wikipedia.org/wiki/Linq"" rel=""nofollow noreferrer"">wiki</a></p>

<blockquote>
  <p>While LINQ is primarily implemented as
  a library for .NET Framework 3.5, it
  also defines a set of language
  extensions that can be optionally
  implemented by languages to make
  queries a first class language
  construct and provide syntactic sugar
  for writing queries. These language
  extensions have initially been
  implemented in C# 3.0, VB 9.0 and
  Oxygene, with other languages like F#
  and Nemerle having announced
  preliminary support.</p>
</blockquote>
"	15410.0					2010-01-21 07:43:00				0			
2141447	2		2141360.0	2010-01-26 17:55:35		3		"<p>Both of these have a flaw - </p>

<p>You're calling <code>.Where(...)</code> on the collection, but doing nothing with the results.  This will have no effect whatsoever, since Where does not change the original collection - it returns a new <code>IEnumerable&lt;T&gt;</code> of items that match the predicate.</p>

<p>That being said, I'd prefer the second option-  In the first option, the <code>Convert.ToInt32</code> call will be run once for each element in your collection.  In a small collection, this may not matter, but as the collection gets larger, it will get slower.  </p>

<p>You may or may not notice that difference in this situation, but it's (IMO) a good practice to declare your variables prior to using a LINQ statement.  I often see situations where people assume LINQ is slow merely because they're doing expensive calculations within their predicates.  In this case, your method is relatively fast, so it probably will not matter, but as a practice, it's a good habit to follow the second pattern.</p>
"	65358.0					2010-01-26 17:55:35				2			
2145773	1	2145813.0		2010-01-27 09:42:05		0	586.0	"<p>Is is possible to turn a dateOfBirth in a linq query to an age within the query so i can do a comparison to an int?</p>

<p>Cheers in advanced </p>

<p>Truez</p>
"	259913.0		139547.0		2010-01-27 09:51:48	2010-01-27 09:51:48	Linq query-dateOfBirth to age	<.net><linq>	1.0	0			
2436931	2		2436924.0	2010-03-13 01:42:35		6		"<p>I think the <a href=""http://msdn.microsoft.com/en-us/vcsharp/aa336746.aspx"" rel=""nofollow noreferrer"">MSDN LINQ samples</a> are an excellent place to start.  Just start going through the first couple examples under each topic, and you'll soon get the gist. </p>
"	99492.0					2010-03-13 01:42:35				1			
2548435	2		2548402.0	2010-03-30 20:23:42		4		"<p>The version of <code>Aggregate&lt;TSource&gt;</code> you are referring to is <code>Aggregate&lt;TSource&gt;(this IEnumerable&lt;TSource&gt; enumerable)</code>.  </p>

<p>This particular overload of aggregate is the only one which does not contain a seed (read starting value) for the aggregate operation.  This creates an interesting case when the enumeration contains no elements.  The method could do one of the following</p>

<ul>
<li>Throw an exception alerting the user to the issue</li>
<li>Return <code>default(TSource)</code></li>
</ul>

<p>The author of the library chose to do the first one.  Why I don't specifically know but likely because it was viewed as an ambiguity and it's best to make ambiguities loud vs. succeed (possible incorrectly) silently</p>

<p>The other two overloads have no issue because they have a seed / initial value which can be returned.</p>
"	23283.0					2010-03-30 20:23:42				0			
2677496	2		2677231.0	2010-04-20 18:03:26		0		"<pre><code>        var objectC1 = new ObjectC() { id = 3 };
        var objectC2 = new ObjectC() { id = 1 };
        var objectB1 = new ObjectB() { objectCs = new List&lt;ObjectC&gt; { objectC1, objectC2 } };
        var objectBList = new List&lt;ObjectB&gt; {objectB1};
        var objectA = new ObjectA() { objectB = objectBList};

        var result = objectA.objectB.Select(b =&gt; b.objectCs.Where(c =&gt; c.id == 3));
</code></pre>
"	214935.0					2010-04-20 18:03:26				1			
2726407	2		2726352.0	2010-04-28 02:09:57		0		"<p>The following code works for me in LINQ to SQL (Northwind database)</p>

<pre><code> var dataContext = new NorthwindDataContext();
 var x = from c in dataContext.Customers
       join o in dataContext.Orders on c.CustomerID equals o.CustomerID
       join od in dataContext.Order_Details on o.OrderID equals od.OrderID
       select c;
</code></pre>
"	222170.0					2010-04-28 02:09:57				4			
3073416	2		3073406.0	2010-06-18 22:20:29		8		"<p><a href=""http://msdn.microsoft.com/en-us/library/system.linq.enumerable.range.aspx"" rel=""noreferrer""><code>Enumerable.Range</code></a> takes a <code>start</code> value, and a <code>count</code> value, not a <code>start</code> and <code>end</code> value.</p>

<p>So you are telling it to start at 6 and take 10 units, hence 6-15.</p>
"	126042.0					2010-06-18 22:20:29				1			
3314854	1	3314864.0		2010-07-23 01:55:56		2	10104.0	"<p>I need to do currentKey+1. So i would like to find the index of the key value and get the next key (or first if at end). How do i find the current index of the key?</p>

<p>I am using a <code>Dictionary&lt;int, classname&gt;</code> and i looked for .Find or IndexOf with Linq to no avail.</p>
"		user34537				2011-08-14 06:50:48	Find index of a key? Dictionary .NET	<.net><linq>	3.0	0			
3343191	2		3343089.0	2010-07-27 11:38:57		4		"<p>LINQ is many things, it's the combination of many smaller things.</p>

<p>This answer is going to be a jumble of information, I apologize. Your best bet is to wait a bit and see if someone else summarizes it better, and do google for the keywords I use.</p>

<p><strong>LINQ</strong> stands for ""<b>L</b>anguage <b>IN</b>tegrated <b>Q</b>uery"", and the most naive interpretation is that they added SQL-like syntax to the C# programming language.</p>

<p>So instead of:</p>

<pre><code>IEnumerable&lt;int&gt; values = otherValues.Where(i =&gt; i &gt; 5);
</code></pre>

<p>they have the syntax:</p>

<pre><code>IEnumerable&lt;int&gt; values = from i in otherValues
                          where i &gt; 5
                          select i;
</code></pre>

<p>The C# compiler will actually translate the second piece of code above to the first piece of code, so in reality, you're just calling methods on the collections.</p>

<p>However, and here's another part of the puzzle. Those methods are not actually defined in the collections at all. They're defined as extension methods, which means they're defined somewhere else, with some trickery that basically says ""let the programmer use these methods as though they were defined in the collection type to begin with, and just fix the code during compilation"".</p>

<p>So the first piece of code above:</p>

<pre><code>IEnumerable&lt;int&gt; values = otherValues.Where(i =&gt; i &gt; 5);
</code></pre>

<p>actually ends up being compiled as:</p>

<pre><code>IEnumerable&lt;int&gt; values = Enumerable.Where(otherValues, i =&gt; i &gt; 5);
</code></pre>

<p>The Where method is defined <a href=""http://msdn.microsoft.com/en-us/library/bb534803.aspx"" rel=""nofollow noreferrer"">here: Enumerable.Where</a>.</p>

<p>Next piece of magic is that the C# compiler doesn't use Enumerable.Where, what it does is that it just rewrites the code on the fly to look like the second piece of code in my answer here, and let the normal type inference work it out. In other words, it's going to pretend you actually wrote the second piece of code, and then see that ""otherValues"" is a <code>List&lt;T&gt;</code> where <code>T</code> is an <code>int</code>, and then find that <code>Enumerable.Where</code> is the one to call.</p>

<p>This means that you can, for other types than collections, actually make your own implementations of Where, and the LINQ syntax would be none the wiser.</p>

<p>This means ... that things that aren't really in-memory collections can be queried. For instance, if ""otherValues"" above is something that knows how to get data from a database, a different Where method will be called, not the one in Enumerable.Where.</p>

<p>This allows those other implementations to do their things in their own way, for instance by writing the SQL for you, executing it, and packaging up the result so that it looks to the calling code as though it actually was an in-memory collection to begin with.</p>

<p>Next piece of magic is expressions. The parameter to the Where method above, <code>i =&gt; i &gt; 5</code> is a lambda expression, or an anonymous method, in most cases, and you could actually declare it like this for an in-memory collection:</p>

<pre><code>Func&lt;int, bool&gt; w = delegate(int i) { return i &gt; 5; };
IEnumerable&lt;int&gt; values = otherValues.Where(w);
</code></pre>

<p>However, expression support in C# means that you can also declare it as:</p>

<pre><code>Expression&lt;Func&lt;int, bool&gt;&gt; w = i =&gt; i &gt; 5;
</code></pre>

<p>Here, the compiler isn't actually storing it as a compiled piece of code, but rather an in-memory data structure that knows that it takes one argument, compares it to 5 with a greater-than comparison and returns the result. Note that you have to use the lambda way of writing it, not as a delegate.</p>

<p>This knowledge allows those other Where implementations, if they're declared to take expressions, to not only get a hold of the ""where clause"", but to look at it, pick it apart, and rewrite it.</p>

<p>Which means that generating that SQL can be done in the Where method that knows how to deal with SQL code.</p>

<p>Here's the LINQ to SQL declaration of the Where method: <a href=""http://msdn.microsoft.com/en-us/library/system.linq.queryable.where.aspx"" rel=""nofollow noreferrer"">Queryably.Where</a>.</p>

<p>So LINQ is the combination of many smaller pieces of technology added to the C# compiler:</p>

<ul>
<li><a href=""http://msdn.microsoft.com/en-us/library/bb397676.aspx"" rel=""nofollow noreferrer"">LINQ syntax</a></li>
<li><a href=""http://msdn.microsoft.com/en-us/library/bb383977.aspx"" rel=""nofollow noreferrer"">Extension methods</a></li>
<li><a href=""http://msdn.microsoft.com/en-us/library/system.linq.enumerable_members.aspx"" rel=""nofollow noreferrer"">LINQ extension methods</a> (+ other implementations, in particular look at <a href=""http://msdn.microsoft.com/en-us/library/bb425822.aspx"" rel=""nofollow noreferrer"">LINQ to SQL</a>.)</li>
<li><a href=""http://msdn.microsoft.com/en-us/library/bb397687.aspx"" rel=""nofollow noreferrer"">Lambda expressions</a> and <a href=""http://msdn.microsoft.com/en-us/library/bb397951.aspx"" rel=""nofollow noreferrer"">Expression trees</a>.</li>
</ul>
"	267.0					2010-07-27 11:38:57				2			
3444368	2		3444188.0	2010-08-09 21:30:49		1		"<p>I suspect that the best solution for you is in using an anonymous type in your select&mdash;i.e. you're creating a custom/calculated property in a one-off class situation. Selecting an anonymous type allows you to do this:</p>

<pre><code>var items = from testItem in context.TestItems
            select new { CostCentre = (testItem.CostCentre == """" ? ""[Unknown]"" : testItem.CostCentre) };
</code></pre>

<p>This will result in items being a custom IQueryable type where each item has a single property of CostCentre that is type string. If all you really want is the strings, you can end up with an IQueryable&lt;string&gt; if you simplify it thus:</p>

<pre><code>var items = from testItem in context.TestItems
            select testItem.CostCentre == """" ? ""[Unknown]"" : testItem.CostCentre;
</code></pre>

<p>I hope this helps. You'll have bigger complications if you want more than the one property, but this is a good starting point.</p>
"	1336.0					2010-08-09 21:30:49				0			
3575575	1	3575634.0		2010-08-26 13:34:53		0	456.0	"<p>I am trying to use LINQ for certain operations. So there may be chance that millions of record will be used in LINQ.</p>

<p>So is it worth to use LINQ in this case? what is the maximum object limit to use LINQ?</p>

<p>I am reading records from database and check some conditions and store in <code>List&lt;Result&gt;</code>. Result is a class. Then performing LINQ query in <code>List&lt;Result&gt;</code> like grouping, counting etc. So there may be chance that min 50,000 records in <code>List&lt;Result&gt;</code>, so in this whether its better to go for LINQ (or) reinsert the records to db and perform the queries?</p>
"	368999.0		368999.0		2010-08-26 17:17:27	2010-08-26 17:17:27	what is the maximum objects supported by LINQ	<.net><linq>	4.0	3			
3575652	2		3575575.0	2010-08-26 13:43:47		0		"<p>LINQ AFAIK is about querying objects in a flexible and easy way.</p>

<p>Language Integrated Queries ... it just writes your SQL queries in code, a better way without you having to learn all the vernaculars of SQL.</p>

<p>As long as your querying logic is sound, LINQ will only make your life easier - no matter what the data size.</p>

<p>Please correct me if I am wrong!</p>
"	260034.0					2010-08-26 13:43:47				0			
14459760	1	14459857.0		2013-01-22 13:31:47		0	44.0	"<p>My Log class has 2 properties.</p>

<pre><code>List&lt;LogDetails&gt;
string Title
</code></pre>

<p>And my LogDetails class has 2 properties:</p>

<pre><code>string Message
LogStatus LogStatus  //enum
</code></pre>

<p>During this objects life time, it receives many messages which are stored for logging at a later stage. The LogStatus Enum has a few states, but simply it is either ""in progress"", ""file not found error"", ""success"" or ""failed"".</p>

<p>I am trying to use Linq to match only those which failed, but I can't build the new type.</p>

<pre><code>List&lt;Log&gt; filteredLogs = (from a in logs
                          from b in a.LogDetailsList
                          where b.Status == LogDetails.LogStatus.Failed
                          select new Log()
                                  {
                                     Title = a.Title,
                                     LogDetailsList = a.LogDetailsList
                                  }).Distinct().ToList();
</code></pre>

<p>My filteredLogs returns to me the full list as if the where clause hadn't worked.</p>

<p>I tried </p>

<pre><code> List&lt;Log&gt; filteredLogs = (from a in logs
                           from b in a.LogDetailsList
                           where b.Status == LogDetails.LogStatus.Failed
                           select new Log()
                                  {
                                       Title = a.Title,
                                       LogDetailsList = new LogDetails() { Message = b.Message, Status = b.Status }
                                  }).Distinct().ToList();
</code></pre>

<p>This doesn't work either as it appears I can't call the ToList() method from within the Linq query.</p>

<p><strong>EDIT</strong></p>

<p>Does any one have any suggestions on how to overcome this issue? My goal is to have a List which only lists those which failed.</p>
"	1221410.0		1221410.0		2013-01-22 13:42:41	2013-01-22 13:54:05	How to filter with Linq	<.net><linq>	1.0	0			
14976557	2		14976486.0	2013-02-20 09:38:25		0		"<p>Yes, you are asking too match from Linq to SQL.</p>

<p>What you need is retrieving Xml from database via Linq to SQL or Linq to Entities, and then use Linq to Xml to process data in memory.</p>

<pre><code>return  mContext.Items.Where(i =&gt; i.Type == Type &amp;&amp; i.UserID == UserID)
                .ToList()
                .OrderBy(i =&gt; (string)XElement.Parse(i.Description)
                                              .Attribute(""displayName""));
</code></pre>
"	470005.0		470005.0		2013-02-20 09:44:14	2013-02-20 09:44:14				0			
15142218	1	15142287.0		2013-02-28 17:48:04		2	61.0	"<p>I have the following SQL statement</p>

<pre><code>select RegionBoundaryID, RegionBoundary.lat, RegionBoundary.long, RegionID
from RegionBoundary join Region_Boundary on RegionBoundary.RegionBoundaryID = Region_Boundary.BoundaryID
order by RegionID, RegionBoundaryID
</code></pre>

<p>Here is its translation to LINQ</p>

<pre><code> var context = new DataClassesRegionDataContext();
 var regionBoudaries = from boundaryID in context.Region_Boundaries
                       join boundariesDetail in context.RegionBoundaries on boundaryID.BoundaryID equals boundariesDetail.RegionBoundaryID
                       select new RegionViewModel { ID = boundariesDetail.RegionBoundaryID, Latitude = boundariesDetail.lat.Value, Longitude = boundariesDetail.@long.Value, RegionID = boundaryID.RegionID };
 regionBoudaries.OrderBy(region =&gt; region.RegionID).ThenBy(region =&gt; region.ID);
</code></pre>

<p>However, the result I got from LINQ is different from that of SQL statement. Where was I wrong in the LINQ statement? Thank you.</p>

<p><strong>Edit</strong>: The difference is in the order which my results appear</p>
"	1780570.0		1780570.0		2013-03-01 00:42:14	2013-03-01 16:39:51	Need help translating from SQL to LINQ	<.net><linq>	2.0	3			
17028772	1	17029818.0		2013-06-10 16:39:08		0	128.0	"<p>I have a collection of objects (which map to rows in a DB using linq to SQL). I want to de-duplicate these objects based on some of their properties. Can I do this with a linq to sql query? </p>

<p>For instance, if I have a collection of Students with properties name, date of birth, ssn and field of study how do I select distinct students from that list based on name, date of birth and ssn (but not field of study). Is there an elegant way to do this with LINQ? If not, is there another elegant method?</p>
"	821742.0					2013-06-10 17:47:19	Can I deduplicate a collection of objects based on several fields using a linq query?	<.net><linq>	2.0	1			
3862480	1	3862503.0		2010-10-05 09:45:13		2	1510.0	"<p>i'm new to linq, what i want is to do group by  with having like in tqsl.
my class:</p>

<pre><code>class test{
public int field1;
public int field2;
public int field3;
}
</code></pre>

<p>now i have:</p>

<pre><code>IEnumerable&lt;test&gt; list;
</code></pre>

<p>i want something like:</p>

<pre><code>IEnumerable&lt;test&gt; q=
from p
in list
group p by p.field1
having p.field2==p.field2.Max()
select p;
</code></pre>

<p>Can u help me?</p>
"	438597.0					2010-10-05 10:03:55	Linq Group by having	<.net><linq>	1.0	0			
3862854	1	3863644.0		2010-10-05 10:39:41		0	373.0	"<p>I have two tables, with foreign key.
linq to sql class generated for me classes.
now i want make linq select with join, what will be result of join?
is where any way to generate class, for that result?
want get something like </p>

<pre><code>IEnumerable&lt;par_of_class1+part_of_class2&gt;. 
</code></pre>

<p>thx</p>
"	438597.0					2010-10-05 12:36:32	linq to sql join result	<.net><linq>	2.0	0			
4272763	1			2010-11-25 00:30:19		0	160.0	"<p>I have two tables called Table1 and Table2 which have a 1-1 relationship.</p>

<p>In LINQ, I have a collection of entities of Table1. Is it possible using LINQ to extract all of the Table2 counterparts of each Table1 entity in the collection?</p>
"	279911.0		279911.0		2010-11-25 04:31:30	2010-11-25 04:31:30	How do I get the linked table using LINQ?	<.net><linq>	1.0	0			
4366519	2		4366154.0	2010-12-06 12:46:53		0		"<p>I tried myself. So sorry for the inconvience Steven, it won't happen again :)</p>

<pre><code>var q = (from c in context.categories
        from it in context.Items
        select new CategoryCount
        {
            CategoryName = c.categoryName,
            Counter = (from i in context.itemCategories
                    where c.categoryId == i.categoryId &amp;&amp; it.countryPartId == 1 select i).Count()
        });
</code></pre>
"	76152.0					2010-12-06 12:46:53				0			
4381157	2		4381088.0	2010-12-07 20:18:33		1		"<p>This yields the same results, but is much easier to read:</p>

<pre><code>var items =
    from item in context.Items
    orderby item.itemId descending
    select new ItemWithCategories
    {
        item = item,
        categories = (
            from itemCategory in item.itemCategories
            select itemCategory.category).ToList()
    };
</code></pre>

<p>See how I removed the join statement, but using the <code>itemCategories</code> property of <code>item</code>?</p>
"	264697.0					2010-12-07 20:18:33				0			
4384352	1			2010-12-08 05:07:07		0	374.0	"<blockquote>
  <p><strong>Possible Duplicate:</strong><br>
  <a href=""https://stackoverflow.com/questions/2138/linq-on-the-net-2-0-runtime"">LINQ on the .NET 2.0 Runtime</a>  </p>
</blockquote>



<p>Is LINQ available in .net 2.0?</p>
"	396335.0		-1.0		2017-05-23 11:52:13	2010-12-08 05:09:31	Is LINQ available in .net 2.0?	<.net><linq>	1.0	0		2010-12-08 05:11:12	
4384358	2		4384352.0	2010-12-08 05:08:19		0		"<p><a href=""https://stackoverflow.com/questions/2138/linq-on-the-net-2-0-runtime"">LINQ on the .NET 2.0 Runtime</a></p>

<p><a href=""http://www.manning-sandbox.com/thread.jspa?threadID=20295"" rel=""nofollow noreferrer"">http://www.manning-sandbox.com/thread.jspa?threadID=20295</a></p>
"	497470.0		-1.0		2017-05-23 10:26:34	2010-12-08 05:08:19				0			
4517116	2		4517047.0	2010-12-23 08:46:57		1		"<p>you can do like this using lambda</p>

<pre><code> var data = new[]
                  {
                        new { Actn = ""click"", tm = ""3/12/2010 3:00AM"" },
                        new { Actn = ""click""  , tm = ""3/12/2010 3:12AM""},
                        new { Actn = ""open""  , tm = ""3/12/2010 3:34AM""},
                        new { Actn = ""click""  , tm = ""3/12/2010 4:12AM""},
                        new { Actn = ""click""  , tm = ""3/13/2010 1:12PM""}
                  };

            var groupby = data.GroupBy(r =&gt; new { Convert.ToDateTime(r.tm).Hour, r.Actn });

            foreach (var group in groupby)
            {
                Console.WriteLine(""{0} = {1}"", group.Key, group.Count());
            }
</code></pre>
"	487242.0		487242.0		2010-12-23 08:59:36	2010-12-23 08:59:36				0			
4517147	2		4517047.0	2010-12-23 08:51:50		4		"<pre><code>var poo = new[]
                {
                    new
                        {
                            Type = ""Click"",
                            Time = DateTime.Parse(""March 12, 2010 3:00AM"")
                        },
                    new
                        {
                            Type = ""Click"",
                            Time = DateTime.Parse(""March 12, 2010 3:12AM"")
                        },
                    new
                        {
                            Type = ""Open"",
                            Time = DateTime.Parse(""March 12, 2010 3:34AM"")
                        },
                    new
                        {
                            Type = ""Click"",
                            Time = DateTime.Parse(""March 12, 2010 4:12AM"")
                        },
                    new
                        {
                            Type = ""Click"",
                            Time = DateTime.Parse(""March 13, 2010 1:12PM"")
                        }
                };

var result = from s in poo
                group s by new {s.Type, s.Time.Hour} into  p

                select new
                        {
                            p.Key.Type,
                            p.Key.Hour,
                            Count = p.Count()
                        };

foreach (var s in result)
{
    Console.WriteLine(s.Count + "" - "" + s.Type + "" - "" + s.Hour);
}</code></pre>

<p>Output:</p>

<pre><code>2 - Click - 3
1 - Open - 3
1 - Click - 4
1 - Click - 13</code></pre>

<p>That what you're looking for?</p>
"	456813.0					2010-12-23 08:51:50				1			
17028814	2		17028772.0	2013-06-10 16:40:54		0		"<p>You can group by anonymous object which will contain all fields you want to group by:</p>

<pre><code>from s in students
group s by new { s.Name, s.DateOfBirth, s.SSN } into g
select g
</code></pre>

<p>Actually you can select first item from each group</p>

<pre><code>...
select g.First()
</code></pre>

<p>Or use some other logic, like aggregation:</p>

<pre><code>...
select new {
   g.Key.Name,
   g.Key.DateOfBirth,
   g.Key.SSN,
   Fields = g.Select(x =&gt; x.FieldOfStudy).ToList()
}
</code></pre>
"	470005.0					2013-06-10 16:40:54				0			
17218261	1	17218321.0		2013-06-20 15:53:15		1	59.0	"<p>Below is a simple Linq query I am using to fill in a jquery <code>autocomplete</code> list. The list is ordered properly until after the <code>.Distinct()</code> method gets called. Can anyone clue me in as to why or a way to remove duplicates from the list and keep it in order? </p>

<pre><code>    public JsonResult OverrideSearch(string term)
    {
        var drm = from    d in db.ZipCodeTerritory
                  where   d.DrmTerrDesc.Contains(term)
                  orderby d.DrmTerrDesc
                  select  d.DrmTerrDesc;

        drm = drm.Distinct();

        return Json(drm, JsonRequestBehavior.AllowGet);
    }
</code></pre>
"	1489378.0					2013-06-20 15:56:19	Linq query no longer ordered properly after .Distinct() used	<.net><linq>	1.0	1			
17481156	1	17481991.0		2013-07-05 04:38:17		1	43.0	"<p>I'm trying to sort a list of objects in a particular order.  </p>

<pre><code>Dim myList as new List(Of myObj)
</code></pre>

<p><code>myObj</code> has 2 parameters <code>Name</code> (string) and <code>ParentName</code> (string)  </p>

<p>Let's say <code>myList</code> has n number of items and they are in the following order:  </p>

<pre><code>myList(0): Name=""MD"" , ParentName = """"  
myList(1): Name=""Operations Manager"" , ParentName = ""MD""  
myList(2): Name=""Section Sub Manager"" , ParentName = ""Section Manager""  
myList(3): Name=""Assistant Manager1"" , ParentName = ""Tactical Manager""  
myList(4): Name=""Tactical Manager"" , ParentName = ""MD""  
myList(5): Name=""Assistant Manager2"" , ParentName = ""Tactical Manager""  
myList(6): Name=""Section Manager"" , ParentName = ""MD""  
</code></pre>

<p>I have to sort the above so the child nodes appear AFTER it's parent ie:  </p>

<pre><code>myList(0): Name=""MD"" , ParentName = """"  
myList(1): Name=""Operations Manager"" , ParentName = ""MD""  
myList(2): Name=""Section Manager"" , ParentName = ""MD""  
myList(3): Name=""Section Sub Manager"" , ParentName = ""Section Manager"" 
myList(4): Name=""Tactical Manager"" , ParentName = ""MD""  
myList(5): Name=""Assistant Manager1"" , ParentName = ""Tactical Manager""  
myList(6): Name=""Assistant Manager2"" , ParentName = ""Tactical Manager""  
</code></pre>

<p>please help.</p>
"	1770609.0		13302.0		2013-07-05 05:07:36	2013-07-05 05:57:03	Sorting a list of objects with it's parameter	<.net><linq>	1.0	2			
17558165	1	17561607.0		2013-07-09 21:04:48		4	557.0	"<p>I'm using Entity Framework as my ORM and each of my classes implements an interface that basically represents table structures (one readonly property for each field). These interfaces are meant to be shared between assemblies for different applications. They don't support any writing operations.</p>

<p>Right now EF allows me to use instances of IQueryable&lt;EntityClass&gt;. What I'd like to have is support for IQueryable&lt;IEntityInterface&gt; that will be on top of it. Needless to say I expect to be able to perform Where operations using interface properties.</p>

<p>Is it feasible at all, or I'm losing my time here? I tried implementing my own IQueryProvider and ExpressionVisitor but so far it haven't worked out so well. I have very little experience regarding LINQ's expression structures. Is it the way to go or there's another, better way?</p>
"	848975.0		155537.0		2013-07-10 02:41:31	2013-07-11 01:31:19	Wrapping IQueryable	<.net><linq>	1.0	5			
17705268	1			2013-07-17 16:26:09		1	515.0	"<p>I pulled down a working website from a live to local environment. Everything worked fine except a reference I had to the System.Data.XML namespace, which gave me the standard error about it not being found.</p>

<p>I first confirmed that my application pool in IIS for this site was set to 4.0.</p>

<p>Next I checked the target framework of the site in Visual Studio, which is set to 3.5. </p>

<p>I then looked through the web.config and did find System.Data.Linq (along with System.Core) listed.</p>

<p>I tried adding the reference via Visual Studio. This modified my web.config to add a duplicate  section with this line</p>

<pre><code>&lt;add assembly=""System.Data.Linq, Version=4.0.0.0, Culture=neutral, PublicKeyToken=B77A5C561934E089""/&gt;
</code></pre>

<p>I next tried targeting 4.0 to see if that changed anything. The namespace now is pulled up correctly, but any calls to LINQ functions fail. </p>

<p>Assemblies section of web.config is as follows</p>

<pre><code>  &lt;compilation defaultLanguage=""c#"" debug=""true""&gt;
    &lt;assemblies&gt;
      &lt;add assembly=""System.Core, Version=3.5.0.0, Culture=neutral, PublicKeyToken=B77A5C561934E089""/&gt;
      &lt;add assembly=""System.Web.Extensions, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31BF3856AD364E35""/&gt;
      &lt;add assembly=""System.Xml.Linq, Version=3.5.0.0, Culture=neutral, PublicKeyToken=B77A5C561934E089""/&gt;
      &lt;add assembly=""System.Data.DataSetExtensions, Version=3.5.0.0, Culture=neutral, PublicKeyToken=B77A5C561934E089""/&gt;
      &lt;add assembly=""System.Data.Linq, Version=3.5.0.0, Culture=neutral, PublicKeyToken=B77A5C561934E089""/&gt;
    &lt;/assemblies&gt;
  &lt;/compilation&gt;
</code></pre>
"	215663.0					2013-07-17 16:26:09	Unable to add a reference to System.Data.XML	<.net><linq>	0.0	2			
18290757	2		18290681.0	2013-08-17 16:04:28		0		"<p>Sure, you can use <code>FirstOrDefault()</code> in your LINQ query.</p>

<p>More here: <a href=""http://msdn.microsoft.com/library/vstudio/bb340482"" rel=""nofollow"">Official documentation</a></p>
"	2692280.0					2013-08-17 16:04:28				1			
19916012	2		19915788.0	2013-11-11 21:10:13		1		"<p>Linq is for <em>querying</em> - it is designed to iterate over a collection and <em>return</em> a result for each item.  There are <code>ForEach</code> extension methods out there that just wrap <code>foreach</code>, but in my opinion (<a href=""http://blogs.msdn.com/b/ericwhite/archive/2009/04/08/why-i-don-t-use-the-foreach-extension-method.aspx"" rel=""nofollow"">and</a> <a href=""http://blogs.msdn.com/b/mazhou/archive/2011/09/21/why-no-foreach-method-on-ienumerable-interfaces.aspx"" rel=""nofollow"">others'</a>) they are pointless because they only <em>change</em> the syntax, they do not <em>improve</em> it.</p>

<p>You <em>could</em> fake it out in C# by returning a dummy value:</p>

<pre><code>States.Select(item =&gt; {myMethod(item.Key, item.Value); return 0;})
</code></pre>

<p>or in VB:</p>

<pre><code>States.Select(Function(item) 
                myMethod(item.Key, item.Value) 
                Return 1 
              End Function)
</code></pre>

<p>but I think that just adds confusing noise - a <code>foreach</code> is definitely more appropriate.</p>
"	1081897.0		1081897.0		2013-11-11 21:21:27	2013-11-11 21:21:27				0			
23524097	2		23524019.0	2014-05-07 17:11:27		1		"<p>you can do like this:</p>

<pre><code>var result = yourList
             .OrderBy(r=&gt; r.BooleanField)
             .ThenByDescending(r=&gt; r.DateTimeField);
</code></pre>

<p>You have to do <code>DateTime</code> descending to get the latest one first.</p>

<p>For <code>Boolean</code> if you want sorted on <code>true</code> first then use <code>OrderByDescending</code> on it as well:</p>

<pre><code>var result = yourList
                 .OrderByDescending(r=&gt; r.BooleanField)
                 .ThenByDescending(r=&gt; r.DateTimeField);
</code></pre>
"	1875256.0		1875256.0		2014-05-07 17:27:44	2014-05-07 17:27:44				0			
24681587	2		24681405.0	2014-07-10 16:18:14		1		"<p>You are mixing LINQ and ORM. </p>

<p><a href=""http://msdn.microsoft.com/en-ca/library/bb397926.aspx"" rel=""nofollow"">LINQ</a> provides querying facility over collection of objects, <code>IEnuerable&lt;T&gt;</code>, <code>IQueryable&lt;T&gt;</code>. </p>

<p><a href=""http://en.wikipedia.org/wiki/Object-relational_mapping"" rel=""nofollow"">ORM</a> provides functionality to talk to database through objects. </p>

<p>Some methods like <code>Last</code>/<code>LastOrDefault</code>, <code>TakeWhile</code> doesn't work with LINQ to SQL, since LINQ to SQL is responsible for translating LINQ query to under laying data source language i.e. SQL. </p>

<p>You may see: <a href=""http://msdn.microsoft.com/en-us/library/bb399342(v=vs.110).aspx"" rel=""nofollow"">Standard Query Operator Translation</a></p>

<p>Similarly, there could be LINQ methods which are supported for in memory collection but are not supported for other providers. This will depend on each provider. </p>
"	961113.0					2014-07-10 16:18:14				0			
25815828	1	25815942.0		2014-09-12 19:52:40		10	8618.0	"<p>In standard linq when I use lambdas I can do the following:</p>

<pre><code>var x = _usersService.GetAll().OrderBy(u =&gt; u.LastName).ThenBy(u =&gt; y.FirstName).ThenBy(u =&gt; u.UserId)
</code></pre>

<p>My question is how can I do that when I'm using System.Linq.Dynamic dll? I know I can do:</p>

<pre><code>var x = _usersService.GetAll().OrderBy(""LastName"")
</code></pre>

<p>but how can I define additional order by clauses???</p>
"	758093.0					2014-09-12 20:05:00	How can I order by multiple fields when using Linq.Dynamic?	<.net><linq>	1.0	0	3.0		
26703351	2		26685851.0	2014-11-02 19:24:29		0		"<p>Here's the VB version:</p>

<pre class=""lang-vb prettyprint-override""><code>  &lt;System.Runtime.CompilerServices.Extension()&gt;
  Public Function Unique(List As List(Of String)) As List(Of String)
    ' 1. Remember the initial order
    ' 2. Group by the text
    ' 3. Label the entries in each group
    ' 4. Now reorder them by their original order
    ' 5. Remove the order value to get back to just the name
    Return List.
      Select(Function(Item, Index) New With {Item, Index}).
      GroupBy(Function(IndexedItem) IndexedItem.Item).
      SelectMany(Function(Group) Group.Select(Function(GroupItem, GroupIndex) New With {.Index = GroupItem.Index, .UniqueItem = GroupItem.Item &amp; If(GroupIndex = 0, String.Empty, (GroupIndex + 1).ToString)})).
      OrderBy(Function(IndexedUniqueItem) IndexedUniqueItem.Index).
      Select(Function(IndexedUniqueItem) IndexedUniqueItem.UniqueItem).
      ToList()
  End Function
</code></pre>
"	1045881.0					2014-11-02 19:24:29				0			
4549362	2		4549339.0	2010-12-28 20:41:46		65		"<p>You can use this:</p>

<pre><code>var groups = allValues.GroupBy(val =&gt; val.SomeProp);
</code></pre>

<p>To force immediate evaluation like in your example:</p>

<pre><code>var groups = allValues.GroupBy(val =&gt; val.SomeProp)
                      .ToDictionary(g =&gt; g.Key, g =&gt; g.ToList());
List&lt;MyObj&gt; trues = groups[true];
List&lt;MyObj&gt; falses = groups[false];
</code></pre>
"	61974.0		61974.0		2010-12-29 02:25:57	2010-12-29 02:25:57				3			
4891288	2		1997951.0	2011-02-03 20:22:47		2		"<p>Or better:</p>

<pre><code>myCollection.OfType&lt;SubB&gt;().Where(x =&gt; x.IsAwsome);
</code></pre>
"	233643.0					2011-02-03 20:22:47				0			
5031726	1	5031771.0		2011-02-17 16:33:11		94	33742.0	"<p>I want to get a difference between takewhile &amp; where LINQ methods .I got the following data from MSDN .But It didn't make sense to me</p>

<pre><code>Where&lt;TSource&gt;(IEnumerable&lt;TSource&gt;, Func&lt;TSource, Boolean&gt;) 
</code></pre>

<p>Filters a sequence of values based on a predicate. </p>

<pre><code>TakeWhile&lt;TSource&gt;(IEnumerable&lt;TSource&gt;, Func&lt;TSource, Boolean&gt;)
</code></pre>

<p>Returns elements from a sequence as long as a specified condition is true.  </p>

<p>All opinions are welcomed.</p>
"	353953.0					2015-10-29 15:21:02	LINQ where vs takewhile	<.net><linq>	6.0	1	16.0		
5076153	2		5075939.0	2011-02-22 09:11:29		8		"<p>Found it...</p>

<pre><code>DataLoadOptions dlo = new DataLoadOptions();
dlo.LoadWith&lt;ReportCategory&gt;(report =&gt; report.Reports);
dlo.AssociateWith&lt;ReportCategory&gt;(r =&gt; r.Reports.Where(i =&gt; i.InUse == true));
db.LoadOptions = dlo;
</code></pre>

<p>That is bringing back all the categories and active reports</p>
"	140944.0					2011-02-22 09:11:29				0			
5091181	2		5091125.0	2011-02-23 12:53:03		5		"<p>The underlying storage here is in a typed array (in this case in the <code>DoubleStorage</code> class), but all access goes via <code>object</code>, since there is no generic API. You cannot avoid the boxing unless you switch to a class-based model without <code>DataTable</code>.</p>
"	23354.0					2011-02-23 12:53:03				0			
5215469	1	5215512.0		2011-03-07 03:18:59		21	13666.0	"<blockquote>
  <p><strong>Possible Duplicate:</strong><br>
  <a href=""https://stackoverflow.com/questions/1349491/how-can-i-split-an-ienumerablestring-into-groups-of-ienumerablestring"">How can I split an IEnumerable&lt;String&gt; into groups of IEnumerable&lt;string&gt;</a>  </p>
</blockquote>



<p>I have a list that I would like to break into groups of 10.</p>

<p>If I have an object </p>

<pre><code>List&lt;Person&gt; allPendingPersons 
</code></pre>

<p>that is of length m.</p>

<p>Is there an elegant way in LINQ to break up allPendingPersons into one or more List objects that all have a up to 10 Persons?</p>
"	279911.0		-1.0		2017-05-23 12:18:16	2013-02-18 21:50:15	Use linq to break up list<t> into lots of list<t> of n length?	<.net><linq>	7.0	0	4.0	2011-03-07 16:00:32	
5215512	2		5215469.0	2011-03-07 03:26:03		17		"<pre><code> var groups = allPendingPersons.Select((p, index) =&gt; new {p,index})
                               .GroupBy(a =&gt;a.index/10 );
</code></pre>

<p>if you want to process <code>IGrouping&lt;,&gt;</code>. If you are looking for List> back you could try</p>

<pre><code>var listOfLists = allPendingPersons.Select((p, index) =&gt; new {p, index})
    .GroupBy(a =&gt; a.index/10)
    .Select((grp =&gt; grp.Select(g =&gt; g.p).ToList()))
    .ToList();
</code></pre>
"	273200.0		273200.0		2011-03-07 03:38:45	2011-03-07 03:38:45				2			
5865026	2		5864984.0	2011-05-03 04:31:04		0		"<p>OrderBy will appear only on a IEnumerable&lt;T&gt; generic class. IEnumerable is different from IEnumerable&lt;T&gt;</p>
"	716292.0					2011-05-03 04:31:04				0			
5977465	2		5977295.0	2011-05-12 11:46:54		0		"<p>Maybe not use only LINQ but i think use is simply and enough faster.</p>

<pre><code>//List&lt;string&gt; l1 = new List&lt;string&gt;() { ""A1"", ""B1"", ""C1"", ""D1"" };
List&lt;string&gt; l1 = new List&lt;string&gt;() { ""A1"", ""B1"", ""A1"", ""D1"" };
//List&lt;string&gt; l2 = new List&lt;string&gt;() { ""W2"", ""X2"", ""Y2"", ""Z2"" };
List&lt;string&gt; l2 = new List&lt;string&gt;() { ""Z2"", ""X2"", ""Y2"", ""Z2"" };
List&lt;string&gt; ls = new List&lt;string&gt;();
ls.AddRange(l1);
ls.AddRange(l2);
ls = ls.Distinct().ToList();
</code></pre>
"	266202.0					2011-05-12 11:46:54				1			
27231358	1	28619797.0		2014-12-01 15:11:31		0	123.0	"<p>I'm controlling the visibility and order of columns in a datagrid that I myself made (from scratch). This is a custom object model for a usercontrol. I want to return all my columns for display purposes, but in the order specified by some column layout classes and only if the corresponding column layout's visible property is true. I'm configuring the layout on an exception basis so that I only need to specify the columns that need to be ordered or hidden.</p>

<p><code>BrowsableProperties</code> is just a property that gets a subset of the properties of a type, which I'm holding in <code>Schema.Type</code>, and that's the source of the column set. A <code>GridLayout</code>, which is stored in the <code>Layout</code> property, holds many <code>TypeLayout</code>s, which hold many <code>ColumnLayout</code>s. A <code>TypeLayout</code> has a Type. <code>TypeLayout</code> exists because the very same grid can load many collections for different types during it's lifetime, and keep changing columns accordingly. It's a generic grid.</p>

<p>The <code>ColumnLayout</code>s go along with the properties, but there may not be a <code>ColumnLayout</code> for every property. If there isn't, I want to use the <code>ColumnLayout</code> returned by <code>ColumnLayout.Default</code>, but I can't get that ""left outer join but if it's null use this default"" logic working.</p>

<p>The following fetching function for columns is only returning the ones like an inner join, and I can't find where I can insert the default logic or the left join logic.</p>

<pre class=""lang-vb prettyprint-override""><code>  Private Function GetColumns() As List(Of Column)
    Return (
        From PropertyInfo As PropertyInfo
        In BrowsableProperties
        From TypeLayout As TypeLayout In Layout.Types
        From ColumnLayout As ColumnLayout In TypeLayout.Columns
        Where TypeLayout.Type Is Schema.Type AndAlso
        ColumnLayout.Name = PropertyInfo.Name AndAlso
        ColumnLayout.Visible
        Select PropertyInfo,
        ColumnLayout
        Order By
          ColumnLayout.Order,
          PropertyInfo.Name).
        Select(Function(x, i) New Column(Me, i, x.PropertyInfo)
    ).ToList
  End Function
</code></pre>

<p>Here's the <code>GridLayout</code> class:</p>

<pre class=""lang-vb prettyprint-override""><code>&lt;Serializable()&gt; _
Public Class GridLayout
  Inherits DatabaseObject

  &lt;XmlAttribute()&gt; _
  Public Property Context As String

  Private _Types As List(Of TypeLayout)
  Public ReadOnly Property Types As List(Of TypeLayout)
    Get
      If _Types Is Nothing Then
        _Types = New List(Of TypeLayout)
      End If
      Return _Types
    End Get
  End Property

End Class
</code></pre>

<p>Here's the <code>TypeLayout</code> class:</p>

<pre class=""lang-vb prettyprint-override""><code>&lt;Serializable()&gt;
Public Class TypeLayout
  Inherits DatabaseObject

  Private _Columns As List(Of ColumnLayout)
  Public ReadOnly Property Columns As List(Of ColumnLayout)
    Get
      If _Columns Is Nothing Then
        _Columns = New List(Of ColumnLayout)
      End If
      Return _Columns
    End Get
  End Property

  &lt;XmlIgnore()&gt; _
  Public Property Type As System.Type

  &lt;XmlAttribute(""Type"")&gt; _
  Public Property TypeName As String
    Get
      Return Type.AssemblyQualifiedName
    End Get
    Set(value As String)
      Type = Type.GetType(value)
    End Set
  End Property

End Class
</code></pre>

<p>and the <code>ColumnLayout</code> class:</p>

<pre class=""lang-vb prettyprint-override""><code>&lt;Serializable()&gt;
Public Class ColumnLayout
  Inherits DatabaseObject

  &lt;XmlAttribute()&gt; _
  Public Property Name As String

  &lt;XmlAttribute()&gt; _
  Public Property Order As Integer = Integer.MaxValue

  &lt;XmlAttribute()&gt; _
  Public Property [ReadOnly] As Boolean = False

  &lt;XmlAttribute()&gt; _
  Public Property Visible As Boolean = True

  Public Shared ReadOnly [Default] As New ColumnLayout With
    {.Order = Integer.MaxValue,
    .ReadOnly = False,
    .Visible = True}

End Class
</code></pre>

<p>and here's a typical configuration:</p>

<pre class=""lang-xml prettyprint-override""><code>&lt;GridLayout xmlns:xsd=""http://www.w3.org/2001/XMLSchema"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" Context=""frmApplication/TabControl1/tpHelpDesk/HelpDesk1/grdTickets""&gt;
&lt;Types&gt;
&lt;TypeLayout Type=""Simmons.BusinessObjects.HelpDesk.Ticket, Simmons.BusinessObjects, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null""&gt;
&lt;Columns&gt;
&lt;ColumnLayout Name=""TID"" Order=""0"" ReadOnly=""false"" Visible=""true""/&gt;
&lt;ColumnLayout Name=""DatabaseState"" Order=""2147483647"" ReadOnly=""false"" Visible=""false""/&gt;
&lt;ColumnLayout Name=""Loaded"" Order=""2147483647"" ReadOnly=""false"" Visible=""false""/&gt;
&lt;/Columns&gt;
&lt;/TypeLayout&gt;
&lt;/Types&gt;
&lt;/GridLayout&gt;
</code></pre>
"	1045881.0					2015-02-20 00:42:40	"linq query expression for ""left outer join"" with a default if right side is null"	<.net><linq>	1.0	0			
27705933	2		27705922.0	2014-12-30 12:56:07		1		"<p>Try this:-</p>

<pre><code>  from o in OrderSet
  join opr in OrderProductSet on o.Id equals opr.OrderId.Id
  join pri in ProductPricingSet on 
   new { BusinessUnitId = o.BusinessUnitId.Id, ProductNameId = opr.ProductNameId.Id}     
   equals new { BusinessUnitId = pri.BusinessUnitId.Id, ProductNameId =  pri.ProductId.Id}
  where o.Name.Equals(""OE-000004"")
  select new 
           {
              o.name,
              opr.ProductName,
              opr.Quantity,
              pri.SlipDiscount,
              pri.FinalPrice
          }
</code></pre>

<p>The <code>anonymous</code> type you are using will generate the same name so conflict is happening, you need to assign separate name.</p>
"	1529657.0		1529657.0		2014-12-30 16:25:39	2014-12-30 16:25:39				3			
27999496	1	28000189.0		2015-01-17 12:32:15		0	120.0	"<p>Given 3 Bussines Objects:</p>

<pre><code>public class A 
{
    public long Id { get; set; } 
}

public class B
{
    public long ClassCId { get; set; }
    public string ClassBFirstString { get; set; }
}

public class C
{              
    public long Id { get; set; }           
    public long ClassAId { get; set; }
}
</code></pre>

<p>and a Method:</p>

<pre><code>public IEnumerable&lt;A&gt; GetAllAbyClassBFirstStringFunction(string strg)
{

}
</code></pre>

<p>I would like to select all Objects of A´s  using LINQ having an ForeignKey(<code>ClassAId</code>) in Object C and Class B´s string (<code>ClassBFirstString</code>) equaling the methodParameter (<code>strg</code>).</p>

<p>There are 2 Entry Points I could use</p>

<p>first  is an <code>IEQueryable&lt;A&gt;</code> having all Objects of A lets call it _allObjectsOfA</p>

<p>second is an <code>IEQuaryable&lt;B&gt;</code> having all Objects of B´s lets call it _allObjetsOfB</p>

<p>How can this be done given the method above?</p>
"	2678102.0		864549.0		2015-01-19 02:54:44	2015-01-19 02:54:44	How can I Select an IEnumerable over 2 Tables using LINQ	<.net><linq>	1.0	0			
28619797	2		27231358.0	2015-02-20 00:42:40		0		"<p>I had to do it in two statements. My original question, of how to do it in one statement, remains unanswered.</p>

<p><em>(sorry about the vb. The language translators were supposed to work for the construct program - but there was way too much linq to decode my Matrix)</em></p>

<pre class=""lang-vb prettyprint-override""><code>  Private Function GetColumns() As List(Of Column)
    Dim ColumnLayouts = From TypeLayout As TypeLayout In Layout.Types
                        From ColumnLayout As ColumnLayout In TypeLayout.Columns
                        Where TypeLayout.Type = Schema.Type
                        Select ColumnLayout

    Return (From PropertyInfo As PropertyInfo
          In BrowsableProperties
          Group Join ColumnLayout As ColumnLayout In ColumnLayouts.DefaultIfEmpty(ColumnLayout.Default)
          On PropertyInfo.Name Equals ColumnLayout.Name
          Into ColumnLayoutDefaults = Group
          From ColumnLayout In ColumnLayoutDefaults.DefaultIfEmpty(ColumnLayout.Default)
          Where ColumnLayout.Visible
          Order By ColumnLayout.Order).
          Select(Function(FromClause, Index) New Column(Me, FromClause.PropertyInfo, FromClause.ColumnLayout, Index)).
          ToList

  End Function
</code></pre>
"	1045881.0					2015-02-20 00:42:40				0			
29107381	1			2015-03-17 18:51:56		0	3101.0	"<p>I'm in .NET Framework 4.0, have imports System.Linq and System.Data.Linq at the top. I'm querying an object of type <code>DataTable</code>. Plus I have System.Data.Linq, System.Xml.Linq, and System.Data as references.</p>

<p>Why am I still getting
<code>Expression of type 'System.Data.DataTable' is not queryable. Make sure you are not missing an assembly reference and/or namespace import for the LINQ provider</code>?</p>

<p>My LINQ query:</p>

<pre><code>dim count = (from row in changes select row.field(of String)(""UnitID"") distinct).count()
</code></pre>
"	2567273.0					2015-03-17 19:23:09	What linq reference am I missing?	<.net><linq>	1.0	3			
6432958	1	6432987.0		2011-06-21 22:53:55		-2	103.0	"<p>How to use Linq to find an item in a List of ProductCat where every ProductCat contains a List of Product.</p>

<p>I want to find the Product by ProductID.</p>

<p>Thanks</p>
"	225537.0		226897.0		2011-06-21 22:56:42	2011-06-22 01:41:41	Find an element in a collection of collection	<.net><linq>	3.0	0			
6433994	2		6432958.0	2011-06-22 01:41:41		0		"<p>For a pure Linq language syntax:</p>

<pre><code>  var pds = from pc in prodCats
            select from p in pc.Products where p.ProductID &lt; 3
            select p;
</code></pre>

<p>But I think the IEnumerable extension + lambda version is more readable.</p>
"	610204.0					2011-06-22 01:41:41				0			
6535922	1	6540835.0		2011-06-30 13:58:27		0	274.0	"<p>i have a list on which there is a ""Active"" property that i would like to set to 1 only to an item and to 0 to all other items.</p>

<p>Which is the smartest way to do it in Linq? I know i could set to 0 to all items then 1 only to current, but i was asking if there is a better way to do it.</p>

<p>Thanks !! Ciao</p>
"	339500.0		572644.0		2011-06-30 14:21:25	2011-06-30 20:38:15	Mutually exclude property in LINQ	<.net><linq>	3.0	1			
6540835	2		6535922.0	2011-06-30 20:38:15		1		"<p>As a pair to Daniel's response, if you <em>must</em> use linq, that's just a perversion. At least just use it to find the item and then act on it.</p>

<pre><code>var item = list.FirstOrDefault**(i =&gt; i == desired);

if (item != null)
{
    item.Active = true;
}
</code></pre>

<p>** Possible change to <code>First</code>, <code>Single</code> or <code>SingleOrDefault</code> depending on the nature of the list.</p>
"	430067.0					2011-06-30 20:38:15				2			
6694782	2		6694753.0	2011-07-14 14:24:55		4		"<p>You need to use <code>GroupJoin</code>, sometimes in conjunction with a call to <code>DefaultIfEmpty()</code> afterwards to give a single null value for the group. You can then use <code>SelectMany()</code> to end up with one result per pair, noting that one of the values in the result may be null.</p>

<p>For example:</p>

<pre><code>// Note: can only do a *left* join, so ""bigger"" table comes first
var test = db.ReadOnlyCustomer
             .GroupJoin(db.Customer,
                        p =&gt; p.CustomerId,
                        o =&gt; o.CustomerId,
                        (p, os) =&gt; new { p, os = os.DefaultIfEmpty() })
             // Each pair may have multiple os here
            .SelectMany(pair =&gt; pair.os.Select(o =&gt; new { pair.p, o }))
            // Flattened, but o may be null
            .Select(pair =&gt; new ReadOnlyCustomer {
                      CustomerId = pair.p.CustomerId,
                      LanguageGuid = o != null ? o.LanguageGuid ?? p.LanguageGuid
                                               : p.LanguageGuid
                    });
</code></pre>

<p>(Out of interest, <em>why</em> does this need to be in lambda syntax rather than as a query expression? Typically joins of all kinds are simpler to express in query expressions.)</p>
"	22656.0		22656.0		2011-07-14 14:30:28	2011-07-14 14:30:28				1			
6750527	2		6750492.0	2011-07-19 16:19:50		6		"<p><code>System.Linq.Enumerable.Reverse()</code> works on all classes that implement <code>IEnumerable</code> where as <code>System.Array.Reverse()</code> only works on arrays. If you know that you have an array, there is nothing wrong with using <code>System.Array.Reverse()</code>.</p>
"	572644.0					2011-07-19 16:19:50				2			
6961791	2		6961727.0	2011-08-05 19:45:12		2		"<p>You have to implement certains interfaces (IQueryable for example) over your custom class in order to use Linq to query over them. Also, if you have a collection composing your class, then you can expose its Enumerator in order to gain in this terrain (Implement IEnumerable). 
See:
<a href=""http://www.infoq.com/news/2007/07/IQueryable"" rel=""nofollow"">How to implement IQueryable</a></p>

<p>If you need a much specialized ""Linq"" functionality, like the one that is used in Linq to SQL to translate a Linq expression to T-SQL, then Linq is like a standard: Diferent set of technologies implement Linq diferently, but with certain guidelines. That is correct for Linq to XML, Linq to Entities, Linq to SQL, etc.
See:</p>

<p><a href=""http://msdn.microsoft.com/en-us/library/bb546158.aspx"" rel=""nofollow"">Walkthrough: Creating an IQueryable LINQ Provider</a></p>
"	45186.0		45186.0		2011-08-05 22:04:37	2011-08-05 22:04:37				3			
29107550	2		29107381.0	2015-03-17 19:01:17		0		"<p>Try </p>

<pre><code>dim count = (from row in changes.AsEnumerable() select row.field(of String)(""UnitID"") distinct).count()
</code></pre>

<p><a href=""https://msdn.microsoft.com/en-us/library/system.data.datatableextensions.asenumerable(v=vs.110).aspx"" rel=""nofollow"">MSDN - DataTableExtensions.AsEnumerable Method</a></p>

<p>The Select Method works for Enumerable or Queryable objects:</p>

<p><a href=""https://msdn.microsoft.com/en-us/library/system.linq.queryable.select(v=vs.100).aspx"" rel=""nofollow"">Queryable.Select</a></p>

<p><a href=""https://msdn.microsoft.com/en-us/library/vstudio/system.linq.enumerable.select(v=vs.100).aspx"" rel=""nofollow"">Enumerable.Select</a></p>
"	1936046.0		1936046.0		2015-03-17 19:23:09	2015-03-17 19:23:09				1			
29845848	1			2015-04-24 11:05:04		0	40.0	"<p>I have a DataTable something like shown below. i need to query it using linq</p>

<p>Something like this Query in linq</p>

<pre><code>select B, Count(C)
from DataTable
group by B
</code></pre>
"	3932527.0		687887.0		2015-04-26 17:12:20	2015-04-26 17:12:20	Query datatable using linq to get count order by	<.net><linq>	2.0	0			
30566114	1	30566582.0		2015-06-01 05:24:52		0	37.0	"<p>When I convert <code>DataTable</code> to <code>IEnumerable</code> using <code>Select</code> method, default ordering from <code>sp</code> is changed! Is any option can I set to prevent this?</p>

<pre><code>var list = dataTable.Select();
</code></pre>
"	4164585.0					2015-06-01 06:02:44	Select method, changes default ordering of DataTable	<.net><linq>	1.0	0			
31547118	2		31546850.0	2015-07-21 18:41:23		2		"<p>Linq isn't designed for recursion and doesn't handle it well.  There are ways to shoehorn it but a standard recursive function would be much cleaner and easier to debug:</p>

<pre><code>Public Function IsInTree(Thing theThing, IEnumerable(Of Thing) tree) As Boolean
    If tree.Any(Function(t) t.Id = theThing.Id) Then 
        IsInTree = True
    ElseIf Children Is Not Nothing Then
        IsInTree = tree.Any(Function(t) IsInTree(theThing, t.Children))
    Else
        IsInTree = False
    End If
End Function
</code></pre>
"	1081897.0		1081897.0		2015-07-21 18:49:38	2015-07-21 18:49:38				2			
31825472	2		31823344.0	2015-08-05 06:58:45		0		"<p>I guess you use Entity Framework, so if you want to select specific columns from an entity and project them to an anonymous or a strong type you can use projection queries.</p>

<pre><code>// first we create a new class to contain less fields
public class PostRow
{
    public int Id { get; set; }
    public string Title { get; set; }
}

// returns posts with only the Id and Title
var posts = context.Posts.Select(p =&gt; new PostRow
{
    Id = p.Id,
    Title = p.Title
}).ToList();
</code></pre>

<p><a href=""https://www.talksharp.com/entity-framework-projection-queries"" rel=""nofollow"">https://www.talksharp.com/entity-framework-projection-queries</a></p>
"	991594.0					2015-08-05 06:58:45				2			
31842787	2		31823344.0	2015-08-05 21:03:45		0		"<p>You can create an anonymous type containing both types.
Something like this:</p>

<pre><code>var collection = dbcontext.table1s.join(
    dbcontext.table2s,
    x=&gt;table1ID,
    y=&gt;table2ID, 
    (x,y)=&gt; new 
        {
            X = x,
            Y = y
        });
</code></pre>

<p>You can then access the fields through the anonymous type. For example:</p>

<pre><code>collection[0].X.field1
collection[0].Y.field2
</code></pre>
"	1189957.0					2015-08-05 21:03:45				5			
36322189	2		36322037.0	2016-03-31 00:34:26		0		"<p>Linq is more about querying and less about what you do with the results of the query. That's why you see methods like <code>Select</code> and <code>Where</code> but not <code>Add</code> or <code>Update</code>.</p>

<p>You can take the results of a query and add them into two separate collections, or you can iterate over items in a collection and perform more than one action on them, like inspecting them and adding them to one or more collections.</p>
"	5101046.0					2016-03-31 00:34:26				0			
36324944	2		36322037.0	2016-03-31 05:34:21		0		"<p>If I understand you correctly, you can do something like that using 'group by'</p>

<pre><code>var items = new List&lt;Record&gt;
        {
            new Record {Warehouse = ""A"", Goods = ""apple""},
            new Record {Warehouse = ""A"", Goods = ""orange""},
            new Record {Warehouse = ""B"", Goods = ""apple""},
            new Record {Warehouse = ""B"", Goods = ""banana""},
        };
var warehouses = from item in items
                 group item.Goods by item.Warehouse
</code></pre>

<p>you can the iterate over the result like this</p>

<pre><code>foreach(var warehouse in warehouses){
    //...
    foreach(var item in warehouse){
         //...
    }
}
</code></pre>
"	112407.0					2016-03-31 05:34:21				0			
7055481	2		3314854.0	2011-08-14 06:50:48		2		"<p>Without using a different collection it could be done like this. Though I'm not sure how efficient this is. </p>

<pre><code>classIndex = classes.ToList().IndexOf(new KeyValuePair&lt;int, classname&gt;(newKey, classes[newKey]));
</code></pre>
"	893668.0					2011-08-14 06:50:48				1			
7086240	1	7086488.0		2011-08-16 23:15:26		0	40.0	"<p>Guys actually i wanna make a query like this:</p>

<pre><code>var firstTakeIssues = _db.Query&lt;Issue&gt;().OrderByDescending(i =&gt; i.CreatedDate)
                          .Take(take)
                          .Having(i =&gt; i.Project.ProjectID in IEnumerable&lt;int&gt;)
                          .Select(i =&gt; new {
                                  IssueId = i.IssueID,
                                  State = (StateEnum)i.State,
                                  ProjectName = i.Project.Name,
                                  Priority = (PriorityEnum)i.Priority,
                                  CreatedAt = i.CreatedDate,
                                  PostedBy = i.Client.Name
                              }).ToList();
</code></pre>

<p>I know that this dont work, but what i want to do is:</p>

<ol>
<li>search by projects in a collection</li>
<li>order by created date</li>
<li>select just a set of data</li>
<li>obtain a subset of columns</li>
</ol>

<p>What i really want to point is that i dont know how to make a query with having clause.</p>
"	261082.0		485076.0		2011-08-16 23:43:45	2011-08-16 23:50:29	Linq Filtering Question	<.net><linq>	1.0	0			
7086488	2		7086240.0	2011-08-16 23:50:29		0		"<p>To emulate your ""having"" clause, I believe you should be able to use a <code>Where</code> along with <code>Contains</code>:</p>

<pre><code>var projectIds = new int[] { 1, 2, 4, 6 };
var firstTakeIssues = _db.Query&lt;Issue&gt;()
                         .OrderByDescending(i =&gt; i.CreatedDate)
                         .Take(take)
                         .Where(i =&gt; projectIds.Contains(i.Project.ProjectID))
                         .Select(i =&gt; new {
                              IssueId = i.IssueID,
                              State = (StateEnum)i.State,
                              ProjectName = i.Project.Name,
                              Priority = (PriorityEnum)i.Priority,
                              CreatedAt = i.CreatedDate,
                              PostedBy = i.Client.Name
                          }).ToList();
</code></pre>
"	33969.0					2011-08-16 23:50:29				1			
7221753	1			2011-08-28 15:08:32		1	45.0	"<p>Supposing I have the constructor</p>

<pre><code>public SomeObject(string first, string second);
</code></pre>

<p>and two <code>string[]</code> arrays</p>

<pre><code>string[] arrayOne = new[] { firstOne, firstTwo };
string[] arrayTwo = new[] { secondOne, secondTwo, secondThree};
</code></pre>

<p>how can I return an <code>IEnumerable</code> or <code>IList</code> each element of which is a new <code>SomeObject</code> composed of a combination of both array's elements? Currently, I am using</p>

<pre><code>IEnumerable&lt;SomeObject&gt; newEnumerable = from stringOne in arrayOne from stringTwo in arrayTwo select new SomeObject(stringOne, stringTwo);
</code></pre>

<p>but I would prefer something like</p>

<pre><code>IEnumerable&lt;SomeObject&gt; newEnumerable = arrayOne.Select(stringOne =&gt; arrayTwo.Select(stringTwo =&gt; new SomeObject(stringOne, stringTwo));
</code></pre>

<p>but this last one returns <code>IEnumerable&lt;IEnumerable&lt;SomeObject&gt;&gt;</code> which, of course, is not what I want.</p>
"	813761.0					2011-08-28 15:11:06	Combining Two Arrays & Projecting	<.net><linq>	2.0	2			
7247431	1	7247477.0		2011-08-30 17:40:29		0	49.0	"<p>I have a LINQ from SQL query that returns sorted rows.
For instance, it will return: 1 1 1 1 1 1 1 1 2 2 2 3 3 3 3 3 4 4 4 4 
I am looking for a way to tell the LINQ to cut &amp; paste all the 1's and place it after the 3's, so it will look 2 2 2 3 3 3 3 3 1 1 1 1 1 1 1 4 4 4 4 .</p>

<p>What is the most efficient way to relocate its pointers? (without selecting &amp; deleting &amp; copying)</p>

<p>thanks</p>
"	261052.0					2011-08-30 17:46:27	How to relocate Linq rows with logic	<.net><linq>	3.0	4			
7247504	2		7247431.0	2011-08-30 17:46:27		1		"<p>I would do it in the Linq to SQL query like so:</p>

<pre><code>var query = from x in context.Table
            let Order = x.RowNum == 1 ? 3.5 : x.RowNum
            orderby Order
            select x;
</code></pre>
"	469533.0					2011-08-30 17:46:27				2			
7437494	1	7855425.0		2011-09-15 21:11:42		2	5703.0	"<p>For the <a href=""https://stackoverflow.com/questions/5305526/can-linq-expression-be-case-insensitive"">question</a> , the answer suggests that we cannot use the LINQ to SQL or linq to entities.</p>

<p>If I write</p>

<pre><code>Expression toLower = Expression.Call(memberAccess, typeof(T).GetMethod(""IndexOf"",
                                     new[] { typeof(T), typeof(StringComparison) }));
  Expression  condition = Expression.Call(toLower,
                                typeof(string).GetMethod(""Contains""),
                                Expression.Constant(value.ToString().ToLower()));
                    lambda = Expression.Lambda(condition, parameter);
</code></pre>

<p>I get error:</p>

<pre><code>Value cannot be null. Parameter name: method
</code></pre>

<p>If I write</p>

<pre><code>Expression toLower = Expression.Call(memberAccess, typeof(string).GetMethod(""IndexOf"",
                                         new[] { typeof(string), typeof(StringComparison) }));
</code></pre>

<p>The error I get is:</p>

<pre><code>Incorrect number of arguments supplied for call to method 'Int32 IndexOf(System.String, System.StringComparison)'
</code></pre>

<p>Thanks in advance</p>

<p><strong>Edit:</strong>
Here is the snippet and I need to be able to do a case insenstivie filter:</p>

<pre><code>public static IQueryable&lt;T&gt; Where&lt;T&gt;(this IQueryable&lt;T&gt; query,
            string column, object value, WhereOperation operation)
        {
            if (string.IsNullOrEmpty(column))
                return query;

            ParameterExpression parameter = Expression.Parameter(query.ElementType, ""p"");

            MemberExpression memberAccess = null;
            foreach (var property in column.Split('.'))
                memberAccess = MemberExpression.Property
                   (memberAccess ?? (parameter as Expression), property);

            //change param value type
            //necessary to getting bool from string
            ConstantExpression filter = Expression.Constant
                (
                    Convert.ChangeType(value, memberAccess.Type)
                );

            //switch operation
            Expression condition = null;
            LambdaExpression lambda = null;
            switch (operation)
            {
                //equal ==
                case WhereOperation.Equal:
                    condition = Expression.Equal(memberAccess, filter);
                    lambda = Expression.Lambda(condition, parameter);
                    break;
                //not equal !=
                case WhereOperation.NotEqual:
                    condition = Expression.NotEqual(memberAccess, filter);
                    lambda = Expression.Lambda(condition, parameter);
                    break;
                //string.Contains()
                case WhereOperation.Contains:
                    condition = Expression.Call(memberAccess,
                        typeof(string).GetMethod(""Contains""),
                        Expression.Constant(value));
                    lambda = Expression.Lambda(condition, parameter);
                    break;
            }


            MethodCallExpression result = Expression.Call(
                   typeof(Queryable), ""Where"",
                   new[] { query.ElementType },
                   query.Expression,
                   lambda);

            return query.Provider.CreateQuery&lt;T&gt;(result);
        }
</code></pre>
"	2030479.0		-1.0		2017-05-23 12:01:06	2011-10-21 21:22:49	case insensitive dynamic search for linq to entities	<.net><linq>	2.0	0			
7447846	1	7447868.0		2011-09-16 16:36:56		13	1375.0	"<p>How can I find if my list contains one and only one item without <code>Count</code> or <code>Single</code>?</p>

<p>Possible dupe of <a href=""https://stackoverflow.com/questions/6059643/efficient-linq-enumerables-count-1-test/6059711#6059711"">Efficient Linq Enumerable&#39;s &#39;Count() == 1&#39; test</a></p>
"	233.0		254882.0		2017-08-25 07:35:50	2017-08-25 07:35:50	Test if an IEnumerable<T> contains 1 element without counting or using Single	<.net><linq>	3.0	0	1.0		
38308247	2		38307706.0	2016-07-11 13:28:50		0		"<pre><code>var websitedetail = (from x in dt.AsEnumerable()
                    where x[""CYBER_TY""].ToString() == ""WEBSITE""
                    select x).select(y=&gt;y.ID).FirstOrDefault();
</code></pre>
"	5176326.0					2016-07-11 13:28:50				1			
38955323	1	38955373.0		2016-08-15 12:43:21		0	77.0	"<p>is it possible to change this query so that it does not return an Ienumerable List but a single object?
In my case it is guranteed a single object or null.</p>

<pre><code>.First()
</code></pre>

<p>seems to be not available?</p>

<pre><code> var as= from s in entities.Subscriptions
        join or in entities.OrderRates on s.OrderRateId equals or.OrderRateId
        join oo in entities.OrderOfferings on or.OrderOfferingId equals oo.OrderOfferingId
        join ov in entities.OrderVendors on oo.OrderVendorId equals ov.OrderVendorId
        where s.CustomerId == customerId
        select new
        {...}
</code></pre>
"		user4546142	6400526.0		2016-08-15 12:51:30	2016-08-15 12:54:02	Returning single object using from ... in linq?	<.net><linq>	1.0	1		2016-08-15 12:58:21	
38955373	2		38955323.0	2016-08-15 12:46:23		0		"<p><code>.First()</code> will throw an exception if the source sequence is empty. So if your where condition is not resulting any items, you will get an exception.</p>

<p>You can use the <code>SingleOrDefault</code> method if you are sure there will be only a single item or null yields from your where condition.</p>

<pre><code> var customer = (from s in entities.Subscriptions
                         join or in entities.OrderRates on s.OrderRateId equals or.OrderRateId
                         join oo in entities.OrderOfferings on or.OrderOfferingId equals oo.OrderOfferingId
                         join ov in entities.OrderVendors on oo.OrderVendorId equals ov.OrderVendorId
                         where s.CustomerId == customerId
                         select new
                         { //your mapping for new annonymous object goes here}
                ).SingleOrDefault();
</code></pre>

<p><code>SingleOrDefault</code>/<code>FirstOrDefault</code> resides in the <code>System.Linq</code> namespace. So make sure you have a using statement to import that namespace to the class where you are using this</p>

<pre><code>using System.Linq;
</code></pre>
"	40521.0		40521.0		2016-08-15 12:54:02	2016-08-15 12:54:02				1			
46688556	2		46688475.0	2017-10-11 12:46:13		2		"<p>Use <code>...Descending</code> and <code>Max</code>:</p>

<pre><code>var mostExpensivePurchase =  purchaseList
    .OrderByDescending(p =&gt; p.Items
        .Where(pItem =&gt; pItem.ArticleNo == ""numberImLookingFor"")
        .Max(pItem =&gt; pItem.Price))
    .ThenByDescending(p =&gt; p.Date)
    .FirstOrDefault()
</code></pre>
"	284240.0		284240.0		2017-10-11 12:53:34	2017-10-11 12:53:34				1			
53210978	2		53166031.0	2018-11-08 15:30:40		0		"<p>I think you can use this as well:</p>

<pre><code>Employee.Where(x =&gt; x.Bureau?.Any(y =&gt; y.BureauScore != null)
</code></pre>

<p>The sign of ""?."" means if Bureau == null then the value will be null, and it wont throw an exception.</p>

<p>I'm not sure which one is more readable, but if i Understood right what you wanted to do this should work as well. </p>
"	5558375.0					2018-11-08 15:30:40				0			
7792107	2		7792067.0	2011-10-17 09:57:11		1		"<p>Check that there are</p>

<pre><code>using System.Data;
using System.Linq;
</code></pre>

<p>and that you are referencing <code>System.Core</code> and <code>System.Data</code></p>
"	613130.0					2011-10-17 09:57:11				0			
8617960	2		8617907.0	2011-12-23 15:52:54		3		"<p><code>Int32</code> is not a type capable of representing nulls. <code>System.String</code> can, because it is a reference type. To store nulls for value types such as integers, dates, doubles, etc., you need <code>Nullable&lt;T&gt;</code>, which you would write as </p>

<pre><code>Nullable&lt;int&gt; // long version
int? // shorthand for above, showing shorthands below
DateTime? 
double? 
decimal? 
// and so on for structs...
</code></pre>

<p><code>Nullable&lt;T&gt;</code> is a struct with special features that allow it to represent null where normal value types cannot. It does this by simply creating a wrapper that exposes a <code>T Value</code> and <code>bool HasValue</code> properties. When the value is <em>null</em>, the <code>HasValue</code> property is simply false and it is an error to use the <code>Value</code> directly. Otherwise, it is true, and the value is usable.</p>
"	414076.0					2011-12-23 15:52:54				0			
8617968	2		8617907.0	2011-12-23 15:53:20		0		"<p>Change this line:</p>

<pre><code>[Column(CanBeNull = true)] public Int32 ServiceStatusId { get; set; }
</code></pre>

<p>to this:</p>

<pre><code>[Column(CanBeNull = true)] public Int32? ServiceStatusId { get; set; }
</code></pre>

<p>And you'll have to work with the <code>.HasValue</code> and <code>.Value</code> properties of the <code>Int32?</code> reference type.</p>
"	719034.0					2011-12-23 15:53:20				0			
8660002	2		8659647.0	2011-12-28 18:52:24		2		"<p>You can do it like this:</p>

<p>Add a method to do your logic to Child class that returns <code>this</code> or <code>Me</code> in vb</p>

<pre><code>class Child
{
    public Child GetWithAssignedParent(Parent y)
    {
        this.Parent = y;
        return this;
    }
}
</code></pre>

<p>use this method in your select query to do the logic and return the updated instances of Child class:</p>

<pre><code>var children = from x In db.ChildTable
join y In db.ParentTable on x.ParentId equals y.Id
select x.GetWithAssignedParent(y);
</code></pre>

<p>or use Func&lt;></p>

<pre><code>var children = from x in children
join y in parents on x.ParentId equals y.Id
select
   new Func&lt;Child&gt;(() =&gt;
   {
      x.Parent = y;
      return x;
   }).Invoke();
</code></pre>
"	813268.0		813268.0		2011-12-28 20:06:34	2011-12-28 20:06:34				8			
8660402	2		8659647.0	2011-12-28 19:35:39		0		"<p>Here's probably the easiest solution:</p>

<pre><code>var children = from x in db.ChildTable
               join y in db.ParentTable
               on x.ParentId equals y.Id
               // Assign the Parent to the Child:
               let parent = (x.Parent = y) // &lt;-- Inline assignment (with a dummy variable ""parent"")
               select x;
</code></pre>

<p>Disclaimer:  this query has <strong>inline assignment</strong> and <strong>modifies state</strong> ... both of which are not considered ""best practice"".<br>
However, it is very easy to read and understand, maintainable, and easily produces the correct results, so I'd argue it is a great solution.  </p>

<p>Also, this will only work in C#, because VB.NET doesn't have inline-assignment.</p>
"	272072.0		272072.0		2011-12-28 22:08:41	2011-12-28 22:08:41				2			
8736777	2		8736730.0	2012-01-05 02:06:52		2		"<p>In this case, adding a check for the lenght of the string will fix the problem. In this case, LINQ will evaluate the first part of an AND condition and then stop evaluating if it fails. So if it has A &amp;&amp; B, if A is false, then it won't evaluate B</p>

<pre><code>var=from rec in datacontext where rec.date.length &gt;= 8 &amp;&amp; rec.date.substring(0,8) is in the daterange select rec
</code></pre>
"	1074514.0		229044.0		2012-01-05 18:07:57	2012-01-05 18:07:57				7			
8929024	1	8929044.0		2012-01-19 15:50:15		7	3049.0	"<p>What's the LINQ syntax to take all rows except the first one? Does LINQ offer a nice concise way to do it?</p>
"	180430.0					2012-01-19 15:51:23	LINQ syntax to take all rows except the first one?	<.net><linq>	2.0	0			
9710020	2		9708380.0	2012-03-14 20:45:38		0		"<p>@Jon - I'm not sure the results are strange if you group by an arbitrary interval, isn't it just that some of the buckets aren't filled? If you capture the bucket number too, you can see what I mean:</p>

<pre><code>Module Module1
    Class DataPoint
        Property TimeStamp As DateTime
        Property Counter As Integer

        Public Overloads Function ToString() As String
            Return String.Format(""{0} {1}"", TimeStamp.ToString(""yyyy-MM-dd HH:mm:ss""), Counter)
        End Function

        Public Sub New(timeStamp As DateTime, counter As Integer)
            Me.TimeStamp = timeStamp
            Me.Counter = counter
        End Sub
    End Class

    Sub Main()
        Dim data As New List(Of DataPoint)
        Dim baseTime = DateTime.UtcNow
        Dim rand As New Random

        ' make some random data, possibly with timestamps out of order
        For i = 0 To 29
            data.Add(New DataPoint(baseTime + TimeSpan.FromSeconds(i * 17 + rand.Next(0, 30)), rand.Next(0, 101)))
        Next

        ' show the data for inspection
        For Each d In data
            Console.WriteLine(d.ToString)
        Next

        ' make the buckets smaller than the expected interval between data
        Dim bucketSize = TimeSpan.FromMinutes(0.1)

        Dim grps = From datum In data
                   Group datum By bnr = (datum.TimeStamp.Ticks - baseTime.Ticks) \ bucketSize.Ticks
                   Into buckets = Group
                   Select Avg = buckets.Average(Function(x) x.Counter),
                    BucketStart = buckets.First,
                    BucketNumber = bnr,
                    Count = buckets.Count

        Console.WriteLine(grps.Count.ToString &amp; "" buckets."")

        ' show that not all buckets are filled/created
        For Each b In grps
            Console.WriteLine(String.Format(""{0,3} {1,3} {2} {3}"", b.BucketNumber, b.Count, b.BucketStart.TimeStamp.ToString(""yyyy-MM-dd HH:mm:ss""), Math.Round(b.Avg, 2)))
        Next
        Console.ReadLine()
    End Sub
End Module
</code></pre>
"	1115360.0		1115360.0		2012-03-15 07:58:38	2012-03-15 07:58:38				0			
10278437	2		10278333.0	2012-04-23 10:02:20		1		"<p>Maybe something like this:</p>

<pre><code>var result= (
        from c in db.Content
        where db.Content
                  .Where (l =&gt;l.ContentId==c.ContentId)
                  .Max (l=&gt;l.Version)==c.Version
        select c
    );
</code></pre>

<p>Where db is the linq data context</p>
"	1100080.0					2012-04-23 10:02:20				2			
10382481	2		10382343.0	2012-04-30 10:52:53		5		"<p>Reference the DataTableExtensions - </p>

<p><a href=""http://msdn.microsoft.com/en-us/library/system.data.datatableextensions.asenumerable.aspx"" rel=""nofollow"">http://msdn.microsoft.com/en-us/library/system.data.datatableextensions.asenumerable.aspx</a></p>

<p>Then...</p>

<pre><code>var whatever = dTable.AsEnumerable();
</code></pre>

<p>Then per the MSDN example...</p>

<pre><code>var productNames = from products in table.AsEnumerable() 
      select products.Field&lt;string&gt;(""ProductName"");
</code></pre>

<p>Edit/update: Unfortunately I do not think there is a built in direct cast back to a DataTable with a different schema.  You <strong>have</strong> to use a DataTable?  I believe it... as it might be too much effort to refactor and test your code.  Good luck and keep us posted as working with strongly-typed lists are much more <em>fun</em>.</p>
"	139547.0		139547.0		2012-04-30 11:21:21	2012-04-30 11:21:21				2			
10609769	2		10609724.0	2012-05-15 22:36:21		0		"<p>Your select is projecting a collection of strings since you are calling ToString()</p>

<p>that means that in your OrderBy the value of ""row"" in the llambda is actually going to be a string itself.  You could probably just do OrderBy(r => r)</p>
"	750140.0					2012-05-15 22:36:21				1			
10994383	1	10994422.0		2012-06-12 10:03:24		0	146.0	"<pre><code>Class A
{
   string name;
   IList&lt;A&gt; minorList = new List&lt;A&gt;();
}

IList&lt;A&gt; majorList = new List&lt;A&gt;();
</code></pre>

<p>I Want to get the instance of A from <code>majorList</code> depending upon the name value, but it is not necessary to have it in the <code>majorList</code>. <code>minorList</code> can also contain the name. How can I get it using Linq. If it is there in only <code>majorList</code> I can get it by using</p>

<pre><code>A a = majorList.First(s =&gt; s.Name == ""Name"");
</code></pre>

<p>How about if it is not in the majorList but in some of the List of instance of majorList?</p>
"	416059.0		93652.0		2012-06-12 10:21:22	2012-06-12 10:28:42	Linq list inside List query	<.net><linq>	1.0	0			
11006197	2		11006160.0	2012-06-12 23:18:32		1		"<p>Search for the nodes to remove then remove them.</p>

<pre><code>var filterPrice = 60M;
var removeMe =
    from item in doc.Descendants(""Item"")
    where (decimal)item.Attribute(""Price"") &gt;= filterPrice
    select item;
removeMe.Remove();
</code></pre>

<p>Or using XPath:</p>

<pre><code>var filterPrice = 60M;
var xpath = String.Format(""//Item[@Price&gt;={0}]"", filterPrice);
var removeMe = doc.XPathSelectElements(xpath);
removeMe.Remove();
</code></pre>

<p>Combined to remove groups too:</p>

<pre><code>var filterItemPrice = 60M;
var filterGroupPrice = 60M;
var removeGroups =
    from grp in doc.Descendants(""Group"")
    where (decimal)grp.Attribute(""Price"") &gt;= filterGroupPrice
    select grp;
var removeItems =
    from item in doc.Descendants(""Item"")
    where (decimal)item.Attribute(""Price"") &gt;= filterItemPrice
    select item;
var removeMe = removeItems.Concat(removeGroups);
</code></pre>
"	390278.0		390278.0		2012-06-13 13:16:23	2012-06-13 13:16:23				3			
11186392	1	11200850.0		2012-06-25 09:11:08		2	105.0	"<p>i have a class that defines a request xml
i want to use linq to parse the xml to the class(later to do the opposite)
i am getting that req is null and in the function that returns the class all the proprieties "" MidaClientID The name 'MidaClientID' does not exist in the current context   ""</p>

<pre><code>public class Request
    {
        public int MidaClientID { get; set; }

        public int Password { get; set; }

        public int CandNum { get; set; }

        public string CandFirstName { get; set; }

        public string CandLastName { get; set; }

        public int CandPhone1 { get; set; }

        public int CandPhone2 { get; set; }

        public int CandPhone3 { get; set; }

        public string CandAttach1 { get; set; }

        public string CandAttach2 { get; set; }

        public string CandAttach3 { get; set; }

        public int ClientNum { get; set; }

        public string ClientName { get; set; }

        public int ContactNum { get; set; }

        public string ContactFirstName { get; set; }

        public string ContactLastName { get; set; }

        public string ContactEmail { get; set; }

        public int EventNum { get; set; }

        public DateTime EventDate { get; set; }

        public DateTime EventTime { get; set; }

        public int QuestNum { get; set; }

    }


 [WebMethod]
        public void GetXml()
        {
            XDocument doc = XDocument.Load(@"".xml"");
            List&lt;Request&gt; req = CreateRequest(doc);
        }


        public static List&lt;Request&gt; CreateRequest(XDocument input)
        {
            IEnumerable&lt;Request&gt; req = from r in input.Descendants(""Request"")
                                       select new Request()
                                       {
                                           //MidaClientID = (int)r.Attribute(""MidaClientID""),
                                           MidaClientID = Convert.ToInt32(r.Element(""MidaClientID"").Value),
                                           Password = (int)r.Attribute(""MidaClientPassword""),
                                           CandNum = (int)r.Attribute(""CandNum""),
                                           CandFirstName = (string)r.Attribute(""CandFirstName""),
                                           CandLastName = (string)r.Attribute(""CandLastName""),
                                           CandPhone1 = (int)r.Attribute(""CandPhone1""),
                                           CandPhone2 = (int)r.Attribute(""CandPhone2""),
                                           CandPhone3 = (int)r.Attribute(""CandPhone3""),
                                           CandAttach1 = (string)r.Attribute(""CandAttach1""),
                                           CandAttach2 = (string)r.Attribute(""CandAttach2""),
                                           CandAttach3 = (string)r.Attribute(""CandAttach3""),
                                           ClientNum = (int)r.Attribute(""ClientNum""),
                                           ClientName = (string)r.Attribute(""ClientName""),
                                           ContactNum = (int)r.Attribute(""ContactNum""),
                                           ContactFirstName = (string)r.Attribute(""ContactFirstName""),
                                           ContactLastName = (string)r.Attribute(""ContactLastName""),
                                           ContactEmail = (string)r.Attribute(""ContactEmail""),
                                           EventNum = (int)r.Attribute(""EventNum""),
                                           EventDate = (DateTime)r.Attribute(""EventDate""),
                                           EventTime = (DateTime)r.Attribute(""EventTime""),
                                           QuestNum = (int)r.Attribute(""QuestNum"")
                                       };
            return new List&lt;Request&gt; { };
        }
</code></pre>
"	1020500.0					2012-06-26 04:38:40	parse xml to class using linq	<.net><linq>	2.0	0			
11867969	1	11868037.0		2012-08-08 15:27:43		-1	94.0	"<p>I want to return the latest poll order by publish_at</p>

<p>some thing like :</p>

<pre><code>return  db.Polls.Where(p =&gt; p.status.Equals(PollStatus.Active))
                .OrderByDescending(d =&gt; d.publish_at)
                .Take(1);
</code></pre>

<p>Unfortunately, this does not work. How can I get just the most recent result, and not every result?</p>
"	1511069.0		727208.0		2012-08-08 19:10:26	2012-08-08 19:10:26	using System.Linq; in .net	<.net><linq>	2.0	5		2012-08-10 06:49:58	
12120946	2		12120926.0	2012-08-25 09:53:41		5		"<pre><code>public IEnumerable&lt;Deal&gt; FindDeals(IEnumerable&lt;Deal&gt; source, int subCategoryId)
{    
    return source.Where(d =&gt; d.Subcategories.Any(s =&gt; s.Id == subCategoryId));
}
</code></pre>
"	152602.0					2012-08-25 09:53:41				2			
12121988	1	12122019.0		2012-08-25 12:30:41		0	60.0	"<p>I have a function that I use to retrieve data via the entity framework.</p>

<pre><code>    public IEnumerable&lt;Deal&gt; GetCategory(int subcategoryId)
    {
        using (var uow = new ReadUow())
        {
            var r = new ReadRepo&lt;Deal&gt;(uow.Context);

            var deals = r.FindBy()
                .Include(""DealSubcategories"")
                .Where(d =&gt; d.DealSubcategories.Any(s =&gt; s.SubcategoryId == subcategoryId));

            return deals.ToList();
        }
    }
</code></pre>

<p>The .Where clause allows me to filter by a single subcategoryId (courtesy Lee and Jon Skeet), but I'm struggling similarly with comparing it to a list in a different query. So instead of a single subcategoryId, I would compare to a List somehow.</p>

<p>Pretty frustrating so any advice would be appreciated.</p>
"	1437135.0					2012-08-25 12:35:20	Linq nested ID to match to list	<.net><linq>	1.0	0			
12460657	2		12460250.0	2012-09-17 13:48:19		2		"<p>Just in case you want to have an idea about how it would be doing the same with the query syntax:</p>

<pre><code>var deals = from d in DealBL.FindActiveById(
                from d in user.BookmarkedDeals
                select d.DealId
            )
            orderby d.Store.Name
            select d;
</code></pre>
"	720780.0					2012-09-17 13:48:19				0			
12498748	2		2436924.0	2012-09-19 16:13:59		0		"<p>You can try out <a href=""http://code.msdn.microsoft.com/101-LINQ-Samples-3fb9811b"" rel=""nofollow"">MSDN - Linq 101</a></p>
"	491497.0					2012-09-19 16:13:59				0			
12875895	1			2012-10-13 18:43:47		2	112.0	"<p>I'm trying to change all cells in a table that has a StyleID of ""foo"" to ""bar"".  I'm using the following expression to get all the cells in a table who has a StyleID=""foo"".  I verified my narrowing function works by doing the following</p>

<pre><code>Dim count As Integer = 
   &lt;Table&gt;...&lt;Row&gt;...&lt;Cell&gt;.Where(Function(c) c.@ss:StyleID = ""foo"").Count
</code></pre>

<p>when I run this, it returns the correct number of cells for the dataset.</p>

<p>However, when I execute the following code, nothing happens.</p>

<pre><code>&lt;Table&gt;...&lt;Row&gt;...&lt;Cell&gt;
    .Where(Function(c) c.@ss:StyleID = ""foo"").@ss:StyleID = ""bar""
</code></pre>

<p>Any ideas as to what I'm doing wrong?</p>
"	782880.0		102937.0		2012-10-13 18:48:55	2012-10-13 18:53:53	Using linq to set multiple elements	<.net><linq>	2.0	1			
12972295	1	12972456.0		2012-10-19 10:25:35		129	110849.0	"<p>As I understand it, in Linq the method <code>FirstOrDefault()</code> can return a <code>Default</code> value of something other than null.  What I haven't worked out is what kind of things other than null can be returned by this (and similar) method when there are no items in the query result.  Is there any particular way that this can be set up so that if there is no value for a particular query some predefined value is returned as the default value?</p>
"	991788.0		106224.0		2012-10-19 10:33:20	2018-10-31 14:22:11	FirstOrDefault: Default value other than null	<.net><linq>	11.0	4	12.0		
13229731	2		13229048.0	2012-11-05 09:59:51		0		"<p>As Jon notes, the LINQ translation of <code>from</code>,<code>from</code> to <code>SelectMany</code> is:</p>

<pre><code>var query = l.SelectMany(x =&gt; x, (x, y) =&gt; y);
</code></pre>

<p>The first thing to note is that your <code>SelectMany</code> is defined against an individual <code>Maybe&lt;T&gt;</code>, so for this to make sense, <code>l</code> must be a <code>Maybe&lt;T&gt;</code> (for some <code>T</code>), not a list. The next thing to note is that the signature has to match. For example:</p>

<pre><code>public static Maybe&lt;TResult&gt; SelectMany&lt;TSource, TMaybe, TResult&gt;(
    this Maybe&lt;TSource&gt; m, Func&lt;Maybe&lt;TSource&gt;, Maybe&lt;TMaybe&gt;&gt; f,
    Func&lt;Maybe&lt;TSource&gt;, Maybe&lt;TMaybe&gt;, TResult&gt; g)
{
    throw new NotImplementedException();
    // return m.Bind(x =&gt; f(x).Bind(y =&gt; g(x, y).ToMaybe()));
}
</code></pre>

<p>And:</p>

<pre><code>var obj = l[0];
</code></pre>

<p>Now this works (explicit generics):</p>

<pre><code>var q = obj.SelectMany&lt;int, int, Maybe&lt;int&gt;&gt;((x =&gt; x), (x, y) =&gt; y);
</code></pre>

<p>which is identical to:</p>

<pre><code>var r = obj.SelectMany((x =&gt; x), (x, y) =&gt; y);
</code></pre>

<p>which is identical to:</p>

<pre><code>var query = from x in obj
            from y in x
            select y;
</code></pre>
"	23354.0					2012-11-05 09:59:51				4			
13233520	1	14217770.0		2012-11-05 13:53:38		2	466.0	"<p>When I'm executing a stored procedure after a <code>SubmitChanges()</code>, the stored procedure is executed before the <code>SubmitChanges()</code> is completed.</p>

<p>The function is supposed to migrate data from another server (so there are a lot of inserts going on). First, I call a stored procedure that disables the triggers on the given tables, then I do the inserts, then I enable the triggers again.</p>

<p>The code looks like:</p>

<pre><code>dc.DisableTriggers();    //Stored procedure (works fine)
//... Procedure to insert all the data in the DataContext
dc.MyClass.InsertOnSubmit(myClass);
//...
dc.SubmitChanges();      //All the data is inserted into tables.
dc.EnableTriggers();     //Stored procedure (triggers are enabled before the end of all inserts)).
</code></pre>

<p><br />
Stored procedure:<br /></p>

<pre><code>//DisableTriggers
Disable trigger [triggerName] on tableName;    //Disabling on 5 tables

//EnableTriggers
Enable trigger [triggerName] on tableName;     //same tables as DisableTriggers
</code></pre>

<p><br />
If I put a breakpoint after <code>SubmitChanges()</code> and wait a second before restarting, everything works fine.</p>

<p>If I set a timer after <code>SubmitChanges()</code>, triggers are enabled before the end of all inserts.</p>

<p>I did some testing and if I bind the <code>SubmitChanges()</code> on a button and the <code>dc.EnableTriggers()</code> on another button, everything works fine.</p>

<p>Unfortunately, I would need it to be all automated.</p>

<p>I am using C# .net 4.0.</p>
"	888479.0		888479.0		2012-11-05 15:01:44	2013-01-08 14:59:11	SubmitChanges() immediately followed by a stored procedure	<.net><linq>	2.0	5			
14224751	1	14224837.0		2013-01-08 21:58:15		1	159.0	"<p>I have a linq which groups prices by month works perfectly except I can't see the months which doesn't have data. what I am expecting If a month doesn't have data price should be 0.</p>

<pre><code>List&lt;decimal&gt; osman1 = osman.GroupBy(i =&gt; new 
{ 
    Field1 = i.Field&lt;DateTime&gt;(""CreateDate"").Month 
})
.Select(group =&gt; group.Sum(i =&gt; Convert.ToDecimal(i[""Price""])))
.ToList();
</code></pre>

<p>result osman1 is </p>

<blockquote>
  <p>{221,103,352} </p>
</blockquote>

<p>what I need is </p>

<blockquote>
  <p>{0,0,0,0,0,0,0,221,0,103,352,0}</p>
</blockquote>
"	1094001.0		802791.0		2013-01-08 22:05:19	2013-01-08 22:05:19	Linq missing months	<.net><linq>	1.0	1			
14529154	1			2013-01-25 19:37:58		4	124.0	"<p>I was looking at the 101 LInQ examples [1] and they imply that I can use a Comparer with the LInQ orderby feature. But in the example, they punt and use an extension method. My question is, can I use a comparer within my Language Integrated Query?</p>

<p>[1] <a href=""http://code.msdn.microsoft.com/SQL-Ordering-Operators-050af19e#OrderBycomparer"" rel=""nofollow"">http://code.msdn.microsoft.com/SQL-Ordering-Operators-050af19e#OrderBycomparer</a></p>

<p>Update: What I am looking for is actual language integration of my query. Something like the following would be nice:</p>

<pre><code>string[] words = { ""aPPLE"", ""AbAcUs"", ""bRaNcH"", ""BlUeBeRrY"", ""ClOvEr"", ""cHeRry"" }; 
var sortedWords = from x in words
                  orderby (x,y) =&gt; string.Compare(x,y)
                  select x;
</code></pre>

<p>Or more concisely:</p>

<pre><code>string[] words = { ""aPPLE"", ""AbAcUs"", ""bRaNcH"", ""BlUeBeRrY"", ""ClOvEr"", ""cHeRry"" }; 
var sortedWords = from x in words
                  orderby string.Compare
                  select x;
</code></pre>
"	1226612.0		1226612.0		2013-01-25 21:39:16	2013-01-25 21:39:16	Can I use the orderby linq keyword with a comparer?	<.net><linq>	1.0	3			
14976486	1	14976561.0		2013-02-20 09:35:18		1	466.0	"<p>I've got a SQL table that contains an XML field in it.</p>

<p>What I want to do is get all the data from the SQL table sorted by an attribute of the root element in each of the XML field's data..</p>

<p>So I have a table of items with a ""userid"" (guid),a ""description"" (xml) and a ""type"" (int).</p>

<p>A single record looks like this:</p>

<pre><code>1205159E-B4F9-41A9-955E-A3554AF1F21A
1
&lt;book displayText=""new book""&gt;
    &lt;txtTitle&gt;new book&lt;/txtTitle&gt;
    &lt;txtSubTitle&gt;book 1&lt;/txtSubTitle&gt;
    &lt;txtAuthor&gt;book 1 author&lt;/txtAuthor&gt;
&lt;/book&gt;
</code></pre>

<p>I'm trying to return a sorted list by ""displayText"".. simple text based sort..</p>

<p>I've tried this</p>

<pre><code>return (from i in mContext.Items
        where i.Type == Type
          &amp;&amp;  i.UserID == UserID
        orderby (string)i.Description.Attribute(""displayName"")
        select i).ToList();
</code></pre>

<p>but I keep getting:
Method 'System.Xml.Linq.XAttribute Attribute(System.Xml.Linq.XName)' has no supported translation to SQL</p>

<p>Am I asking to much from linq..???  surely not..  or should I just bite the bullet and create a sql sproc and do it in the database..???</p>

<p>Thanks in advance..</p>
"	1383388.0					2013-02-20 11:31:00	linq to sql - sort by attribute in XML field	<.net><linq>	3.0	0			
15681535	1	15682493.0		2013-03-28 12:14:10		2	89.0	"<p>Hy there,</p>

<p>This is my first question here in stackoverflow, I hope you can help me.</p>

<p>I have the following property filled in a linq query:</p>

<pre><code>FieldLabel = (currentLanguage == ""de"" ? forum.language.German :
         currentLanguage == ""fr"" ? forum.language.French :
         currentLanguage == ""en"" ? forum.language.English :
         forum.language.English)
</code></pre>

<p>And i need this to be generic, as my ""forum"" entity can be other thing like ""post"" that has the some languages columns (German, French, English), etc.
I want some dynamic method that receives the entity type, like ""forum"" or ""post"" or anything else that has columns languages, and returns the choosen column based on that chained If.</p>

<p>How can i solve this?</p>
"	2219609.0		381938.0		2013-03-28 12:35:56	2013-03-28 13:00:21	Dynamic LINQ Language Function	<.net><linq>	1.0	0	1.0		
16905822	1	16906049.0		2013-06-03 21:04:58		1	92.0	"<p>If I use LINQ to get some data from a database and then later on I take that data and start performing new LINQ commands on it, does it go back to the DB? Or just do it in memory? Only talking about reading data.</p>

<p>So if I do this:</p>

<pre><code>var tabledata = dbContext.Table1.Where(u =&gt; u.isActive);
int count = tabledata.Count();
</code></pre>

<p>And then later on I want to quickly get a particular value so I do this:</p>

<pre><code>string username = tabledata.Where(u =&gt; u.ID == 1).Select(u =&gt; u.Username).Single();
</code></pre>

<p>Did I just hit the DB again? Or did it perform the select on a cached copy of the table in memory?</p>

<p>Edit: OK, after numerous edits, what I'm trying to get at is, if we assume that I've successfully hit the DB and returned an IQueryable, will subsequent queries against that object hit the DB or stay in memory?</p>
"	1229350.0		1229350.0		2013-06-03 21:17:02	2013-06-03 21:22:03	Does LINQ perform subsequent Selects in memory?	<.net><linq>	2.0	9	1.0		
16905850	2		16905822.0	2013-06-03 21:06:34		3		"<p>In your posted code, you hit the DB once: when you call .Single(). The .Table1, the .Where, and the .Select are all lazily evaluated, passed into the .Single() call.</p>
"	536.0					2013-06-03 21:06:34				1			
16906049	2		16905822.0	2013-06-03 21:22:03		3		"<pre><code>var tabledata = dbContext.Table1.Where(u =&gt; u.isActive);
int count = tabledata.Count();
</code></pre>

<p>executes when you call <code>Count()</code>.</p>

<pre><code>string username = tabledata.Where(u =&gt; u.ID == 1)
                           .Select(u =&gt; u.Username)
                           .Single();
</code></pre>

<p>executes when you call <code>Single()</code>.</p>

<p>Whether the second call is cached in memory or not depends on whether or not you set up a caching solution.  In Linq to SQL or EF out of the box, this will make two calls to the database.</p>
"	102937.0					2013-06-03 21:22:03				0			
16907393	1	16907442.0		2013-06-03 23:19:24		0	61.0	"<p>I've got a view that's relatively small and I'd like to cache it after I fetch it from the DB. Since I only need certain rows based on userID, I'd rather not loop through my list of userIDs and query the database each time. I'd rather have the table in memory and then be able to perform linq queries against it to get the particular row I want.</p>

<pre><code>var view = dbContext.view; //I know this line doesn't execute the query

for(int i = 0; i &lt; userIDCount; i++)
{
    var dataRow = view.Where(v =&gt; v.userID == userIDs[i]);
}
</code></pre>

<p>Is there a way to keep view in memory and be able to use linq queries against it in the loop without hitting the DB over and over again?</p>
"	1229350.0					2013-06-03 23:25:21	Creating a queryable cached result from LINQ	<.net><linq>	1.0	0			
17692122	1	17692144.0		2013-07-17 05:55:07		4	59.0	"<p>I have a collection of Tasks which contain a number of fields but more importantly Duration of type Int.</p>

<pre><code>List&lt;Task&gt; tasks = new List&lt;Task&gt;;
tasks.Add(new Task{Name= 'Task 1', Duration = 3 });
tasks.Add(new Task{Name= 'Task 2', Duration = 2});
tasks.Add(new Task{Name= 'Task 3', Duration = 1});
tasks.Add(new Task{Name= 'Task 4', Duration = 4});
</code></pre>

<p>Given a task I want to find that task within the list and then sum anything that was before it.  Eg.  If my task I have is 'Task 3' then the result I want is 5 i.e. tasks before 'Task 3' is Task 1 and Task 2 with a duration of 3 and 2 respectively which equals 5.</p>

<p>Hopefully that makes sense and someone could provide the answer.  Hoping to do it with linq as opposed to just iterating the loop.</p>

<p>Thanks in advance.</p>
"	2590004.0					2013-07-17 05:56:55	Linq to objects find index and sum results	<.net><linq>	1.0	0			
17692144	2		17692122.0	2013-07-17 05:56:55		4		"<p>You can use Linq's <a href=""http://msdn.microsoft.com/en-us/library/bb534804.aspx"" rel=""nofollow""><code>TakeWhile</code></a> extension method followed by <a href=""http://msdn.microsoft.com/en-us/library/system.linq.enumerable.sum.aspx"" rel=""nofollow""><code>Sum</code></a>:</p>

<pre><code>var result = tasks.TakeWhile(t =&gt; t.Name != ""Task 3"").Sum(x =&gt; x.Duration);
</code></pre>
"	1715579.0					2013-07-17 05:56:55				5			
18134440	2		18134419.0	2013-08-08 19:27:11		8		"<p>You need <code>SelectMany</code>:</p>

<pre><code>foreach (var v in (new[] { 6, 8, 4 }).SelectMany(s =&gt; new[] { s * 2, s / 2 }))
    Console.WriteLine(v);
</code></pre>
"	1822164.0					2013-08-08 19:27:11				0			
20131666	2		20129040.0	2013-11-21 20:55:17		0		"<p>Since I guess Linq doesn't have a keyword for ""all"" I had to write the query like this</p>

<pre><code>var similarZips = (from z in _db.ZipCodeTerritory
                    where (zipCode.ZipCode.Equals(null) ?
                            z.StateCode.Equals(zipCode.StateCode) &amp;&amp;
                            z.ChannelCode.Equals(zipCode.ChannelCode) :
                            z.StateCode.Equals(zipCode.StateCode) &amp;&amp;
                            z.ChannelCode.Equals(zipCode.ChannelCode) &amp;&amp;
                            (z.ZipCode.Equals(zipcodeterritory.ZipCode) || z.ZipCode.Equals(null)))
                    select z).Where(x =&gt; x.Id != zipCode.Id).ToList();
</code></pre>
"	1489378.0		1489378.0		2013-11-22 16:29:53	2013-11-22 16:29:53				0			
20132284	2		20129040.0	2013-11-21 21:28:42		0		"<pre><code> 1      z.StateCode.Equals(zipCode.StateCode)
 2   &amp;&amp; z.ChannelCode.Equals(zipCode.ChannelCode)
 3   &amp;&amp; (
 4          (zipCode.ZipCode.Equals(null))
 5       ||
 6          (
 7              (!zipCode.ZipCode.Equals(null))
 8           &amp;&amp;
 9              (
10                  z.ZipCode.Equals(null)
11               ||
12                  z.ZipCode.Equals(zipCode.ZipCode)
13              )
14          )
15      )
</code></pre>

<p>(1) Match state (2) and channel (3) and (4) either there is no ZIP code specified (5) or (7) there is a ZIP code specified (8) and (10) the ZIP code of the record is null (11) or (12) matches the specified ZIP code.</p>

<p>As you can easily see line 7 is redundant and the whole thing can be reduced to the following.</p>

<pre><code>   z.StateCode.Equals(zipCode.StateCode)
&amp;&amp; z.ChannelCode.Equals(zipCode.ChannelCode)
&amp;&amp; (
        zipCode.ZipCode.Equals(null)
     || z.ZipCode.Equals(null)
     || z.ZipCode.Equals(zipCode.ZipCode)
   )
</code></pre>
"	77507.0					2013-11-21 21:28:42				0			
23440589	1			2014-05-03 05:19:11		1	41.0	"<p>I have a table with two columns: ""Source"" and ""Target"" with around 500K rows and 6K unique items (of type Double) in both columns.</p>

<p>Now, I want to extract all ""Source"" items related to some sample item in ""Target"" column:</p>

<pre><code>Dim samples = (From t in table Where t.Target = 77504944 Select t.Source).ToList()
</code></pre>

<p>and than output all table rows if any of these samples exist in ""Source"" column.</p>

<p>I first tried:</p>

<pre><code>Dim query = From t in table _
    Where samples.All(Function(x) x.Contains(t.Source)) _
    Select t.Source, t.Target
</code></pre>

<p>but this raises ""'Contains' is not a member of 'Double?'."" which I guess is a result of linq deferred execution.</p>

<p>Then I tried:</p>

<pre><code>Dim query = From t in table _
    Where samples.All(Function(x) x = t.Source) _
    Select t.Source, t.Target
</code></pre>

<p>which raises ""OleDbException: Expression too complex in query expression"", assuming because it translates all matched samples to separate conditional SQL statements, and it reaches some limit.</p>

<p>I think I miss something obvious and that this is indeed simple problem with simple linq query that I can't see at the moment. So, how can I use the first linq query (<code>samples</code> variable) as quantifier for the next one, in above example?</p>

<hr>

<p>I really want to know if this problem is suitable for linq, in a manner that I'm learning linq. I can do such query quite easily in Python for example:</p>

<pre><code>id = 77504944
samples = [x for x, y in table if y == id]
query = [(x, y) for x, y in table if x in samples or y in samples]
</code></pre>
"	992005.0		992005.0		2014-05-04 08:22:42	2014-05-04 08:47:22	Use query as quantifier	<.net><linq>	1.0	0			
23524029	2		23524019.0	2014-05-07 17:07:41		1		"<p>Use <a href=""http://msdn.microsoft.com/en-us/library/vstudio/bb534966%28v=vs.100%29.aspx"" rel=""nofollow""><code>Enumerable.OrderBy</code></a> and <a href=""http://msdn.microsoft.com/en-us/library/system.linq.enumerable.thenby%28v=vs.100%29.aspx"" rel=""nofollow""><code>Enumerable.ThenBy</code></a> for the second parameter, For Ordering in descending order use <a href=""http://msdn.microsoft.com/en-us/library/bb548916%28v=vs.95%29.aspx"" rel=""nofollow""><code>Enumerable.OrderByDescending</code></a> and <a href=""http://msdn.microsoft.com/en-us/library/bb534736%28v=vs.110%29.aspx"" rel=""nofollow""><code>Enumerable.ThenByDescending</code></a>. </p>

<p>For your particular case, you need <code>true</code> to appear first and then you want to get the records sorted by date. If you want to get latest date first, then you will need descending order. In that case your query would be:</p>

<pre><code>var query = list.OrderByDescending(r =&gt; r.BoolProperty)
                .ThenByDescending(r =&gt; r.DateTimeProperty);
</code></pre>

<p>Considering you have <code>List&lt;DummyClass&gt;</code> like:</p>

<pre><code>List&lt;DummyClass&gt; list = new List&lt;DummyClass&gt;
{
  new DummyClass() { BoolProperty = true, DateTimeProperty = DateTime.Now.AddDays(1)},
  new DummyClass() { BoolProperty = true, DateTimeProperty = DateTime.Now.AddDays(2)},
  new DummyClass() { BoolProperty = false, DateTimeProperty = DateTime.Now.AddDays(3)},
  new DummyClass() { BoolProperty = false, DateTimeProperty = DateTime.Now.AddDays(-1)},

};
</code></pre>

<p>Where <code>DummyClass</code> is defined as:</p>

<pre><code>public class DummyClass
{
    public bool BoolProperty { get; set; }
    public DateTime DateTimeProperty { get; set; }
}
</code></pre>

<p>For output you can use:</p>

<pre><code>foreach (var item in query)
{
    Console.WriteLine(""Bool {0}, DateTime {1}"" , item.BoolProperty, item.DateTimeProperty);
}
</code></pre>

<p>Output would be:</p>

<pre><code>Bool True, DateTime 09/05/2014 1:18:53 PM
Bool True, DateTime 08/05/2014 1:18:53 PM
Bool False, DateTime 10/05/2014 1:18:53 PM
Bool False, DateTime 06/05/2014 1:18:53 PM
</code></pre>
"	961113.0		961113.0		2014-05-07 17:17:43	2014-05-07 17:17:43				0			
25144679	2		8854181.0	2014-08-05 17:17:36		7		"<p>The difference is the DefaultIfEmpty returns a collection of objects while FirstOrDefault returns an object. If there were no results found DefaultIfEmpty still returns an Enumerable with a single item that has its default value, whereas FirstOrDefault returns T itself. </p>

<p>You use DefaultIfEmpty if you need always need a collection result, for instance to create outer joins. You use FirstOrDefault if you always need an object (not a collection) result, for instance if you want to get the first item (or only item) when searching for something like an ID or unique email, and want to return the default empty item if the item you were searching for was not found. </p>
"	1905275.0					2014-08-05 17:17:36				0			
26685993	2		26685851.0	2014-11-01 03:37:32		1		"<p>You could do it using <code>GroupBy</code> and if you want to preserve the original order you can create an anonymous type to include it, then group, then re-sort by the original order.        </p>

<pre><code>    string[] input = new[]{ ""Apple"", ""Orange"", ""Apple"", ""Pear"", ""Banana"", 
                            ""Apple"", ""Apple"", ""Orange"" };

    var result = input
        // Remember the initial order
        .Select((name, i) =&gt; new {name, i})
        .GroupBy(x =&gt; x.name)
        // Now label the entries in each group
        .SelectMany(g =&gt; g.Select((item, j) =&gt; 
            new {i = item.i, name = (j == 0 ? item.name : item.name + (j+1))}))
        // Now reorder them by their original order
        .OrderBy(x =&gt; x.i)
        // Remove the order value to get back to just the name
        .Select(x =&gt; x.name)
        .ToList();


    foreach (var r in result)
        Console.WriteLine(r);
</code></pre>

<p>Result</p>

<pre><code>Apple
Orange
Apple2
Pear
Banana
Apple3
Apple4
Orange2
</code></pre>
"	224370.0					2014-11-01 03:37:32				2			
29845951	2		29845848.0	2015-04-24 11:09:15		0		"<p>Try this:</p>

<pre><code>var qry = datatable1.AsEnumerable()
    .GroupBy(a=&gt;a.Field&lt;type&gt;(""FieldB""))
    .Select(grp=&gt;new
          {
             value = grp.Key,
             count = grp.Count(c=&gt;c.Field&lt;type&gt;(""FieldC""))
          });
</code></pre>

<p>Replace <code>type</code> with proper data type, such as: <code>int</code>, <code>string</code>, etc.</p>
"	2142028.0					2015-04-24 11:09:15				0			
30178491	1	30179344.0		2015-05-11 22:11:09		0	77.0	"<p>Let's say I have an <code>IEnumerable</code> of key/value pairs, that contains duplicates.  If I call <code>ToLookup</code> on it and pass lambdas that select the key and the value, I'll end up with a <code>Lookup</code> where all the keys are unique, but the lists of values can contain duplicates.  Is there any good way to end up with a <code>Lookup</code> where none of the lists of values contain duplicates, in a single LINQ query statement?</p>

<p>I can't call <code>Distinct</code> on the original sequence it because the elements are duplicates by value but not by object identity, and <code>Distinct</code> doesn't take a lambda for a selector that I could use.</p>
"	32914.0					2015-05-11 23:59:36	How to produce a fully unique lookup?	<.net><linq>	3.0	1			
30179375	2		30178491.0	2015-05-11 23:41:07		0		"<p>You can use a little <code>GroupBy</code> hack instead of <code>Distinct</code>:</p>

<pre><code>var lookup = source.GroupBy(i =&gt; get_unique_id(i),
    (key, group) =&gt; group.First()).ToLookup(i =&gt; i.Key, i =&gt; i.Value);
</code></pre>

<p><code>GroupBy</code> will create groups based on the ""unique value"" you choose. The call to <code>group.First</code> will only keep one element of that group. So you remove all others with the same ""unique value"" or ""group criteria"". This is basically an extended <code>Distinct</code>.</p>

<p><code>get_unique_id</code> should return the same value for the same key/value combination and a different value otherwise.</p>
"	3431124.0		3431124.0		2015-05-11 23:48:22	2015-05-11 23:48:22				0			
33236226	2		33236020.0	2015-10-20 12:06:06		0		"<pre><code>var nonintersect = modifiedList.Except(originalList);
</code></pre>

<p>and you need to implement comparer by isActive field </p>
"	904515.0					2015-10-20 12:06:06				0			
36324676	2		36322037.0	2016-03-31 05:15:16		0		"<p>You can do this:</p>

<pre><code>using System;
using System.Collections.Generic;
using System.Linq;

namespace SO36322037
{
    class Record
    {
        public string Warehouse { get; set; }
        public string Goods { get; set; }
    }

    class Program
    {

        static void Main()
        {
            var list = new List&lt;Record&gt;
            {
                new Record {Warehouse = ""A"", Goods = ""apple""},
                new Record {Warehouse = ""A"", Goods = ""orange""},
                new Record {Warehouse = ""B"", Goods = ""apple""},
                new Record {Warehouse = ""B"", Goods = ""banana""},
            };

            var result = list.GroupBy(l =&gt; l.Warehouse, l =&gt; l.Goods).ToList();
            foreach (var warehouse in result)
            {
                Console.WriteLine($""Warehouse: {warehouse.Key}"");
                foreach (var goods in warehouse)
                {
                    Console.WriteLine($""\tGoods: {goods}"");
                }
            }

            // This is your object A
            var A = result.Single(x =&gt; x.Key == ""A"").ToList();

            // This is your object B
            var B = result.Single(x =&gt; x.Key == ""B"").ToList();

        }
    }
}
</code></pre>
"	284111.0		284111.0		2016-03-31 05:25:09	2016-03-31 05:25:09				0			
40232183	1			2016-10-25 05:45:03		0	82.0	"<pre><code>if (regionTerritory.Any(m =&gt; m.Region == int.Parse(region.RegionCode)))
{
    // region exists, add territory
    regionTerritory.First(m =&gt; m.Region == int.Parse(region.RegionCode)).Territories.Add(int.Parse(region.TerritoryCode), region.TerritoryName);
}
</code></pre>

<p>Can anybody tell me what does this means ?
also what is <strong>m</strong> in above code and <strong>Any</strong>, <strong>First</strong> and <strong>Add</strong>  ?</p>

<p>Thanks in Advance.</p>
"	4912081.0		22656.0		2016-10-25 05:46:25	2016-10-25 09:12:44	Linq expression meaning	<.net><linq>	2.0	1			
777482	2		777400.0	2009-04-22 14:29:50		6		"<p>One basic one that I see in LINQ to SQL is not understanding <strong>DataContext</strong>. It is a Unit of Work object and should be re-created for each unit of work. </p>
"	73794.0		73794.0		2009-04-22 14:46:33	2009-04-22 14:46:33				2			
779146	1	779183.0		2009-04-22 20:44:54		17	3971.0	"<p>What are some clever uses for LINQ outside of LINQ to SQL? </p>

<p>Have you found any problems that LINQ made a whole lot easier to solve? Please post examples.</p>
"	73794.0					2015-06-09 09:27:31	What are some clever uses of LINQ?	<.net><linq>	9.0	0	30.0		
807207	2		777400.0	2009-04-30 14:30:50		2		"<p>Speaking for myself, knowing when a sequence will be buffered or streamed is important. </p>

<p>Filling a buffer with large amounts of data will consume lots of memory. If possible, operations like reversing, counting, ordering, etc. should be done once the data has been reduced. In joins the left sequence is streamed and the right is buffered. When there's a significant difference in size, put the smaller one on the right.</p>
"	2287940.0					2009-04-30 14:30:50				0			
876078	2		876054.0	2009-05-18 03:00:39		1		"<p>I did it with a switch statement. Here is a snippet, where I am going in ascending direction. In my url I passed in a parameter to determine the direction, and what to sort by.</p>

<pre><code>if (sortDirection == ""asc"")
{
    switch (sortCol)
    {
        case 1:
            q = from f in q
                orderby f.Id ascending
                select f;
</code></pre>

<p>q is obviously the result of the original LINQ select.</p>
"	67566.0					2009-05-18 03:00:39				0			
919506	2		919483.0	2009-05-28 06:49:37		4		"<p>I suspect it's because the ""ToString"" part of your query is being performed in SQL rather than in .NET. You should be able to confirm this by checking the SQL which is being executed.</p>

<p>Try fetching the <code>FromTime</code> property directly and then call <code>ToString()</code> on the result instead. You can force processing to be performed at the .NET side using <code>AsEnumerable</code> if you want to keep it all in a LINQ query:</p>

<pre><code>var time = SomeSimpleQuery.Select(t =&gt; t.FromTime)
                          .AsEnumerable()
                          .Select(t =&gt; new { time = t.ToString() });
</code></pre>

<p>If you want to fetch other things, just pass those through:</p>

<pre><code>var query = SomeSimpleQuery.Select(row =&gt; new { UserId=row.UserId,
                                                Query=row.Query,
                                                Time=t.FromTime })
                           .AsEnumerable()
                           .Select(t =&gt; new { t.UserId, t.Query,
                                              Time=t.FromTime.ToString() });
</code></pre>
"	22656.0		22656.0		2009-05-28 07:45:56	2009-05-28 07:45:56				3			
1028870	2		1028846.0	2009-06-22 19:03:35		0		"<p>1) Yes, that is one way of doing it. I'm sure there are others.<br>
2) Yes. Definitely.</p>

<p>Linq takes longer because it is doing a lot more. It has to create <strike>an expression tree, evaluate the expression</strike> an iterator, which calls the strings enumerator to move along the string the required number of characters, then do it all again for your second method call, then convert the whole lot to an array, then create a new string and process the array into the new string.</p>

<p>All the substring call has to do is a bit of pointer arithmetic to extract the middle portion of the string and return the new string.</p>

<p>This is a perfect example of an absolutely terrible use for Linq. Linq is for helping the developer with complex queries on enumerable or query-able data, not processing strings. Here the overhead of Linq by far outweighs any benefits in readability. Stick with the substring call.</p>

<p>[Edit: Corrected linq details following comments from Marc]</p>
"	119738.0		119738.0		2009-06-23 07:59:10	2009-06-23 07:59:10				2			
1245464	2		262110.0	2009-08-07 15:37:14		0		"<p>A join (using the join keyword, but not the from keyword) uses a Dictionary for the matches and is thus <code>O(M+N)</code>.</p>

<p>So is a group by, but not the following:</p>

<pre><code>from x in Xs
from y in Ys
    .Where(o =&gt; o == x)
select new
{
    x,
    y
}
</code></pre>

<p>which is <code>O(M*N)</code>.</p>
"		David	496830.0		2011-11-21 20:44:13	2011-11-21 20:44:13				0			
43250304	2		12972295.0	2017-04-06 08:53:27		0		"<p>Instead of <code>YourCollection.FirstOrDefault()</code>, you could use <code>YourCollection.DefaultIfEmpty(YourDefault).First()</code> for example.</p>
"	7030032.0		4390133.0		2017-04-06 10:29:57	2017-04-06 10:29:57				1			
45128259	2		45128096.0	2017-07-16 11:53:42		0		"<p>Did the insert using <code>List&lt;&gt;.Insert()</code>.</p>
"	844136.0		1334695.0		2017-07-16 18:59:19	2017-07-16 18:59:19				0			
47312476	2		47312193.0	2017-11-15 16:24:08		1		"<p>You could just make the database do the filtering for you instead of bringing back all the children records:</p>

<pre><code>var group = await _database.Groups.AsQueryable()
    .Where(g =&gt; g.Pk == id)
    .Select(g =&gt; new {
          Children = g.Children.Where(c =&gt; c.Active).ToList(),
          Documents = g.Documents.ToList() } )
    .SingleOrDefaultAsync();
</code></pre>
"	4079967.0					2017-11-15 16:24:08				3			
47460993	1	47461783.0		2017-11-23 17:40:25		1	47.0	"<p>I am using a data transfer object (named: SearchSpec) with alot of nullable bools... </p>

<pre><code>...
public bool? AL { get; set; }
public bool? TL { get; set; }
...
</code></pre>

<p>...to filter data from a table using LINQ...</p>

<pre><code>var query = (from wv in Source select row); //Init query

if (SearchSpec.AL != null)
{
    query = (from wv in query
             where (wv.AL == SearchSpec.AL)
             select wv);
}

if (SearchSpec.TL != null)
{
    query = (from wv in query
             where (wv.TL == SearchSpec.TL)
             select wv);
}
...
return query.ToList();
</code></pre>

<p>...which works fine. If a bool is not null, I am using it to filter, otherwise I ignore it.</p>

<p>Now I have to filter some data with more than 50 flags like the two in my example (AL, TL). I could just copy and paste the if-statement like 50 times, but this can't be the right way...</p>

<p>My idea is, to use one big query like</p>

<pre><code>var query = (from wv in Source select row); //Init query

query = (from wv in query
         where (SearchSpec.AL!=null &amp;&amp; wv.AL==SearchSpec.AL)
         &amp;&amp; (SearchSpec.TL!=null &amp;&amp; wv.TL==SearchSpec.TL)
         ...
         select wv);
</code></pre>

<p>This seems better, but it is still copy and paste.</p>

<p>To the point: Is there a way to generate these statements dynamically, for example by using reflection to get all Properties of type <code>bool?</code> and then... well, this is my question.</p>
"	5208248.0					2017-11-23 18:52:11	Dynamically Create LINQ Statements	<.net><linq>	1.0	0			
50544269	1	50544598.0		2018-05-26 15:24:37		0	47.0	"<p>I have a list of products and every product have a string filed that is contain a list of tags that are concate with ""#"" character like this:</p>

<blockquote>
  <p>Tag1#Tage2#Tag3</p>
</blockquote>

<p>I need to get all tags and order them by their number of their repeats.</p>

<p>I actually did this like this:</p>

<pre><code>List&lt;string&gt; t = new List&lt;string&gt;();

var tags = (from p in db.Products
                    where p.Active
                    select p.Tags
                    ).ToList();

foreach (var item in tags)
{
   if (item == null)
      continue;
   var d = item.Split('#');
   foreach (var item2 in d)
   {
      t.Add(item2);
   }
}

var ans = t.GroupBy(p =&gt; new { id = p }).Select(g =&gt; new { id = g.Key.id, total = g.Count() }).OrderByDescending(g =&gt; g.total).ToList();
</code></pre>

<p>but im sure its not simple (and maybe optimized). Can someone help me to make this code simpler and better? for example with Linq statement etc..</p>
"	5468052.0			user3559349	2018-05-26 22:15:31	2018-05-26 22:15:31	How change a list of array of strings to a list of string	<.net><linq>	1.0	0			
53546577	2		53543491.0	2018-11-29 19:53:24		1		"<p>You expect your <code>NewsSort</code> to magically work out what interface implementation you passed to it and then modify a property on said implementation, which simply isn't possible.</p>

<p>You have to add <code>NewsDate</code> as property to the interface <code>ISort</code> so it's shared between implementations and can be accessed that way!</p>

<pre><code>public interface ISort
{
    DateTime NewsDate { get; set; }
}

public interface ISorter
{
    IQueryable&lt;T&gt; NewsSort&lt;T&gt;(IQueryable&lt;T&gt; query) where T : ISort;
}

public class FinalResults : ISort
{
    public DateTime NewsDate { get; set; }
}

public class NewsSorter : ISorter
{
    public IQueryable&lt;T&gt; NewsSort&lt;T&gt;(IQueryable&lt;T&gt; query) where T : ISort
    {
        return query.OrderByDescending(p =&gt; p.NewsDate);
    }
}
</code></pre>
"	9456781.0		9456781.0		2018-11-29 20:58:31	2018-11-29 20:58:31				1			
1404048	2		1404039.0	2009-09-10 08:25:14		15		"<p>Check the documentation again:</p>

<ul>
<li><a href=""http://msdn.microsoft.com/en-us/library/bb534972.aspx"" rel=""nofollow noreferrer""><code>Any&lt;&gt;</code></a> returns a <code>bool</code> indicating whether at least one item meets the criteria</li>
<li><a href=""http://msdn.microsoft.com/en-us/library/bb549418.aspx"" rel=""nofollow noreferrer""><code>Where&lt;&gt;</code></a> returns an <code>IEnumerable</code> containing the items that meet the criteria</li>
</ul>

<p>There may be a performance difference in that <code>Any</code> stops as soon as it can determine the result (when it finds a matching item), while <code>Where</code> will need to always loop over all items before returning the result. So if you only need to check whether there are any matching items, <code>Any</code> will be the method for the job.</p>
"	93623.0		93623.0		2009-09-10 08:32:45	2009-09-10 08:32:45				3			
1404050	2		1404039.0	2009-09-10 08:25:42		3		"<p><code>Any</code> returns a <code>bool</code> while <code>Where</code> returns an <code>IQueryable</code>. Being lazy, one would expect <code>Any</code> to terminate as soon as one satisfying element is found (returning true) while <code>Where</code> will search them all.</p>

<p>If you want to select a single customer, <a href=""http://msdn.microsoft.com/en-us/library/bb534800.aspx"" rel=""nofollow noreferrer""><code>Single</code></a> is what you are looking for.</p>
"	46642.0		46642.0		2009-09-10 08:44:21	2009-09-10 08:44:21				0			
1415797	2		1415777.0	2009-09-12 18:32:04		6		"<p>Not directly. You could fairly easily write a <code>SingleShotEnumerable&lt;T&gt;</code> though:</p>

<pre><code> public sealed class SingleShotEnumerable&lt;T&gt; : IEnumerable&lt;T&gt;
 {
     private IEnumerator&lt;T&gt; enumerator;

     public SingleShotEnumerable(IEnumerator&lt;T&gt; enumerator)
     {
         if (enumerator == null)
         {
             throw new ArgumentNullException(""enumerator"");
         }
         this.enumerator = enumerator;
     }

     public IEnumerator&lt;T&gt; GetEnumerator()
     {
         if (enumerator == null)
         {
             throw new InvalidOperationException
                 (""GetEnumerator can only be called once"");
         }
         var ret = enumerator;
         enumerator = null;
         return ret;
     }

     IEnumerator IEnumerable.GetEnumerator()
     {
         return GetEnumerator();
     }
 }
</code></pre>

<p>This is assuming you <em>actually</em> have an <code>IEnumerator&lt;T&gt;</code>. If you just have <code>IEnumerator</code>, you could write something similar only implementing <code>IEnumerable</code>, then use <code>Cast</code> or <code>OfType</code> to get to an <code>IEnumerable&lt;T&gt;</code>.</p>

<p>(Note: this isn't thread-safe. You could make it so with locks if you really wanted.)</p>

<p>You could then do:</p>

<pre><code> var filtered = from person in new SingleShotEnumerable&lt;Person&gt;(personEnumerator)
                where person.Age &gt; 18
                select person.Name;
</code></pre>

<p>... but you couldn't use the query twice.</p>

<p>How have you got into the strange situation of only having an <code>IEnumerator&lt;T&gt;</code> anyway? That's quite rare. See if you can design your way around that to avoid having to do something like the above, which is quite fragile.</p>

<p>(An alternative would be to ""drain"" the <code>IEnumerator&lt;T&gt;</code> to a <code>List&lt;T&gt;</code> or something similar, but that has problems dealing with large or potentially <em>infinite</em> sequences.)</p>
"	22656.0		51428.0		2013-09-30 14:30:42	2013-09-30 14:30:42				2			
1842243	2		1842228.0	2009-12-03 19:17:55		0		"<p>I am not 100% clear on your entities and their relationships, but this will get you started.</p>

<p>It sounds like you're trying now to further query from your <code>resultSet</code> object. If wanting A and C, then it sounds like the FK would be null.</p>

<pre><code>var cEntities = resultSet.Where(e=&gt;e.prevEntityID == null).ToList();
</code></pre>
"	23199.0					2009-12-03 19:17:55				1			
2094359	1	2094386.0		2010-01-19 15:00:48		5	207.0	"<p>How do you promote and/or sell LINQ syntax to colleague that doesn't see the benefit over the manual way of doing thing?</p>

<p>For an example using Linq to Entity/Sql instead of using plain ado.net without any LINQ.</p>
"	40868.0					2010-01-19 16:05:49	How to promote and/or sell LINQ to colleague?	<.net><linq>	8.0	0			2010-01-19 15:00:48
11359967	2		11359828.0	2012-07-06 09:55:39		1		"<pre><code>Hello try with (Essaye avec ce code Wild)

(from asset in selectedItems.AsEnumerable()

select new
{
   ID= asset.Field&lt;String&gt;(""ID""),
   Language= asset.Field&lt;String&gt;(""Language"")
})
.AsEnumerable()
.ToDictionary(k =&gt; k.ID, v =&gt; v.Language);
</code></pre>
"	1036390.0					2012-07-06 09:55:39				1			
11359993	2		11359828.0	2012-07-06 09:57:21		2		"<p>I'm not sure what you really want to achieve. The easiest way to get a <code>List</code> instead of <code>IEnumerable</code> is using <code>ToList()</code> extension method:</p>

<pre><code>List&lt;Tuple&lt;string, string&gt;&gt; ids=
            (from asset in selectedItems.AsEnumerable()
            select new Tuple&lt;string, string&gt;(asset[""ID""].ToString(), 
            asset[""Language""].ToString())).ToList();
</code></pre>

<p>If you want to get <code>IEnumerable&lt;List&lt;&gt;&gt;</code> where each list contains only rows for single Language, you can use grouping syntax:</p>

<pre><code>IEnumerable&lt;List&lt;Tuple&lt;string, string&gt;&gt;&gt; ids=
            from asset in selectedItems.AsEnumerable()
            group asset by asset[""Language""].ToString() into g
            select g.Select(i =&gt; new Tuple&lt;string, string&gt;(i[""ID""].ToString(), 
            i[""Language""].ToString())).ToList();
</code></pre>
"	1163867.0		1163867.0		2012-07-06 10:07:55	2012-07-06 10:07:55				1			
11523892	2		11523837.0	2012-07-17 13:48:08		8		"<p>Take a look at <a href=""http://msdn.microsoft.com/en-us/library/wdka673a""><code>List&lt;T&gt;.RemoveAll</code></a></p>

<pre><code>aList.RemoveAll(x =&gt; bList.Contains(x))
</code></pre>

<p>FWIW, this will also remove all objects in <code>aList</code> contained in <code>bList</code>, not only the first instance of each <code>bList</code> object in <code>aList</code>, if this is important.</p>
"	44853.0		44853.0		2012-07-17 14:01:32	2012-07-17 14:01:32				4			
12181652	2		12181276.0	2012-08-29 15:41:25		7		"<p>You may want to look at subclassing the <a href=""http://msdn.microsoft.com/en-us/library/system.linq.expressions.expressionvisitor.aspx"" rel=""nofollow noreferrer"">ExpressionVisitor</a> class. This provides the mechanism to walk the expression tree, all you have override the methods to process each type of node.</p>

<p>Also, see the related (possibly duplicate) SO question: <a href=""https://stackoverflow.com/questions/252751/where-are-some-good-tutorials-on-writing-a-custom-linq-provider"">Where are some good tutorials on writing a custom LINQ Provider?</a></p>

<p>Edit: Here are some other links you may find helpful:</p>

<p><a href=""http://msdn.microsoft.com/en-us/library/bb397951.aspx"" rel=""nofollow noreferrer"">Expression Trees (MSDN article)</a></p>

<p><a href=""http://blogs.msdn.com/b/charlie/archive/2008/01/31/expression-tree-basics.aspx"" rel=""nofollow noreferrer"">Expression Tree Basics (blog post)</a></p>
"	166131.0		-1.0		2017-05-23 12:33:35	2012-08-29 15:46:30				1			
12460250	1	12460277.0		2012-09-17 13:27:33		3	63.0	"<p>I have 2 linq statements, below</p>

<pre><code>// Extracts a list of int from List&lt;BookmarkedDeal&gt;         
IEnumerable&lt;int&gt; IDs = user.BookmarkedDeals.Select(d =&gt; d.DealId);

// Calls method to return List&lt;Deal&gt; using IDs from previous statement
IEnumerable&lt;Deal&gt; deals = DealBL.FindActiveById(IDs).OrderBy(d =&gt; d.Store.Name);
</code></pre>

<p>I think it's possible but I can't get my head around it at the moment.</p>
"	1437135.0		783681.0		2012-09-17 15:05:59	2012-09-17 15:05:59	Can 2 linq statements be made into 1?	<.net><linq>	2.0	2			
12875931	2		12875895.0	2012-10-13 18:49:35		1		"<p>You're changing the StyleID of the Where method, not each cell. You need to iterate all cells and set the StyleID of each one of them.</p>
"	1495902.0					2012-10-13 18:49:35				1			
12972438	2		12972295.0	2012-10-19 10:33:46		19		"<p>From the documentation for <a href=""http://msdn.microsoft.com/en-us/library/bb340482.aspx"">FirstOrDefault</a></p>

<blockquote>
  <p>[Returns] default(TSource) if source is empty;</p>
</blockquote>

<p>From the documentation for <a href=""http://msdn.microsoft.com/en-us/library/xwth0h0d.aspx"">default(T)</a>:</p>

<blockquote>
  <p>the default keyword, which will return null for reference types and zero for numeric value types. For structs, it will return each member of the struct initialized to zero or null depending on whether they are value or reference types. For nullable value types, default returns a System.Nullable, which is initialized like any struct.</p>
</blockquote>

<p>Therefore, the default value can be null or 0 depending on whether the type is a reference or value type, but you cannot control the default behaviour.</p>
"	15393.0					2012-10-19 10:33:46				1			
53885164	1			2018-12-21 12:55:36		0	33.0	"<p>I am working on Linq query. Basically I am trying to find average daily working hours between login and logout.</p>

<p>The catch is, user can login and logout multiple times each day or can login on one day and logout in a later day,</p>

<p>I am just in the middle of query making so far I have something like this</p>

<pre><code>    MinutesLoggedIn=(w.logoutdatetime.Value-w.logindatetime.Value).Minutes,
                            startDate=w.logindatetime,
             thatDayWorked = 1440 - (w.logoutdatetime.Value - w.logindatetime.Value).Minutes &gt; 0 ? 1440 - w.logindatetime.Value.Minute : w.logoutdatetime.Value.Minute - w.logindatetime.Value.Minute             

             });
</code></pre>

<p>I am able to find difference between login logout but without following the required assumptions. Any help will be appreciated</p>
"	4808760.0		4808760.0		2018-12-21 13:05:15	2018-12-21 13:10:51	Linq average working hours between login and logout	<.net><linq>	1.0	1			
55075887	2		55071585.0	2019-03-09 09:30:25		1		"<p>From your example, I assume that you want to recombine your array into a string with space as separator, then split it again, but refrain from splitting quoted substrings. Adapting the regex from <a href=""https://stackoverflow.com/a/554068/1149773"">this answer</a>, this could be your solution:</p>

<pre><code>string[] arr = new [] { ""a"", ""b"", ""\""b"", ""c\"""", ""c"" };
var result = Regex
    .Matches(string.Join("" "", arr), @""(?&lt;match&gt;[^\s""""]+)|""""(?&lt;match&gt;[^""""]*)"""""")
    .Cast&lt;Match&gt;()
    .Select(m =&gt; m.Groups[""match""].Value)
    .ToList();
</code></pre>
"	1149773.0		1149773.0		2019-03-09 10:08:06	2019-03-09 10:08:06				0			
55219824	2		2724096.0	2019-03-18 11:00:15		-1		"<pre><code>Lets below are the records in Employee entity

Employeeid = 1: Only one employee with this ID 
Firstname = Robert:   More than one employee with this name 
Employeeid = 10: No employee   with this ID

Now understand what Single() and First() in detail

**Single()**
Single() is use to return single record which exists only one in a table, so below query will return Employee whose employee id =1 because we have Employee is one whose Employee id is 1. If we have two records for EmployeeId = 1 then it give the error, kindly see error below in second query where  we are taking example of name. 
Employee.Single(e =&gt; e.Employeeid == 1)
Above will return single record, which have 1 employeeId

Employee.Single(e =&gt; e.Firstname == ""Robert"")
Above will give exception because multilple records are in table for FirstName='Robert' 
And exception will be
InvalidOperationException: Sequence contains more than one element

Employee.Single(e =&gt; e.Employeeid == 10)
Above again will throw exception because no record exists for id=10 and exception will be
InvalidOperationException: Sequence contains no elements.
For EmployeeId = 10 it will return null but we are using only Single() then it will give error to handle null error we should use SingleOrDefault().

**First()**
First() return from multiple same records according to order as we using ascending order on birthdate so it will return 'Rober' who is oldest.
Employee.OrderBy(e =&gt; e. Birthdate)
.First(e =&gt; e.Firstname == ""Robert"")
Above should return the oldest one robert as per DOB


Employee.OrderBy(e =&gt; e. Birthdate)
.First(e =&gt; e.Employeeid == 10)
Above will give the exception as no record for id =10 
To avoid null exception we should use FirstOrDefault() not only First().

Note: We can use only First()/Single() when we damn sure that it must going to return not null value.


In both function **SingleOrDefault() OR FirstOrDefault()**
It will handled null exception, in case of no record found it will give null.
</code></pre>
"	7404931.0		7404931.0		2019-03-19 15:22:23	2019-03-19 15:22:23				2			
13232030	2		13229048.0	2012-11-05 12:21:51		0		"<p>For my specific problem it turns out that having Maybe implement IEnumerable is the way to go and it make supporting IOBservable trivial as well. My two test cases which now pass.</p>

<pre><code>    [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod]
    public void TestEnumOfMaybe()
    {
        List&lt;Maybe&lt;int&gt;&gt; l = new List&lt;Maybe&lt;int&gt;&gt;();
        l.Add(1.ToMaybe());
        l.Add(Maybe.None&lt;int&gt;());
        l.Add(3.ToMaybe());

        var k = from q in l
                from y in q
                select y;

        k.Should().BeEquivalentTo(new[] { 1, 3 });

    }

    [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod]
    public void TestObservableOfMaybe()
    {
        List&lt;Maybe&lt;int&gt;&gt; l = new List&lt;Maybe&lt;int&gt;&gt;();
        l.Add(1.ToMaybe());
        l.Add(Maybe.None&lt;int&gt;());
        l.Add(3.ToMaybe());

        var o = l.ToObservable();

        var k = from q in o
                from y in q
                select y;

        var m = k.ToEnumerable();

        m.Should().BeEquivalentTo(new[] { 1, 3 });

    }
</code></pre>

<p>In general I think the LINQ system forbids chaining different types together even if the SelectMany signatures will line up. I'm yet to be convinced otherwise.</p>
"	158285.0					2012-11-05 12:21:51				0			
13345853	1	13345937.0		2012-11-12 14:51:42		4	81.0	"<p>I have a query thatworks fine if it returns a SINGLE row.However, if there are multiple rows, it will:</p>

<ol>
<li>create the correct quantity of rows</li>
<li>incorrectly assign each row to the value of the final row...In this case, it will return x3 rows of , as this is the final node that satisfies the query.</li>
</ol>

<p>I'd have expected it to return x3 DISTINCT rows.
Can anyone suggest why the distinct values are being overwritten by the final xml node?</p>

<p>Thanks</p>

<pre><code>&lt;?xml version=""1.0"" encoding=""utf-8"" ?&gt;
&lt;Music&gt;
&lt;customer id=""89""&gt;
    &lt;name value=""Sample Name 2"" /&gt;
    &lt;age value=""31"" /&gt;
    &lt;location&gt;
        &lt;city value=""Wichita"" /&gt;
        &lt;state value=""KS"" /&gt;
        &lt;country value=""USA"" /&gt;
    &lt;/location&gt;
&lt;/customer&gt;
&lt;customer id=""80""&gt;
    &lt;name value=""Sample Name 3"" /&gt;
    &lt;age value=""41"" /&gt;
    &lt;location&gt;
        &lt;city value=""Seattle"" /&gt;
        &lt;state value=""WA"" /&gt;
        &lt;country value=""USA"" /&gt;
    &lt;/location&gt;
&lt;/customer&gt;
&lt;customer id=""84""&gt;

    &lt;name value=""Sample Name"" /&gt;
    &lt;age value=""29"" /&gt;
    &lt;location&gt;
        &lt;city value=""Los Angeles"" /&gt;
        &lt;state value=""CA"" /&gt;
        &lt;country value=""USA"" /&gt;
    &lt;/location&gt;
&lt;/customer&gt;
&lt;customer id=""100""&gt;
    &lt;name value=""Rock UK"" /&gt;
    &lt;age value=""25"" /&gt;
    &lt;location&gt;
        &lt;city value=""Los Angeles"" /&gt;
        &lt;state value=""CA"" /&gt;
        &lt;country value=""USA"" /&gt;
    &lt;/location&gt;
&lt;/customer&gt;
&lt;/Music&gt;
</code></pre>

<p>The code is as follows:</p>

<pre><code>private List&lt;Music&gt; currentMusic { get; set; }
    private IEnumerable&lt;Music&gt; GetCustomer(string id)
    {
        XElement main = XElement.Load(@""D:\work\web\App_Data\Customers.xml"");

        IEnumerable&lt;XElement&gt; searched =
            from c in main.Elements(""customer"")
                where (string)c.Attribute(""id"") != ""100""

            select c;

        Music music = new Music();


        currentMusic = new List&lt;Music&gt;();

        foreach (XElement customer in searched)
        {                
            music.Country = customer.Element(""name"").Attribute(""value"").Value;
            music.Name = customer.Element(""age"").Attribute(""value"").Value;
            currentMusic.Add(music);
        }
        return currentMusic;
    }        
</code></pre>
"	1736356.0		1271826.0		2012-11-12 15:10:06	2012-11-12 15:10:06	.NET Linq to XML: final value overwrites the previous DISTINCT values	<.net><linq>	1.0	0			
13741771	1	13741841.0		2012-12-06 10:36:17		-1	5152.0	"<p>What is the difference between Skip() and SkipWhile() extension methods in Linq?</p>
"	792713.0					2012-12-06 10:56:38	Skip() vs Skipwhile() in Linq	<.net><linq>	2.0	3		2012-12-06 13:32:00	
2141388	2		2141360.0	2010-01-26 17:46:22		2		"<p>The only difference I can see is how the compiler would generate the lambda. In the second version, the value is captured and not referenced, and this will have an effect in a multithreaded environment.</p>
"	58391.0					2010-01-26 17:46:22				2			
2436932	2		2436924.0	2010-03-13 01:42:36		3		"<p>In terms of resources <a href=""http://www.linqpad.net/"" rel=""nofollow noreferrer"">LINQPad</a> is quite handy. Plus a few <a href=""http://windowsclient.net/learn/videos_LINQ.aspx"" rel=""nofollow noreferrer"">video tutorials</a> here should be useful too.</p>

<p>cheers</p>
"	68920.0					2010-03-13 01:42:36				0			
2657436	2		2657421.0	2010-04-17 05:59:13		2		"<p>It is:</p>

<pre><code>var maxObjects =
    from o in myList
    group o by o.Name into g
    select new { Name = g.Key, Created = g.Max(o =&gt; o.Created) };
</code></pre>

<p>See <a href=""http://msdn.microsoft.com/en-us/vcsharp/aa336746.aspx"" rel=""nofollow noreferrer"">101 Linq samples</a> to see how Linq can be used.</p>
"	1583.0					2010-04-17 05:59:13				0			
2677265	2		2677231.0	2010-04-20 17:29:33		1		"<p>Assuming you want to get back the instance of <code>ObjectB</code> in <code>ObjectA</code> that contains the specified <code>ObjectC</code>:</p>

<pre><code>public ObjectB FindObjectCContainer(ObjectA source, ObjectC value)
{
    return source.ObjectBs.Where(b =&gt; b.ObjectCs.Contains(value)).FirstOrDefault();
}
</code></pre>

<p>I assume here that <code>ObjectA.ObjectBs</code> and <code>ObjectB.ObjectCs</code> are both, at a minimum, an <code>IEnumerable&lt;ObjectB&gt;</code> and <code>IEnumerable&lt;ObjectC&gt;</code> (respectively).</p>
"	82187.0					2010-04-20 17:29:33				0			
2724142	2		2724096.0	2010-04-27 18:59:02		66		"<p>Single will throw an exception if it finds more than one record matching the criteria. 
First will always select the first record from the list. If the query returns just 1 record, you can go with <code>First()</code>. </p>

<p>Both will throw an <code>InvalidOperationException</code> exception if the collection is empty. 
Alternatively you can use <code>SingleOrDefault()</code>. This won't throw an exception if the list is empty</p>
"	295820.0		1505865.0		2015-05-13 07:06:44	2015-05-13 07:06:44				0			
2893608	2		2893601.0	2010-05-23 21:47:36		25		"<p>Make sure you are referencing <code>System.Core.dll</code> in your project.  The <code>IQueryable&lt;T&gt;</code> type is defined in that assembly (just as it was in .NET 3.5).</p>
"	34211.0					2010-05-23 21:47:36				2			
2893609	2		2893601.0	2010-05-23 21:47:43		3		"<p>Make sure you have a reference to System.Core.dll in your project - I believe System.Linq resides there.</p>
"	62002.0					2010-05-23 21:47:43				0			
2922371	1	2922574.0		2010-05-27 15:15:48		0	130.0	"<p>I have the following List which contains the following collection. </p>

<p>How i can transform this with linq so that i get nested items. </p>

<pre><code> var categories = new List&lt;Category&gt;(); // id, parentId, name
        categories.Add(1, 0, ""Sport"");
        categories.Add(2, 0, ""Pets"");
        categories.Add(3, 1, ""Foot ball"");
        categories.Add(4, 2, ""Cat"");
        categories.Add(5, 3, ""Pele"");
        categories.Add(6, 4, ""whiskers"");
        // ie Pets - &gt; Cat - &gt; Whiskers





   public class Category
    {

        public int Id { get; set; }
        public int ParentId { get; set; }
        public ICollection&lt;Category&gt; Categories { get; set; }

    }
</code></pre>
"	461880.0		461880.0		2010-05-27 15:30:36	2010-05-27 20:34:06	creating a category list using linq	<.net><linq>	2.0	6			
2923138	2		2922371.0	2010-05-27 16:55:27		0		"<p>Here's one way to do it.
(edit, corrected for orphans, and returning all roots)</p>

<pre><code>List&lt;Category&gt; results = new List&lt;Category&gt;();
Dictionary quickCategories = categories.ToDictionary(c =&gt; c.ID);

foreach(var g in categories.GroupBy(c =&gt; c.ParentID))
{
  if quickCategories.ContainsKey(g.Key)
  {
    quickCategories[g.Key].Categories = g.ToList();
  }
  else
  {
    results.AddRange(g);
  }
}
</code></pre>
"	8155.0		8155.0		2010-05-27 20:34:06	2010-05-27 20:34:06				2			
3019251	1			2010-06-10 23:25:25		2	253.0	"<p>Getting my feet wet with Linq.  I am trying to determine the distinct values contained across four DataColumns.  So, I start with</p>

<pre><code>var c1types = (from DataRow row in dtSource.Select(""hasreq"")
               where row[""m""].ToInt() &gt; 0
               select new { col = row[""m""] }).Distinct();
var c2types = (from DataRow row in dtSource.Select(""hasreq"")
               where row[""w""].ToInt() &gt; 0
               select new { col = row[""w""] }).Distinct();
var c3types = (from DataRow row in dtSource.Select(""hasreq"")
               where row[""ag""].ToInt() &gt; 0
               select new { col = row[""ag""] }).Distinct();
var c4types = (from DataRow row in dtSource.Select(""hasreq"")
               where row[""aq""].ToInt() &gt; 0
               select new { col = row[""aq""] }).Distinct();

foreach (var type in c1types.Union(c2types).Union(c3types).Union(c4types).Distinct())
{
  ...
}
</code></pre>

<p>This works, but is very slow (4-5 seconds).  So, I put the following before the foreach</p>

<pre><code>MessageBox.Show(c1types.Count().ToString()); // 1 - immediate display
MessageBox.Show(c2types.Count().ToString()); // 1 - immediate display
MessageBox.Show(c3types.Count().ToString()); // 1 - immediate display
MessageBox.Show(c4types.Count().ToString()); // 0 - 4-5 seconds to display
</code></pre>

<p>With my sample data, each of the first three Selects returns a single distinct value (Count() == 1).  The fourth returns no values (Count() == 0).  What I don't understand is why it displays the first three counts instantaneously, but the fourth takes 4-5 seconds to display.  It would appear the empty result is the cause of the slowdown.  What is going on here, and what is the best workaround?</p>
"	356085.0					2010-07-17 17:27:08	Accessing empty Linq result is very slow	<.net><linq>	1.0	4	0.0		
14158209	2		14157404.0	2013-01-04 13:35:17		0		"<p>As I can see you are trying to find <strong>s.StructureId</strong> in database tables and you are bringing them to Application layer.</p>

<p>Maybe you'd better push all of your loginc in SQL Function Or SP and get final result only to application layer?</p>
"	350977.0					2013-01-04 13:35:17				1			
14163348	1			2013-01-04 19:10:16		1	129.0	"<p>I am not understanding the <code>Skip</code> method in LINQ - I have data that comes back from a web service. The data is fairly large and has grown over time so now I need to page through the records. </p>

<p>The piece code I am using is this:</p>

<pre><code>var res = proxy.FP_MEDIA_COUNT
    .Where(x =&gt; 
        x.Lot.ProductGroup.Promotion.Calendar.PriceGroup != null &amp;&amp;      
        ((x.Lot.ProductGroup.Promotion.Calendar.Year &gt; RetYear) || 
        (x.Lot.ProductGroup.Promotion.Calendar.Year == RetYear &amp;&amp; 
        ((x.Lot.ProductGroup.Promotion.Calendar.Season == RetSeason) || 
        (x.Lot.ProductGroup.Promotion.Calendar.Season == NextSeason))))
    )
    .Select(x =&gt; new { 
        PromoID = x.Lot.ProductGroup.Promotion.PromotionID, 
        Year = x.Lot.ProductGroup.Promotion.Calendar.Year, 
        Season = x.Lot.ProductGroup.Promotion.Calendar.Season, 
        BU = x.Lot.ProductGroup.Promotion.Calendar.PriceGroup.PriceGroupName, 
        Metric = x.Lot.Metric, 
        Lot = x.Lot, 
        Media = x.Media, 
        MediaType = x.Media.MediaType, 
        MediaSubType = x.MediaSubType 
     })
     .Take(10)
     .ToArray();
</code></pre>

<p>I see how to use the <code>Take</code> method and I sort of understand the <code>Skip</code> method but any time I place it before the <code>Take</code> method I get the error message:</p>

<blockquote>
  <p>An error occurred while executing the command definition.</p>
</blockquote>

<p>This isn't really helpful.</p>

<p>Can anybody instruct me on where the <code>Skip</code> method should be placed or a better way to do this?</p>
"	94608.0		50776.0		2013-01-05 15:54:08	2013-01-05 15:54:08	Paging through a large set in LINQ	<.net><linq>	0.0	8			
14224837	2		14224751.0	2013-01-08 22:05:00		3		"<p>The simplest way is probably to do a group join:</p>

<pre><code>var totalsByMonth = Enumerable.Range(1, 12)
      .GroupJoin(osman,
                 month =&gt; month,
                 record =&gt; record.Field&lt;DateTime&gt;(""CreateDate"").Month,
                 (month, records) =&gt; records.Sum(r =&gt; r.Field&lt;decimal&gt;(""Price"")))
      .ToList();
</code></pre>

<p>(I've used <code>Field&lt;decimal&gt;</code> rather than <code>Convert.ToDecimal</code> as I think it's usually cleaner; change it if you need to, of course.)</p>
"	22656.0					2013-01-08 22:05:00				2			
17218321	2		17218261.0	2013-06-20 15:56:19		2		"<p>Apply ordering after distinct:</p>

<pre><code>public JsonResult OverrideSearch(string term)
{
    var drm = db.ZipCodeTerritory
                .Where(d =&gt; d.DrmTerrDesc.Contains(term))
                .Select(d =&gt; d.DrmTerrDesc)
                .Distinct()
                .OrderBy(d =&gt; d);

    return Json(drm, JsonRequestBehavior.AllowGet);
}
</code></pre>

<p>Or with query syntax (I don't like to mix query and method syntax):</p>

<pre><code>public JsonResult OverrideSearch(string term)
{
    var drm = from d in db.ZipCodeTerritory
              where d.DrmTerrDesc.Contains(term)
              select  d.DrmTerrDesc;

    drm = drm.Distinct();

    return Json(drm.OrderBy(d =&gt; d), JsonRequestBehavior.AllowGet);
}
</code></pre>

<p>BTW there is a remark on <a href=""http://Queryable.Distinct"" rel=""nofollow"">Queryable.Distinct</a> method at MSDN which tells that it usually returns unordered sequence:</p>

<blockquote>
  <p>The query behavior that occurs as a result of executing an expression
  tree that represents calling Distinct(IQueryable)
  depends on the implementation of the type of the source parameter. The
  expected behavior is that it returns an unordered sequence of the
  unique items in source.</p>
</blockquote>
"	470005.0					2013-06-20 15:56:19				1			
3073406	1	3073416.0		2010-06-18 22:18:44		1	106.0	"<p>I have this code:</p>

<pre><code>public enum MyEnum
{
First = 6,
Data1 = 6,
Data2 = 7,
Data3 = 8,
Data4 = 9,
Data5 = 10,
Last = 10,
Invalid = -1
};

Enumerable&lt;int&gt; _myTypes = Enumerable.Range((int)MyEnum.First, (int)MyEnum.Last);
</code></pre>

<p>This creates an enumerable with elements from 6 to 15. I have equivalent code starting with 1 and it works as expected. This seems like a bug or very strange to me.</p>
"	254428.0					2010-06-18 22:25:08	Bug in enumerable.range?	<.net><linq>	3.0	0	2.0		
3871101	2		3870884.0	2010-10-06 09:25:37		0		"<p>Based on comments and the question, you want: for each distinct id, the instance with the maximum <code>dt</code>.</p>

<p>I would add a help method: <code>MaxBy</code> which allows a whole object to be selected based on the value of a function<sup>1</sup>:</p>

<pre><code>public static T MaxBy&lt;T,TValue&gt;(this IEnumerable&lt;T&gt; input, Func&lt;T,TValue&gt; projector)
                                where TValue : IComparable&lt;TValue&gt; {
  T found = default(T);
  TValue max = default(TValue);
  foreach (T t in input) {
    TValue p = projector(t);
    if (max.CompareTo(p) &gt; 0) {
      found = t;
      max = p;
    }
  }
  return found;
}
</code></pre>

<p>And then the query becomes:</p>

<pre><code>var q = from p in TestList
        group p by p.id into g
        select g.MaxBy(w =&gt; w.dt);
</code></pre>

<p><strong>NB.</strong> this implementation of <code>MaxBy</code> will only work for objects where the value of the member being compared is greater than its type's default value (e.g. for <code>int</code>: greater than zero). A better implementation of <code>MaxBy</code> would use the enumerator manually and initialise both <code>found</code> and <code>max</code> variables directly from the first element of the input.</p>

<hr>

<p><sup>1</sup> if you are using The Reactive Extensions (Rx) this is included in the <code>System.Interactive</code> assembly.</p>
"	67392.0		67392.0		2010-10-06 09:51:20	2010-10-06 09:51:20				4			
4203305	2		4203277.0	2010-11-17 10:05:08		5		"<p>That's nice and easy:</p>

<pre><code>var query = from order in orders
            from item in order.OrderItems
            orderby item.OrderItemId, order.OrderId
            select item;
</code></pre>
"	22656.0					2010-11-17 10:05:08				1			
4273329	2		4272763.0	2010-11-25 02:46:20		0		"<p>If you're using EntityFramework, you probably want <a href=""http://msdn.microsoft.com/en-us/library/bb738708.aspx"" rel=""nofollow"">Include</a>.  Here's an <a href=""http://msdn.microsoft.com/en-us/library/bb896272.aspx"" rel=""nofollow"">msdn article</a> that explains many of the ways to load related entities for Entity Framework.</p>

<p>If you're using LinqToSql, you might want <a href=""http://msdn.microsoft.com/en-us/library/bb534268.aspx"" rel=""nofollow"">LoadWith</a>.  Here's an <a href=""http://msdn.microsoft.com/en-us/library/bb425822.aspx#linqtosql_topic11"" rel=""nofollow"">msdn article</a> that explains many of the ways to load related entities for LinqToSql.</p>

<hr>

<p>If you just have plain old instances, you can do this:</p>

<pre><code>List&lt;Table1&gt; items = GetList();
List&lt;Table2&gt; relatedItems = items.Select(t1 =&gt; t1.Table2).ToList();
</code></pre>

<p>It's probably not a good idea to do this kind of code with the ORM technologies mentioned above, as they may generate one query to the database per original instance.</p>
"	8155.0					2010-11-25 02:46:20				0			
4508826	2		4508668.0	2010-12-22 11:43:50		1		"<p>Null in practice is often an incorrect state and is treated as such by the vast majority of APIs - the API for linq is following this. Perhaps you should question why you have null enumerables in the first place, and guard against this. A second approach would be to write your own extension methods that give you the desired behaviour. Excessive null checking (inside code rather than just parameter checking) is usually a code smell. </p>
"	189516.0					2010-12-22 11:43:50				0			
4519523	2		4517047.0	2010-12-23 14:19:47		0		"<p>I solved it like so:</p>

<pre><code>        List&lt;MySummary&gt; summary =
            entries.Select(i =&gt; new { i, dt = i.Date }).GroupBy(
                @t =&gt; new { date = @t.dt.Date, time = @t.dt.Hour }, @t =&gt; @t.i).Select(
                    g =&gt;
                    new MySummary()
                        {
                            Date = g.Key.date.AddHours(g.Key.time),
                            Opens = g.Count(x =&gt; x.Type == ""Open""),
                            Clicks = g.Count(x =&gt; x.Type == ""Click"")
                        }).ToList();
</code></pre>

<p>Please let me know if you guys think this is incorrect..but from the looks of it..it gets the right data.</p>

<p>Model:</p>

<pre><code>    public class MySummary
{
    public DateTime Date { get; set; }

    public int Opens { get; set; }

    public int Clicks { get; set; }
}
</code></pre>
"	455042.0					2010-12-23 14:19:47				0			
18220433	2		18220372.0	2013-08-13 22:39:44		4		"<p>Something like this should work:</p>

<pre><code>var mydata = new IEnumerable&lt;int&gt;[] { Enumerable.Range(2, 3), Enumerable.Range(5, 5), Enumerable.Range(7, 6), Enumerable.Range(3, 2) };
var maxLength = mydata.Max(l =&gt; l.Count());
var rotated = 
    from i in Enumerable.Range(0, maxLength)
    select 
        from list in mydata
        select list.Skip(i).DefaultIfEmpty(-1).First();
</code></pre>

<p>Or in fluent syntax:</p>

<pre><code>var rotated = Enumerable.Range(0, maxLength)
    .Select(i =&gt; mydata.Select(l =&gt; l.Skip(i).DefaultIfEmpty(-1).First()));
</code></pre>

<p>Now, this is not terribly efficient because it requires iterating each list numerous times. If you convert the input data to a list of arrays first, it should be a bit faster:</p>

<pre><code>var myarray = mydata.Select(l =&gt; l.ToArray());
var maxLength = myarray.Max(l =&gt; l.Length);
var rotated = 
    from i in Enumerable.Range(0, maxLength)
    select 
        from l in myarray
        select i &lt; l.Length ? l[i] : -1;
</code></pre>

<p>Or in fluent syntax:</p>

<pre><code>var rotated = Enumerable.Range(0, maxLength)
    .Select(i =&gt; myarray.Select(l =&gt; i &lt; l.Length ? l[i] : -1));  
</code></pre>
"	1715579.0		1715579.0		2013-08-13 22:49:14	2013-08-13 22:49:14				2			
18220542	2		18220372.0	2013-08-13 22:49:13		1		"<p>You can have it in one line, however it won't be very readable:</p>

<pre><code>var temp = Enumerable
    .Range(0, 6)
    .Select(i =&gt; mydata.Select(v 
        =&gt; i &lt; v.Count() ? v.ElementAt(i) : -1).ToList())
    .ToArray();
</code></pre>
"	2642204.0					2013-08-13 22:49:13				0			
19915788	1	19915961.0		2013-11-11 20:57:16		0	122.0	"<p>How I could fix this LINQ extension? (in C# or VB no matter):</p>

<pre><code>States.Select(Function(item) myMethod(item.Key, item.Value))
</code></pre>

<p><code>States</code> object is a Dictionary, and what I'm trying to reproduce using LINQ is the same as this:</p>

<pre><code>For each item in states
    myMethod(item.Key, item.Value)
Next item
</code></pre>

<p>I know that I'm missing something because the Select extension in that way is not the solution... but, I don't know.</p>
"	1248295.0		16587.0		2013-11-11 22:11:54	2013-11-11 22:11:54	How do I iterate through a dictionary's keys and execute a method for each key in the dictionary using Linq?	<.net><linq>	3.0	2			
20129040	1	20131529.0		2013-11-21 18:27:09		0	179.0	"<p>I'm trying to write a Linq query that checks three fields: <code>StateCode</code>, <code>ChannelCode</code>, and <code>ZipCode</code>.</p>

<p>I want to check for an exact match on State and Channel Code. However, if the record in the database happens to be null, then I want to pull that record. If it is not null, I want to pull it only if the zip code matches a value. I've tried to write this a couple different ways and each keeps failing. Here's my most recent attempt: </p>

<pre><code>var similarZips = (from z in _db.ZipCodeTerritory
                    where z.StateCode.Equals(zipCode.StateCode) &amp;&amp;
                            z.ChannelCode.Equals(zipCode.ChannelCode)
                    select z).Where(x =&gt; x.Id != zipCode.Id &amp;&amp; 
                            (x.ZipCode.Equals(null) || x.ZipCode.Equals(zipCode.ZipCode))).ToList();
</code></pre>

<p>I also gave this a shot and received the same results</p>

<pre><code>var similarZips = (from z in _db.ZipCodeTerritory
                    where z.StateCode.Equals(zipCode.StateCode) &amp;&amp;
                            z.ChannelCode.Equals(zipCode.ChannelCode) &amp;&amp;
                            (z.ZipCode.Equals(null) ? z.ZipCode.Equals(null) : z.ZipCode.Equals(zipCode.ZipCode))
                    select z).Where(x =&gt; x.Id != zipCode.Id).ToList();
</code></pre>

<p><strong>EDIT</strong></p>

<p>The problem happening here occurs only when the <code>zipCode.ZipCode</code> value is <code>NULL</code>. In that case, this statement is redundant <code>x.ZipCode.Equals(null) || x.ZipCode.Equals(zipCode.ZipCode)</code> - I'm basically asking it to check for a <code>null</code> or something that <code>.Equal(null)</code>.</p>

<p>I need to re-write the query similar to below. The problem I'm having, however, is now in the first part of the ternary statement. If the <code>zipCode.Zipcode</code> value is null, then I simply want to grab all records with a matching state and channel code combo (any zip will do). However, if the zip is defined then I only want to grab state/channel combos with either a matching zip code or a null zip code. I'm stuck on the part where, if the <code>zipCode.ZipCode</code> value is <code>null</code> I tell the query to grab all records. </p>

<pre><code> var similarZips = (from z in _db.ZipCodeTerritory
                    where z.StateCode.Equals(zipCode.StateCode) &amp;&amp;
                            z.ChannelCode.Equals(zipCode.ChannelCode) &amp;&amp; 
                            (zipCode.ZipCode.Equals(null) ? 
                                    &lt;any zip will do&gt; : 
                                (z.ZipCode.Equals(zipCode.ZipCode) || z.ZipCode.Equals(null)))
                    select z).Where(x =&gt; x.Id != zipCode.Id).ToList();**
</code></pre>
"	1489378.0		1489378.0		2013-11-21 19:44:44	2013-11-22 16:29:53	Linq query to pick up field if it is null or matches specific value	<.net><linq>	3.0	0			
4653687	2		4653669.0	2011-01-11 02:46:41		0		"<p>Try:</p>

<pre><code>var c = from cat in context.Categories
where (ParamCat == null &amp;&amp; cat.ParentId == null)
  || (ParamCat != null &amp;&amp; cat.ParentId == ParamCat.Id) 
select cat;
</code></pre>

<p><strong>(</strong> and  <strong>)</strong> can make a big difference... :)</p>
"	11241.0					2011-01-11 02:46:41				1			
5075939	1	5076153.0		2011-02-22 08:53:04		4	701.0	"<p>Is there a way to filter a LoadWith in Linq</p>

<p>I currently have ReportCategory and Reports tables. I want to retrieve all the Categories and then only want to load the active reports.</p>

<p>This is what I have so far.</p>

<pre><code>DataLoadOptions dlo = new DataLoadOptions();
dlo.LoadWith&lt;ReportCategory&gt;(report =&gt; report.Reports);
db.LoadOptions = dlo;

var categories = from c in db.ReportCategory
                where c.InUse == true
                select c;
</code></pre>

<p>It is returning all the active categories and all the reports for each category as expected but I dont need all the reports, I only need the ones that are marked as InUse.</p>

<p>So I've tried this...</p>

<pre><code>dlo.LoadWith&lt;ReportCategory&gt;(report =&gt; report.Reports.Where(r =&gt; r.InUse == true));
</code></pre>

<p>but I'm getting the following error.</p>

<p>InvalidOperationException: The expression specified must be of the form p.A, where p is the parameter and A is a property or field member. </p>

<p>Is there a way to do this with a LoadWith or should I just move to using a join?</p>
"	140944.0					2011-02-22 09:11:29	Filtering the LoadWith Results	<.net><linq>	1.0	1			
5158363	1	5158967.0		2011-03-01 17:53:37		1	78.0	"<p>I am having trouble with casting and interfaces. Below is the code I am using. What the error says. I dont fully understand what is going on. I thought that if i created a list of items which implement an interface, if i pass another item which also implements the interface then it should work. But it doesn't. Can someone explain why it doesn't and what I should do instead. Thank you very much</p>

<p>The error line has three astrix's to identify it. Again thank you very much</p>

<blockquote>
  <p>An unhandled exception of type
  'System.InvalidCastException' occurred
  in DAL.dll</p>
  
  <p>Additional information: Unable to cast
  object of type
  'System.Data.Linq.DataQuery<code>1[BuisnessObjects.Project]'
  to type
  'System.Collections.Generic.IEnumerable</code>1[BuisnessObjects.IProject]'</p>
</blockquote>

<pre><code>Imports BuisnessObjects
Public Class ProjectInfoRepository
    Implements IProjectInfoRepository
             Function GetAllProjects() As List(Of BuisnessObjects.IProject) Implements IProjectInfoRepository.GetAllProjects
        Dim returnList As New List(Of BuisnessObjects.IProject)
        ***returnList.AddRange(From p In DC.ProjectInfos _
                          Select New BuisnessObjects.Project() With {.ProjectID = p.projectID, .ProjectName = p.projectName})***

        Return returnList
    End Function
End Class


Public Class Project
    Implements IProject
    Private _projectName As String
    Property ProjectName() As String Implements IProject.ProjectName
        Get
            Return _projectName
        End Get
        Set(ByVal value As String)
            _projectName = value
        End Set
    End Property
    Private _projectID As Integer
    Property ProjectID() As Integer Implements IProject.ProjectID
        Get
            Return _projectID
        End Get
        Set(ByVal value As Integer)
            _projectID = value
        End Set
    End Property
End Class


Public Interface IProject
    Property ProjectName() As String
    Property ProjectID() As Integer
End Interface
</code></pre>
"	525672.0					2011-03-01 18:53:48	vb interfaces with linq-to-sql	<.net><linq>	1.0	0			
5158967	2		5158363.0	2011-03-01 18:53:48		1		"<p>If you add a <code>.Cast(Of BuisnessObjects.IProject)</code> to the linq query it should work.</p>

<pre><code>Function GetAllProjects() As List(Of BuisnessObjects.IProject) Implements IProjectInfoRepository.GetAllProjects
        Dim returnList As New List(Of BuisnessObjects.IProject)

        returnList.AddRange((From p In DC.ProjectInfos _
                            Select New BuisnessObjects.Project() With {.ProjectID = p.projectID, .ProjectName = p.projectName}).Cast(Of BuisnessObjects.IProject))

        Return returnList
End Function
</code></pre>
"	303427.0					2011-03-01 18:53:48				1			
20131529	2		20129040.0	2013-11-21 20:46:33		0		"<p>Cant you just use two queries?</p>

<pre><code>List&lt;ZipCodeTerritory&gt; similarZips;

if (zipCode.ZipCode != null)
{
  similarZips = (from z in _db.ZipCodeTerritory
                 where z.StateCode.Equals(zipCode.StateCode) &amp;&amp;
                       z.ChannelCode.Equals(zipCode.ChannelCode) &amp;&amp;
                       z.ZipCode.Equals(zipCode.ZipCode)).ToList(); 
}
else
{
  similarZips = (from z in _db.ZipCodeTerritory
                 where z.StateCode.Equals(zipCode.StateCode) &amp;&amp;
                       z.ChannelCode.Equals(zipCode.ChannelCode).ToList(); 

}
</code></pre>
"	1301147.0		77507.0		2013-11-21 21:38:26	2013-11-21 21:38:26				1			
20477744	2		20476910.0	2013-12-09 18:18:34		1		"<p>Your ExecuteQuery command will attempt to use sql parameters which means your line</p>

<pre><code>private const string SQL_GET_CHAPERONES_NAME = ""SELECT ChaperoneID, Name FROM ChaperoneInfo WHERE ChaperoneID IN (SELECT ChaperoneID FROM ChaperoneMatches WHERE DriverID = '{0}')"";
</code></pre>

<p>will product TSQL, something like </p>

<pre><code> DECLARE @p0 NVarChar(1000) = '111'
 SELECT ChaperoneID, Name FROM ChaperoneInfo WHERE ChaperoneID IN 
    (SELECT ChaperoneID FROM ChaperoneMatches WHERE DriverID = '@p0')""
</code></pre>

<p>What you need to do is remove the quotes, ie</p>

<pre><code>private const string SQL_GET_CHAPERONES_NAME = ""SELECT ChaperoneID, Name FROM ChaperoneInfo WHERE ChaperoneID IN (SELECT ChaperoneID FROM ChaperoneMatches WHERE DriverID = {0})"";
</code></pre>

<p>so your query becomes something like</p>

<pre><code> DECLARE @p0 NVarChar(1000) = '111'
 SELECT ChaperoneID, Name FROM ChaperoneInfo WHERE ChaperoneID IN 
    (SELECT ChaperoneID FROM ChaperoneMatches WHERE DriverID = @p0)""
</code></pre>
"	125759.0					2013-12-09 18:18:34				0			
21000995	2		21000917.0	2014-01-08 16:18:19		0		"<p>Just retry until you have found an acceptable element. This is likely, because only two items are filtered out. In the best (likely) case we are done with just a single try. That's <code>O(1)</code>.</p>

<pre><code>int retryCount = 0;
while (retryCount &lt; 5) {
 var index = GetRandomIndex(list.Count);
 if (list[index].IsNotFilteredOut)
  return list[index];
 else
  retryCount++;
}

//the fast, probabilistic algorithm has failed. fallback:
return companies.Where(cpy =&gt; cpy != src &amp;&amp; cpy != plyr.PowerUpInAction.Passenger.Destination).OrderBy(pu =&gt; rand.Next()).ToList()[0];
</code></pre>

<p>In case we spin too often, we fall back to a safe algorithm.</p>
"	122718.0					2014-01-08 16:18:19				0			
21001048	2		21000917.0	2014-01-08 16:20:52		3		"<p>You could do <code>.First()</code> instead of <code>.ToList()[0]</code></p>
"	1523851.0		1523851.0		2014-02-10 14:30:16	2014-02-10 14:30:16				3			
23524046	2		23524019.0	2014-05-07 17:08:39		1		"<p>For the boolean, you want a descending order (<code>false</code> compares like it's smaller than <code>true</code>). To add additional ordering parameters, you use <code>ThenBy</code> (for dates: oldest on top)/<code>ThenByDescending</code> (for dates: newest on top). I think the methods you're looking for are <a href=""http://msdn.microsoft.com/en-us/library/vstudio/bb534855.aspx"" rel=""nofollow""><code>OrderByDescending</code></a> and <a href=""http://msdn.microsoft.com/en-us/library/vstudio/bb534743.aspx"" rel=""nofollow""><code>ThenBy</code></a>.</p>

<pre><code>myList.OrderByDescending(x =&gt; x.MyBool).ThenBy(x =&gt; x.MyDateTime)
</code></pre>
"	781792.0					2014-05-07 17:08:39				0			
24340956	2		5031726.0	2014-06-21 11:04:12		4		"<p>The order of the sequence passed is absolutely critical with <code>TakeWhile</code>, which will terminate as soon as a predicate returns <code>false</code>, whereas <code>Where</code> will continue to evaluate the sequence beyond the first <code>false</code> value.</p>

<p>A common usage for <code>TakeWhile</code> is during the lazy evaluation of large, expensive, or even infinite enumerables where you may have additional knowledge about the ordering of the sequence. </p>

<p>e.g. Given the sequence:</p>

<pre><code>IEnumerable&lt;BigInteger&gt; InfiniteSequence()
{
    BigInteger sequence = 0;
    while (true)
    {
        yield return sequence++;
    }
}
</code></pre>

<p>A <code>.Where</code> will result in an infinite loop trying to evaluate part of the enumerable:</p>

<pre><code>var result = InfiniteSequence()
    .Where(n =&gt; n &lt; 100)
    .Count();
</code></pre>

<p>Whereas a <code>.TakeWhile</code>, and armed with the knowledge that the enumerables is ascending, will allow the partial sequence to be evaluated:</p>

<pre><code>var result = InfiniteSequence()
    .TakeWhile(n =&gt; n &lt; 100)
    .Count();
</code></pre>
"	314291.0		314291.0		2015-06-23 06:57:22	2015-06-23 06:57:22				0			
5200873	1			2011-03-05 00:55:54		0	503.0	"<p>Can we run a win forms with LINQ in our app using .net 1.1 and Microsoft IDE 2003?</p>

<p>If yes, how?</p>

<p>***I cannot upgrade it because it is a school facility. </p>

<p>Thank you</p>
"	273340.0		273340.0		2011-03-05 01:17:30	2011-03-05 01:17:30	LINQ on .Net 1.1	<.net><linq>	5.0	3			
5200889	2		5200873.0	2011-03-05 00:58:12		4		"<p>No. LINQ is .net 3.5 and even though there are ""<a href=""https://stackoverflow.com/questions/2138/linq-on-the-net-2-0-runtime"">hacks</a>"" to run it on 2.0, I have never seen it work on 1.1 (hard for me to imagine how it would work anyway without Generics)</p>
"	91.0		-1.0		2017-05-23 12:11:52	2011-03-05 00:58:12				1			
5501077	2		5500879.0	2011-03-31 13:59:26		1		"<p>Try something this.</p>

<pre><code>from car in available_cars
where !cars_x_client.Any(x =&gt; x.client_id == client_id 
                         &amp;&amp; x.car_id == car.car_id)
select car;
</code></pre>
"	644969.0					2011-03-31 13:59:26				0			
6432972	2		6432958.0	2011-06-21 22:56:28		0		"<p>Try this:</p>

<pre><code>var results = from pc in myProductCats
              where pc.Products.Contains(ProductId)
              select pc;
</code></pre>

<p>You question is missing a lot of details.  If you provide some code and the class structure I can provide a better answer.</p>
"	226897.0					2011-06-21 22:56:28				0			
6582501	2		6582388.0	2011-07-05 12:17:15		1		"<p>Try this:</p>

<pre><code>from t0 in ctx.ScannedDocuments
from t1 in ctx.Documents_RelatedDepartments
where 
(
    (t0.Id == t1.Id) &amp;&amp; (t1.Id == 1) ||
    (t0.Id == t1.Id) &amp;&amp; (t0.InsertById == 56) 
)
select new {t0.Id, Id2=t1.Id, t1.DepartmentId}
</code></pre>
"	527185.0					2011-07-05 12:17:15				0			
6750492	1	6750527.0		2011-07-19 16:17:02		6	848.0	"<p>I have a single dimensional array of items declared and initialized as:</p>

<pre><code>string[] SubDirectorylist = Directory.GetDirectories(TargetDirectory);
</code></pre>

<p>I'd like to reverse the members and found <a href=""http://msdn.microsoft.com/en-us/library/bb358497.aspx"" rel=""noreferrer""><code>Enumerable.Reverse&lt;TSource&gt;()</code></a>.</p>

<p>What advantages, if any, does LINQ's implementation of reverse have over <a href=""http://msdn.microsoft.com/en-us/library/d3877932.aspx"" rel=""noreferrer""><code>Array.Reverse()</code></a>?</p>
"	843000.0		7116.0		2011-07-19 16:23:05	2011-07-19 16:58:20	Array.Reverse() versus Enumerable.Reverse<TSource>()	<.net><linq>	3.0	0			
6750653	2		6750492.0	2011-07-19 16:30:45		10		"<p>Beside what Daniel told <code>System.Linq.Enumerable.Reverse()</code> actually creates a copy then iterates it from end to beginning, when <code>System.Array.Reverse()</code> does in place transformation.</p>
"	283676.0		283676.0		2011-07-19 16:38:02	2011-07-19 16:38:02				2			
6902351	2		6902312.0	2011-08-01 17:53:39		3		"<p><a href=""http://msdn.microsoft.com/en-us/library/9eekhta0.aspx"" rel=""nofollow""><code>IEnumerable&lt;T&gt;</code></a> and <a href=""http://msdn.microsoft.com/en-us/library/system.linq.iqueryable.aspx"" rel=""nofollow""><code>IQueryable&lt;T&gt;</code></a> are both interfaces. Neither of them ""support"" lazy loading.</p>
"	76337.0					2011-08-01 17:53:39				1			
7110999	2		7041262.0	2011-08-18 16:41:12		0		"<p>Maybe you're looking for something like this:</p>

<pre><code>class Program
{
    static void Main(string[] args)
    {
        Func&lt;Person, bool&gt; isInParis = BuildFunc(""Location"", ""=="", ""Paris"");
        Console.WriteLine(isInParis(new Person { Location = ""Paris""})); // Prints true
        Console.WriteLine(isInParis(new Person { Location = ""Venice""})); // Prints false
    }

    public class Person
    {
        public string Name { get; set; }
        public int Age { get; set; }
        public int Weight { get; set; }
        public DateTime FavouriteDay { get; set; }
        public string Location { get; set; }
    }

    private static Func&lt;Person, bool&gt; BuildFunc(
        string propertyName, 
        string comparisonOperator, 
        string propertyValue)
    {
        var parameter = Expression.Parameter(typeof (Person), ""person"");
        var property = Expression.Property(parameter, propertyName);
        var constant = Expression.Constant(propertyValue);

        Expression comparison;
        switch (comparisonOperator)
        {
            case ""&lt;"":
                comparison = Expression.LessThan(property, constant);
                break;
            case ""&gt;"":
                comparison = Expression.GreaterThan(property, constant);
                break;
            default:
                comparison = Expression.Equal(property, constant);
                break;
        }

        return Expression.Lambda&lt;Func&lt;Person, bool&gt;&gt;(comparison, parameter).Compile();
    }
}
</code></pre>

<p>Hope it helps!</p>
"	676636.0					2011-08-18 16:41:12				0			
24681506	2		24681405.0	2014-07-10 16:14:30		1		"<p>The C# syntax itself is the same: It's all LINQ, which is just a part of C#. However, the API you use, and the methods you are allowed to call, can differ from one LINQ Provider to the next.</p>

<p>For example, in LINQ to Objects, you can call pretty much any methods that are defined in any C# libraries. However, Entity Framework and LINQ to SQL try to convert your method calls into SQL syntax, so if they haven't been explicitly programmed to know how to convert a given method or operation, you'll get a runtime error when they try to execute the query.</p>

<p>LINQ to XML is effectively backed by LINQ to Objects--I don't think it uses its own query provider--but the API that it provides allows you to treat XML elements as if they are objects. You won't find methods like <code>.Elements()</code> if you're querying, e.g. a collection in Entity Framework.</p>

<p>Most ""LINQ to [X]"" frameworks are based on you calling extension methods on <code>IQueryable&lt;&gt;</code> or <code>IEnumerable&lt;&gt;</code> objects, but you can enable LINQ query expression syntax on any object by implementing methods like <code>.Where()</code> and <code>.Select()</code>. For example, <a href=""https://bitbucket.org/j2jensen/callmemaybe/src/c80c736f795f0c5148e3765df35bb19c786fd254/CallMeMaybe/Maybe.cs?at=default"" rel=""nofollow"">this Maybe type</a> implements <code>.Where()</code> and <code>.Select()</code> so you can say:</p>

<pre><code>from m in Maybe.From(GetValue())
where m.IsCool
select m.Name
</code></pre>

<p>But it doesn't implement the <code>IEnumerable&lt;&gt;</code> interface, so methods like GroupBy aren't implemented. If you try to use <code>group x by y</code> syntax in a query on a <code>Maybe&lt;&gt;</code>, the compiler will complain.</p>
"	120955.0		120955.0		2014-07-10 16:29:52	2014-07-10 16:29:52				0			
25815942	2		25815828.0	2014-09-12 19:59:40		25		"<p>You can use comma.</p>

<pre><code>var x = _usersService.GetAll().OrderBy(""LastName,FirstName,UserId"")
</code></pre>

<p>You can also add <code>desc</code> or <code>descending</code> to order by descending.</p>

<pre><code>var x = _usersService.GetAll().OrderBy(""LastName desc,FirstName desc,UserId"")
</code></pre>
"	968303.0		968303.0		2014-09-12 20:05:00	2014-09-12 20:05:00				1			
26199517	1	26199612.0		2014-10-05 04:02:58		1	2556.0	"<p>How to select specific column from the table? I try this Shows error 
Cannot implicitly convert type 'System.Linq.IQueryable' to 'System.Linq.IQueryable'. An explicit conversion exists,are you missing a cast? </p>

<pre><code>var query = myRepository.Query().AsQueryable();

query = query.Select(f =&gt;
                        new
                        {
                            f.Name,
                            f.Email,
                            f.Message,
                            f.Succeeded,
                            f.ExecutedOn,
                            f.CreatedOn,
                            f.DeletedOn
                        }).Where(file =&gt; file.DeletedOn == null).OrderByDescending(f =&gt; f.CreatedOn);

return query.ToList();
</code></pre>

<p>but when i try this it works,</p>

<pre><code>if (!String.IsNullOrEmpty(searchModel.Name))
          {
              query = query.Where(f =&gt;f.Name.Contains(searchModel.Name));
          }
 query = query.Where(file =&gt; file.DeletedOn == null).OrderByDescending(file =&gt; file.CreatedOn); 
</code></pre>
"	3732502.0		3732502.0		2014-10-05 04:23:53	2016-04-26 20:56:52	Cannot implicitly convert type 'System.Linq.IQueryable<Anon>to 'System.Linq.IQueryable<Report>An explicit conversion exists,are you missing a cast?	<.net><linq>	3.0	1			
26199608	2		26199517.0	2014-10-05 04:26:53		0		"<p>You have initialized query with type of <code>IQueryable&lt;Query&gt;</code> but later assigned with the value of type <code>IOrderedQueryable&lt;AnonymousType&gt;</code>, as both types do not match, it will cause compile time error. The problem here is with internal types (<code>Query</code>, <code>AnonymousType</code>). Please modify your query as below.</p>

<pre><code>var query = myRepository.Query().AsQueryable()
                .Select(f =&gt;
                    new
                    {
                        f.Name,
                        f.Email,
                        f.Message,
                        f.Succeeded,
                        f.ExecutedOn,
                        f.CreatedOn,
                        f.DeletedOn
                    }).Where(file =&gt; file.DeletedOn == null).OrderByDescending(f =&gt; f.CreatedOn);

return query.ToList();
</code></pre>
"	3053827.0		13302.0		2016-04-26 20:56:52	2016-04-26 20:56:52				2			
7128588	1	7128604.0		2011-08-20 00:01:48		0	212.0	"<p>I use:</p>

<pre><code>if (!ObjectCollection.Any(o =&gt; o.Property == SomeValue))
    // ...
</code></pre>

<p>or:</p>

<pre><code>if (!IntCollection.Contains(42))
    // ...
</code></pre>

<p>to determine if a collection does <em>not</em> have a particular element, but some people miss the <code>!</code> negation and misinterpret.</p>

<p>Is there another way to determine that a collection does not contain a particular element that doesn't use the negation operator? I prefer to stick to dot notation instead of query expression, but maybe a query expression is more readable to someone who misses the bang.</p>
"	161052.0					2011-08-20 08:08:52	Alternate way to use linq to determine if an element does not exist in a collection?	<.net><linq>	3.0	0			
7128604	2		7128588.0	2011-08-20 00:04:15		4		"<p>There's nothing in standard LINQ, but if you <em>really</em> don't like using <code>!</code> (which is the approach I'd recommend) you could always write your own extension methods:</p>

<pre><code>public static bool DoesNotContain&lt;T&gt;(this IEnumerable&lt;T&gt; source, T item)
{
    return !source.Contains(item);
}


public static bool None&lt;T&gt;(this IEnumerable&lt;T&gt; source, Func&lt;T, bool&gt; predicate)
{
    return !source.Any(predicate);
}
</code></pre>

<p>(You can use these for things like LINQ to SQL as well <em>if</em> you're just using them as the final call - you wouldn't be able to use them in nested queries though, as the query translator wouldn't understand them.)</p>
"	22656.0					2011-08-20 00:04:15				0			
7439524	2		7439194.0	2011-09-16 02:25:58		4		"<p>I think you're looking to perform the <a href=""http://blogs.msdn.com/b/ericlippert/archive/2010/06/28/computing-a-cartesian-product-with-linq.aspx"" rel=""nofollow"">cartesian product</a> of each of your lists and get the distinct tuples (each tuple containing only distinct values).</p>

<p>This algorithm isn't terribly efficient; it's going to generate a number of sets equal to the product of the lengths of all your lists and compare these sets to get the final distinct result.  You would need to make some minor modifications to make it case-insensitive, but you didn't say if that was required.</p>

<pre><code>Dictionary&lt;string, List&lt;string&gt;&gt; Data = new Dictionary&lt;string, List&lt;string&gt;&gt;()
{
    {""BU1"", new List&lt;string&gt;(){""ALL"", ""BU""}},
    {""CON1"", new List&lt;string&gt;(){""ALL"", ""EMP"", ""CONF"", ""CON1""}},
    {""SS1"", new List&lt;string&gt;(){""ALL"", ""EMP"", ""SS""}},
};

IEnumerable&lt;IEnumerable&lt;string&gt;&gt; Empty = Enumerable.Repeat(Enumerable.Empty&lt;string&gt;(), 1);
Data.Aggregate(Empty, 
    (accumulator, kvp) =&gt; 
        from a in accumulator 
        from i in kvp.Value 
        select a.Concat(Enumerable.Repeat(i, 1)))
    .Select(set =&gt; new HashSet&lt;string&gt;(set))
    .Distinct(HashSet&lt;string&gt;.CreateSetComparer());
</code></pre>

<p>This produces the following output sets:</p>

<pre><code>HashSet&lt;String&gt; (1 item)
ALL
HashSet&lt;String&gt; (2 items)
ALL
EMP
HashSet&lt;String&gt; (2 items)
ALL
SS
HashSet&lt;String&gt; (3 items)
ALL
EMP
SS
HashSet&lt;String&gt; (2 items)
ALL
CONF
HashSet&lt;String&gt; (3 items)
ALL
CONF
EMP
HashSet&lt;String&gt; (3 items)
ALL
CONF
SS
HashSet&lt;String&gt; (2 items)
ALL
CON1
HashSet&lt;String&gt; (3 items)
ALL
CON1
EMP
HashSet&lt;String&gt; (3 items)
ALL
CON1
SS
HashSet&lt;String&gt; (2 items)
BU
ALL
HashSet&lt;String&gt; (3 items)
BU
ALL
EMP
HashSet&lt;String&gt; (3 items)
BU
ALL
SS
HashSet&lt;String&gt; (2 items)
BU
EMP
HashSet&lt;String&gt; (3 items)
BU
EMP
SS
HashSet&lt;String&gt; (3 items)
BU
CONF
ALL
HashSet&lt;String&gt; (3 items)
BU
CONF
EMP
HashSet&lt;String&gt; (3 items)
BU
CONF
SS
HashSet&lt;String&gt; (3 items)
BU
CON1
ALL
HashSet&lt;String&gt; (3 items)
BU
CON1
EMP
HashSet&lt;String&gt; (3 items)
BU
CON1
SS
</code></pre>

<p><strong>Update:</strong> Here is the same algorithm in VB.NET (it looks very much the same):</p>

<pre><code>Dim Empty As IEnumerable(Of IEnumerable(Of String)) = Enumerable.Repeat(Enumerable.Empty(Of String)(), 1)
Data.Aggregate(Empty, _
    Function(accumulator, kvp) _
        From a in accumulator _
        From i in kvp.Value _
        Select a.Concat(Enumerable.Repeat(i, 1))) _
    .Select(Function([set]) New HashSet(Of String)([set])) _
    .Distinct(HashSet(Of String).CreateSetComparer())
</code></pre>
"	185200.0		185200.0		2011-09-16 04:01:35	2011-09-16 04:01:35				3			
26199612	2		26199517.0	2014-10-05 04:27:33		4		"<p>Your first query is generating an anonymous type.  If you want a list of <code>Report</code> objects then the Lambda in your <code>Select</code> call has to create a <code>Report</code> object, i.e. this:</p>

<pre><code>f =&gt;
                        new
                        {
                            f.Name,
                            f.Email,
                            f.Message,
                            f.Succeeded,
                            f.ExecutedOn,
                            f.CreatedOn,
                            f.DeletedOn
                        }
</code></pre>

<p>should be this:</p>

<pre><code>f =&gt;
                        new Report
                        {
                            f.Name,
                            f.Email,
                            f.Message,
                            f.Succeeded,
                            f.ExecutedOn,
                            f.CreatedOn,
                            f.DeletedOn
                        }
</code></pre>
"	584183.0					2014-10-05 04:27:33				0			
26685851	1	26685993.0		2014-11-01 03:06:27		1	135.0	"<p>I have this function, which works and gives the correct result:</p>

<pre class=""lang-vb prettyprint-override""><code>  &lt;System.Runtime.CompilerServices.Extension()&gt;
  Public Function Unique(List As List(Of String)) As List(Of String)
    Return List.Select(Function(x, index) x &amp; System.Text.RegularExpressions.Regex.Replace((List.GetRange(0, index).Where(Function(y) y = x).Count + 1).ToString, ""\b1\b"", String.Empty)).ToList
  End Function
</code></pre>

<p>This function appends a ""2"", ""3"", etc as needed, to those items that are not unique, to make them unique. </p>

<p>How can I remove the regex while a) staying in the same linq statement (the same line of code), b) without introducing a loop or c) evaluating the expression twice, as would be needed in an <code>IIF</code> statement?</p>

<p>This is not a duplicate of <a href=""https://stackoverflow.com/questions/6509748/getting-index-of-duplicate-items-in-a-list-in-c-sharp"">Getting index of duplicate items in a list in c#</a>, because a) my list does not change during the function and b) that question was not answered with a ready to apply code example, and here I'm looking for a specific fix to a specific line of code. Those answers will not fix my issue; they do not apply here.</p>
"	1045881.0		-1.0		2017-05-23 12:20:40	2014-11-02 19:24:29	How to append unique numbers to a list of strings	<.net><linq>	2.0	2			
27982352	2		12972295.0	2015-01-16 10:51:44		6		"<p>Copied over from comment by @sloth</p>

<p>Instead of <code>YourCollection.FirstOrDefault()</code>, you could use <code>YourCollection.DefaultIfEmpty(YourDefault).First()</code> for example.</p>

<p>Example:</p>

<pre><code>var viewModel = new CustomerDetailsViewModel
    {
            MainResidenceAddressSection = (MainResidenceAddressSection)addresses.DefaultIfEmpty(new MainResidenceAddressSection()).FirstOrDefault( o =&gt; o is MainResidenceAddressSection),
            RiskAddressSection = addresses.DefaultIfEmpty(new RiskAddressSection()).FirstOrDefault(o =&gt; !(o is MainResidenceAddressSection)),
    };
</code></pre>
"	1509764.0					2015-01-16 10:51:44				1			
36298284	1	36322346.0		2016-03-30 01:56:49		1	27.0	"<p>I have this value returned from Linq statement.</p>

<pre><code>IEnumerable&lt;IQueryable&lt;IEnumerable&lt;IList&lt;MyDomain&gt;&gt;&gt;&gt;
</code></pre>

<p>Is there a way to strip off all the extra <code>IEnumerable&lt;IQueryable&lt;IEnumerable&lt;</code> so I have just <code>IList&lt;MyDomain&gt;</code>?</p>
"	496668.0					2016-03-31 00:57:45	Extra Enumeration Wrappers .net	<.net><linq>	1.0	2	1.0		
38307827	2		38307706.0	2016-07-11 13:09:01		0		"<pre><code>var websitedetail = (from x in dt.AsEnumerable()
                    where x[""CYBER_TY""].ToString() == ""WEBSITE""
                    select x).FirstOrDefault();


var test2 = websitedetail.CYBER_SERNO
</code></pre>

<p>Linq objects are strongly typed; Meaning that your properties on your objects are columns in your row. For example</p>

<pre><code>Database Table FOO:
ID
Name
Description
</code></pre>

<p>turnes into</p>

<pre><code>FOO.FirstOrDefault().ID
</code></pre>

<p>or </p>

<pre><code>FOO.FirstOrDefault().Description
</code></pre>
"	525672.0					2016-07-11 13:09:01				0			
40749064	1	40750073.0		2016-11-22 18:26:39		0	50.0	"<p>Client side:</p>

<pre><code>&lt;asp:Repeater ID=""QuestionRepeater"" runat=""server""&gt;
  &lt;HeaderTemplate&gt;
   &lt;ul&gt;
  &lt;/HeaderTemplate&gt;
  &lt;ItemTemplate&gt;
    &lt;li&gt;&lt;%# Eval(""Question_Question"") %&gt;&lt;/li&gt;
  &lt;/ItemTemplate&gt;
  &lt;FooterTemplate&gt;
    &lt;/ul&gt;
  &lt;/FooterTemplate&gt;
&lt;/asp:Repeater&gt;
</code></pre>

<p>Code Behind:</p>

<pre><code>protected void Page_Load(object sender, EventArgs e)
{
    if (!this.IsPostBack)
    {
        this.BindRepeater();
    }
}

private void BindRepeater()
{
    var q = from u in db.tbl_Question select u.Question_Question;
    QuestionRepeater.DataSource = q.ToList();
    QuestionRepeater.DataBind();
}
</code></pre>

<p>Error:</p>

<p>Error is on line where use use <code>Eval(""Question_Question"")</code> function, i also tried <code>Bind(""Question_Question"")</code>. </p>

<blockquote>
  <p>DataBinding: 'System.String' does not contain a property with the name 'Question_Question'.</p>
</blockquote>

<p>Description: An unhandled exception occurred during the execution of the current web request. Please review the stack trace for more information about the error and where it originated in the code. </p>

<p>Exception Details: System.Web.HttpException: DataBinding: 'System.String' does not contain a property with the name 'Question_Question'.</p>
"	7195992.0		2298807.0		2016-11-22 19:21:46	2016-11-22 19:26:45	Get data from database using linq query and display it in dynamically generated labels in repeater	<.net><linq>	1.0	0			
43769199	2		4549339.0	2017-05-03 20:15:26		9		"<p>Copy pasta extension method for your convenience.</p>

<pre><code>public static void Fork&lt;T&gt;(
    this IEnumerable&lt;T&gt; source,
    Func&lt;T, bool&gt; pred,
    out IEnumerable&lt;T&gt; matches,
    out IEnumerable&lt;T&gt; nonMatches)
{
    var groupedByMatching = source.ToLookup(pred);
    matches = groupedByMatching[true];
    nonMatches = groupedByMatching[false];
}
</code></pre>

<p>Or using tuples in C# 7.0</p>

<pre><code>public static (IEnumerable&lt;T&gt; matches, IEnumerable&lt;T&gt; nonMatches) Fork&lt;T&gt;(
    this IEnumerable&lt;T&gt; source,
    Func&lt;T, bool&gt; pred)
{
    var groupedByMatching = source.ToLookup(pred);
    return (groupedByMatching[true], groupedByMatching[false]);
}

// Ex.
var numbers = new [] { 1, 2, 3, 4, 5, 6, 7, 8 };
var (numbersLessThanEqualFour, numbersMoreThanFour) = numbers.Fork(x =&gt; x &lt;= 4);
</code></pre>
"	1656538.0					2017-05-03 20:15:26				2			
44141564	2		214426.0	2017-05-23 17:38:03		2		"<p>If you don't want your code to throw </p>

<pre><code>LINQ to Entities does not recognize the method 'System.DateTime AddYears(Int32)' method, and this method cannot be translated into a store expression.
</code></pre>

<p>I would suggest using DbFunctions.AddYears. Also, if you are concerned only about dates and not the times, you could use DbFunctions.TruncateTime</p>

<p>Something like this-</p>

<pre><code>DbFunctions.TruncateTime(x.date) ==
DbFunctions.TruncateTime(DbFunctions.AddYears(DateTime.Today, 1))
</code></pre>
"	4115214.0					2017-05-23 17:38:03				0			
45629541	2		12972295.0	2017-08-11 07:39:00		1		"<p>I just had a similar situation and was looking for a solution that allows me to return an alternative default value without taking care of it at the caller side every time I need it. What we usually do in case Linq does not support what we want, is to write a new extension that takes care of it. That´s what I did. Here is what I came up with (not tested though): </p>

<pre><code>public static class EnumerableExtensions
{
    public static T FirstOrDefault&lt;T&gt;(this IEnumerable&lt;T&gt; items, T defaultValue)
    {
        foreach (var item in items)
        {
            return item;
        }
        return defaultValue;
    }

    public static T FirstOrDefault&lt;T&gt;(this IEnumerable&lt;T&gt; items, Func&lt;T, bool&gt; predicate, T defaultValue)
    {
        return items.Where(predicate).FirstOrDefault(defaultValue);
    }

    public static T LastOrDefault&lt;T&gt;(this IEnumerable&lt;T&gt; items, T defaultValue)
    {
        return items.Reverse().FirstOrDefault(defaultValue);
    }

    public static T LastOrDefault&lt;T&gt;(this IEnumerable&lt;T&gt; items, Func&lt;T, bool&gt; predicate, T defaultValue)
    {
        return items.Where(predicate).LastOrDefault(defaultValue);
    }
}
</code></pre>
"	684106.0					2017-08-11 07:39:00				0			
7447862	2		7447846.0	2011-09-16 16:38:53		-1		"<p>rather than use the exception, loop through the enumerable and as soon as you hit more than 1, break out of it.</p>

<p>You don't have to count them all...just 2 of them :)</p>

<p>Also, using exceptions for flow-control is a bad idea because its <strong><em>really</em></strong> expensive from a performance standpoint.</p>

<hr>

<p>As @Jon Skeet's answer shows, there are better ways to do this since the IEnumerable interface is so well designed. If it didn't have the <code>.Skip</code> and <code>.Any()</code> methods, however (which would apply to other languages or places where you are only simply iterating), you only need to count to 2.</p>
"	20770.0		20770.0		2011-09-16 16:44:45	2011-09-16 16:44:45				3			
7548783	1	7548802.0		2011-09-25 21:35:34		4	7358.0	"<p>Is it possible to use a LINQ query to return a single object instead of a list?</p>

<pre><code>User user = (from User u in users 
     where u.id == 5
     select u);
</code></pre>
"	242769.0					2011-09-25 21:46:26	.Net - LINQ query returning a single object?	<.net><linq>	5.0	0	3.0		
7591572	2		7591061.0	2011-09-29 01:45:22		4		"<p>It's definitely in LINQPad - but you only see it when querying against databases:</p>

<p><img src=""https://i.stack.imgur.com/7131w.png"" alt=""LINQPad Screenshots""></p>

<p>You even get the SQL and IL that was created.</p>
"	259769.0					2011-09-29 01:45:22				2			
7596405	2		7596222.0	2011-09-29 11:04:46		7		"<p>The filter on <code>Description</code> could be a problem:</p>

<pre><code>qryN = qryN.Where(bn =&gt; bn.Description.Contains(txtWord.Text));
</code></pre>

<p>The <code>Contains</code> calls translates to a SQL <code>description LIKE '%' + @p0 + '%'</code>. Which means that even if you have an index on the <code>description</code> column, SQL server has to loop over the complete index (or perhaps even the complete table). If possible, change the line to the following:</p>

<pre><code>qryN = qryN.Where(bn =&gt; bn.Description.StartsWith(txtWord.Text));
</code></pre>

<p>This will translate to  <code>description LIKE @p0 + '%'</code> which allows your database server to effectively use the index.</p>
"	264697.0					2011-09-29 11:04:46				0			
7975266	2		7975219.0	2011-11-02 02:44:20		0		"<p>Linq does not mix well with modification - in this case especially not because you cannot read from a text file and write to it at the same time.</p>

<p>What you could do instead is produce a modified output as you iterate over the source and write this output to either a temporary file or memory. Once you have completed iteration over the source (and closed the source file!) you can then copy the temp file to the original file or write the memory enumeration to disk.</p>
"	329769.0					2011-11-02 02:44:20				0			
8089180	2		8089142.0	2011-11-11 03:03:53		1		"<p>I believe you are expecting a list of type <code>List&lt;ConferenceRoom&gt;</code> to be cast to <code>List&lt;T2&gt;</code>. </p>

<p>Without a constraint on T2 that is not possible.</p>

<pre><code>public List&lt;T2&gt; RunRoomQuery&lt;T1,T2&gt;(T1 fieldValue, Func&lt;T2, T1, bool&gt; predicate) where T2 : ConferenceRoom
</code></pre>

<p>I also suspect the type of <code>_dataContext.ConferenceRooms</code> is <code>IEnumerable&lt;ConferenceRoom&gt;</code>, so even with the above constraint it will not work. </p>

<p>I cannot really offer a better solution as I do not understand why you want to make it generic?</p>
"	336182.0					2011-11-11 03:03:53				5			
8662301	2		8662259.0	2011-12-28 23:08:15		0		"<p>""Condition"" in this context means ""expression that will be evaluated for each element, returns a boolean, and determines whether an element is included"". Just like a SQL WHERE clause, which I have a distinct feeling they stole it from. Ahem.</p>
"	414.0					2011-12-28 23:08:15				0			
9165288	1	9166021.0		2012-02-06 18:35:35		0	2648.0	"<p>I am trying to join a table and a list in LINQ. From posts on stackoverflow, I know that you can't select from a table and a list using a join--that you have to use .contains. But when I use .contains I get the same error. What else am I missing? Am I trying to do something that Linq won't support? Should I just write a supporter function that will loop through the dailyTotal records one-by-one (eliminating the need for a join)?</p>

<p>This is my code:</p>

<pre><code>Dim count = (from sqlRec in mydatacontext.table, listItem in myList where _ 
    sqlRec.guidIdField.ToString.contains(listItem.IdProperty.toString select sqlRec).count
</code></pre>

<p>It gives the same error I was trying to fix, which reads: ""Local sequence cannot be used in LINQ to SQL implementations of query operators except the Contains operator.""</p>

<p>I am trying to do this (of course, the syntax below won't work):</p>

<pre><code>(from sqlRec in table, listItem in List where sqlRec.guid=listId.Id select sqlRec).count
</code></pre>
"	821742.0		821742.0		2012-02-06 18:41:33	2015-10-09 06:39:12	Trying to join a List and a SQL table using Linq. Contains method still gives local sequence cannot be used error	<.net><linq>	1.0	0			
9351924	2		9351016.0	2012-02-19 18:31:32		0		"<p>With a CTE (Common Table Expression) in SQL Server, you could achieve what you're looking for - then you could just ""persist"" this into e.g. a view, and query that view from your Linq-to-SQL code.</p>

<pre><code>WITH Hierarchy AS 
(
    SELECT
       ID, ParentID = CAST(ParentID AS INT), MsgText, 
       NodePath = CAST('/' + CAST(ID AS VARCHAR(5)) AS VARCHAR(MAX))
    FROM    
       dbo.MessageTest 
    WHERE
       ParentID IS NULL

    UNION ALL

    SELECT
       m.ID, m.ParentID, m.MsgText, 
       CAST(h.NodePath + '/' + CAST(m.ID AS VARCHAR(5)) AS VARCHAR(MAX))
    FROM    
       dbo.MessageTest m
    INNER JOIN 
       Hierarchy h ON m.ParentID = h.ID
)
SELECT *
FROM Hierarchy
ORDER BY NodePath
</code></pre>

<p>This gives me an output of:</p>

<pre><code>ID  ParentID  MsgText                 NodePath
1   NULL      Text 1    1         /1
2   1         Reply to Text #1        /1/2
4   2         Reply to text #2        /1/2/4
3   1         Reply #2 to Text #1     /1/3
</code></pre>
"	13302.0					2012-02-19 18:31:32				0			
9433464	2		9433334.0	2012-02-24 15:37:32		1		"<p>First of all your override of Equals is bad, first try with:</p>

<pre><code>public override bool Equals(object obj)
{
  if (obj == null)
     return false;
  if (this.GetType() != obj.GetType())
     return false;
  return this.GroupID == ((MyGrouping)obj).GroupId;
}
</code></pre>
"	378783.0					2012-02-24 15:37:32				5			
9535392	1	9535420.0		2012-03-02 15:00:12		13	7411.0	"<p>Need to check if a list contains an item with a property value of X.</p>

<p>Been using FirstOrDefault and comparing to null:</p>

<pre><code>   searchItems.FirstOrDefault(si =&gt; si.ID == 99) == null
</code></pre>

<p>Is there better way to do this?</p>

<p>I cannot get past syntax errors on Contains.  Thanks.</p>
"	607314.0					2012-03-02 15:02:44	LINQ Contains Based on Property	<.net><linq>	2.0	0	4.0		
9808492	2		9808361.0	2012-03-21 16:10:31		1		"<p>You don't want <code>Descendants(""Programs"").Descendants</code>, that would return <em>any descendant</em> of the <code>Programs</code> elements - most of which are unrelated and don't have a ProgramName attribute, hence you get a <code>NullReferenceException</code>.</p>

<p>You also need to use <code>Attribute(""ProgramName"").value.Equals(""EnviroEpi"")</code> to get to the value of the program name attribute.</p>

<p>You want <code>Descendants(""Program"")</code> instead:</p>

<pre><code> Dim outputFileLoc = (From c In data.Descendants(""Program"") Where c.Attribute(""ProgramName"").Equals(""EnviroEpi"") Select c).First
</code></pre>
"	329769.0		821742.0		2012-03-21 20:58:11	2012-03-21 20:58:11				0			
10201383	1	10202478.0		2012-04-18 01:03:11		0	295.0	"<p>Have words from OCR and need a list of close matches.
Can live without the maxFrom.
The sample code is brute force but hopefully it defines the requirement.
Against of list of 600,000 this takes 2 seconds.
FTSword.Word is a string.</p>

<p>Ideally ""findd"" would only give additional credit to a second d.  And once it finds an i then f gets no credit.  Brute force I can do that. I am looking to take that 2 seconds down.   Will test and report any solution proposed.</p>

<p>The question?? is. How to make it faster? (and smarter)</p>

<p>Thanks</p>

<pre><code>            char[] find = new char[] { 'f', 'i', 'n', 'd' };
            char[] word;
            int maxFrom = 10;
            int minMatch = 3;
            int count;
            List&lt;FTSword&gt; matchWords = new List&lt;FTSword&gt;();
            foreach (FTSword ftsw in fTSwords)
            {
                if (ftsw.Word.Length &lt; maxFrom)
                {
                    word = ftsw.Word.ToCharArray();
                    count = 0;
                    foreach (char fc in find)
                    {
                        foreach (char wc in word)
                        {
                            if (char.ToLower(wc) == char.ToLower(fc))
                            {
                                count++;
                                break;
                            }
                        }
                    }
                    if (count &gt;= minMatch)
                    {
                        // Debug.WriteLine(count.ToString() + ftsw.Word);
                        matchWords.Add(ftsw);
                    }
                }
            }
            Debug.WriteLine(matchWords.Count.ToString());
</code></pre>
"	607314.0		607314.0		2012-04-18 02:09:52	2012-04-18 04:18:27	LINQ To Find Partial Matches	<.net><linq>	2.0	5			
47312193	1			2017-11-15 16:10:21		0	28.0	"<p>With Linq, is there a way to consolidate these two lines into one method chain?</p>

<pre><code>Group group = await _database.Groups.AsQueryable()
    .Include(g =&gt; g.Children)
    .Include(g =&gt; g.Documents)
    .SingleOrDefaultAsync(g =&gt; g.Pk == id);

group.Children = @group.Children.Where(c =&gt; c.Active).AsEnumerable().ToList();
</code></pre>

<p><strong>Edit to explain structure:</strong></p>

<p><code>group</code> is of type <code>Group</code></p>

<p>the <code>Children</code> property on a <code>Group</code> is a <code>List&lt;Group&gt;</code></p>
"	1394737.0		1394737.0		2017-11-15 19:41:54	2017-11-15 19:41:54	Filtering Include values in Linq	<.net><linq>	1.0	2			
48670792	1	48670935.0		2018-02-07 18:21:29		1	97.0	"<p>Suppose I have a linq expression that returns a sequence of IEnumerables.  How do I concatenate them into a single flat IEnumerable?  Concat seems to be limited to combining only two at a time.</p>
"	4288666.0					2018-02-07 18:35:25	Concatenate an IEnumerable of IEnumerables?	<.net><linq>	1.0	2			
48670935	2		48670792.0	2018-02-07 18:30:36		5		"<p>What you're looking for is the SelectMany operator that will flatten an IEnumerable> in a single IEnumerable containing all T without materializing the results</p>

<pre><code>IEnumerable&lt;IEnumerable&lt;string&gt;&gt; MyCollection = getdata();
IEnumerable&lt;string&gt; FlatenedData = MyCollection.SelectMany(item=&gt;item);
</code></pre>
"	1196886.0					2018-02-07 18:30:36				0			
51726183	1	51726458.0		2018-08-07 11:54:44		-3	35.0	"<p>I have sql parameter : </p>

<pre><code>SqlParameter[] parameters2 =
{

    new SqlParameter(""@codes_PrestaOOP"", 
                     string.Concat(contactUS.Select(s =&gt; $""{s.PK_PrestaOOP},"")))
};
</code></pre>

<p>And I want to concatenate @codes_PrestaOOP only if <code>@codes_PrestaOOP != null</code>.</p>

<p>How do it ?</p>
"	9219535.0		219661.0		2018-08-07 11:56:12	2018-08-07 12:09:13	How to do a condition if into the select linq?	<.net><linq>	1.0	6			
53150485	2		53119746.0	2018-11-05 08:08:57		0		"<p>My advice would be to create an IEnumerable extension function that takes an input sequence, and returns the same sequence as an IEnumerable.</p>

<p>See <a href=""http://geekswithblogs.net/BlackRabbitCoder/archive/2013/03/08/c.net-little-wonders-extension-methods-demystified.aspx"" rel=""nofollow noreferrer"">Extension Methods Demystified</a></p>

<pre><code>public static IEnumerable&lt;TSource&gt; ToEnumerable (this IEnumerable&lt;TSource&gt; source)
{
     foreach (var sourceItem in source)
         yield return sourceItem
}
</code></pre>

<p>Usage:</p>

<pre><code>List&lt;Person&gt; persons = ...

var personList = persons.ToList(); // uses the fact that Persons implements IList

var otherList = persons.ToEnumerable().ToList();
// does not implement IList&lt;...&gt;, and thus doesn't use the optimization
</code></pre>
"	2281790.0					2018-11-05 08:08:57				0			
53885375	2		53885164.0	2018-12-21 13:10:51		0		"<p>If I got you right, you have something similar to this data structure</p>

<pre><code>public class SessionObj
{
    public DateTime LogInDate { get; set; }
    public DateTime LogOutDate { get; set; }
}
</code></pre>

<p>If you have list of these objects you can get minutes for each session and then calculate average by the use of <code>Average</code> function</p>

<pre><code>var averageTimeForSession = new List&lt;SessionObj&gt;()
    .Select(x =&gt; (x.LogOutDate - x.LogInDate).Minutes)
    .Average();

var averageTimeForSessionPerDate = new List&lt;SessionObj&gt;()
    .GroupBy(x =&gt; x.LogInDate)
    .Select(x =&gt; x.Sum(y =&gt; (y.LogOutDate - y.LogInDate).Minutes))
    .Average();
</code></pre>
"	7313094.0					2018-12-21 13:10:51				0			
55071585	1	55075887.0		2019-03-08 21:59:36		0	71.0	"<p>Let's say I have a string array like so</p>

<pre><code>string[] arr = new {""a"", ""b"", ""\""b"", ""c\"""", ""c""};
</code></pre>

<p>I want to collapse these array into an array like so, while stripping the quotes.</p>

<pre><code>{""a"", ""b"", ""b c"", ""c""}
</code></pre>

<p>How do I achieve this with a single LINQ line?</p>
"	2033893.0		2033893.0		2019-03-08 22:45:12	2019-03-09 10:08:06	C# collapse string array wrapped in double quotes	<.net><linq>	1.0	5			
10615504	2		10609724.0	2012-05-16 09:19:41		0		"<p>Where you're going wrong; when it comes to the ordering, you're only left with a collection of the strings that were previously selected in the <code>.Select</code> method. What you're trying to do can easily be achieved with a minor alteration. The following will select the field <code>MIP_NO</code> as a string, and then assign it to a distinct ordered enumerable collection.</p>

<pre><code>ddlMIP.DataSource = dt.AsEnumerable()
    .Select(row =&gt; row.Field&lt;string&gt;(""MIP_NO"").ToString())
    .Distinct()
    .OrderBy(mipNo =&gt; mipNo);
</code></pre>
"	259656.0					2012-05-16 09:19:41				0			
10760250	1	10854495.0		2012-05-25 19:23:07		0	141.0	"<p>Trying to select distinct rows from a dt, and put the results back in the same dt. I thought this could be done in one statement. Here's what I'm trying:</p>

<pre><code>    dt = (DataTable)((from row in dt.AsEnumerable() select row.Field&lt;string&gt;(""VNDR_ID"")).Distinct().ToList());
</code></pre>

<p>How can I achieve this? Thanks.</p>
"	817934.0		817934.0		2012-05-25 19:57:01	2012-06-01 17:00:07	LINQ - Strip non-distinct rows from a table	<.net><linq>	3.0	2			
10760450	2		10760250.0	2012-05-25 19:40:00		1		"<p>You can't cast this to DataTable. The Linq will end up outputting an <code>IEnumerable&lt;string&gt;</code> based on your select. In order to load this into a DataTable, you'd have to:</p>

<ol>
<li>create a DataTable</li>
<li>create columns with <a href=""http://msdn.microsoft.com/en-us/library/730zyedy"" rel=""nofollow"">DataColumnCollection.Add Method (String, Type)</a></li>
<li>loop through the data</li>
<li>add a new row for each item with the <a href=""http://msdn.microsoft.com/en-us/library/07wwak56"" rel=""nofollow"">DataRowCollection.Add Method (Object[])</a></li>
</ol>
"	1015164.0		1015164.0		2012-05-25 19:54:22	2012-05-25 19:54:22				0			
11037331	1	11037380.0		2012-06-14 16:24:11		3	277.0	"<p>I'm having a misunderstanding problem with this use of Linq Query
I do have this Entity  </p>

<pre><code>class Content  
{          
    public string Type = ""X"";
    public string Name;  
    public int? Owner;  
}  
</code></pre>

<p>and a List list
the list contains 2 members both equals by type except by the Name and Owner(one is null and the other is not).
So i tried do query to find the Content with an specific Owner, if none is found, return the other the query used below:  </p>

<pre><code>int? owner = 1;
  var result = (
     from c in list 
     where c.Type == ""X"" &amp;&amp; c.Owner == owner 
     select c
     ).FirstOrDefault(c =&gt; c.Type == ""X"" &amp;&amp; c.Owner == (int?)null);
</code></pre>

<p>but the resulting member is returning null. What should be the correct statement for this query?</p>
"	838191.0		779513.0		2012-06-14 16:25:50	2012-06-14 16:27:21	LINQ: Use FirstOrDefault to return an member or another	<.net><linq>	1.0	3			
11042596	1	11042627.0		2012-06-14 23:10:00		4	6582.0	"<p>In regards to the above and/or including other methods, if you are searching for one record, and only one record exists, which one would perform the fastest? For example, I want to make sure that once it finds the value being queried, I'm looking for one that will return it right away without searching through the remaining records.</p>
"	1066133.0					2012-06-15 15:48:29	FirstOrDefault(), SingleOrDefault(), Any(), etc... Which One Is The Fastest?	<.net><linq>	2.0	8	2.0		
11054094	2		11042596.0	2012-06-15 15:48:29		1		"<p>Single (and SingleOrDefault) should be only used when you want to force an exception if there are 0 or more than one results. The typical SQL implementation would be </p>

<pre><code>Select Top 2 * from table
</code></pre>

<p>First on the other hand will typically short-circuit after the first match is found. In TSQL</p>

<pre><code>Select Top 1 * from table
</code></pre>

<p>Any is used to indicate if at least one match is found (and short circuits after finding it). In TSQL, this uses the Exists.</p>

<p>In your case, since you need the result value, there is no use in making a separate request (with Any) and then perform Single. Instead just use FirstOrDefault and then check for null on the return result.</p>

<pre><code>var foo = table.FirstOrDefault(t =&gt; t.bar == val);
if (null != foo)
   ...
</code></pre>

<p>Select 1 from table where Exists</p>
"	112139.0					2012-06-15 15:48:29				0			
56842076	1			2019-07-01 20:30:39		-2	54.0	"<p>I have a legacy .net application where certain code is trying to sum up the counts for certain related database rows.  It's an inventory solution where items could be added to the system from multiple sources (item receipts, adjustments, returns, etc).</p>

<p>The current code isn't very performant due mostly to it executing multiple queries, one for each relationship and adding them to a running counter.  This is in code on the main item class so it is making use of the relationship attributes to start each line</p>

<pre><code>count += ReceiptLines.Where(p =&gt; p.ItemReceipt.TxnDate &lt; dt).Sum(p =&gt; p.Quantity);
count += AdjustmentLines.Where(p =&gt; p.Adjustment.TxnDate &lt; dt).Sum(p =&gt; p.Quantity);
count += TransferLines.Where(p =&gt; p.Transfer.TxnDate &lt; dt).Sum(p =&gt; p.Quantity);
count += ReturnLines.Where(p =&gt; p.Return.TxnDate &lt; dt).Sum(p =&gt; p.Quantity);
</code></pre>

<p>This is just a snippet as the code has many more inputs and some lines that reduce the count.  There are usually ~14 different queries just to calculate this one value.</p>

<p>I was hoping that if I could move all of this to one query it would make the method more performant, but I'm rather new to .NET and LINQ and I'm unsure how to combine these into a single query.</p>

<p>Is there an approach with LINQ that would allow me to merge these statements?</p>

<p>Edit to answer question below:</p>

<p>This is how these attributes are defined on the Item class (where the code above lives)</p>

<pre><code>[global::System.Data.Linq.Mapping.AssociationAttribute(Name=""Item_ReturnLine"", Storage=""_ReturnLines"", ThisKey=""ItemId"", OtherKey=""ItemId"")]
        public EntitySet&lt;ReturnLine&gt; ReturnLines ... 
</code></pre>

<p>These are the mappings to the tables like ReceiptLines that make reference to this Item object.</p>

<p>2nd Edit</p>

<p>I did some DB work and the query example below is pretty close to what this should be (with a few tweaks).</p>

<pre><code>select i.itemid as itemId
, ISNULL(irl.total, 0) + ISNULL( rl.total, 0) + ISNULL(ial.total, 0) + ISNULL( itl.total, 0) as total,
CacheQuantityOnHand
from item i
left join ( select itemid, sum(quantity) as total from ItemReceiptLine where TxnDate &lt; SYSDATETIME() group by itemid) irl on i.itemid = irl.itemid
left join ( select itemid, sum(quantity) as total from ReturnLine where TxnDate &lt; SYSDATETIME() group by itemid) rl on i.itemid = rl.itemid
left join ( select itemid, sum(QuantityDiff) as total from InventoryAdjustmentLine where TxnDate &lt; SYSDATETIME() group by itemid) ial on i.itemid = ial.itemid
left join ( select itemid, sum(quantity) as total from InventoryTransferLine where TxnDate &lt; SYSDATETIME() group by itemid) itl on i.itemid = itl.itemid
</code></pre>

<p>This seems pretty fast from my testing, but I'm not sure still how to implement this in LINQ</p>
"	11312738.0		11312738.0		2019-07-05 16:56:40	2019-07-08 19:15:17	How do I combine multiple LINQ queries that hit different associated mappings	<.net><linq>	2.0	6			
11186475	2		11186392.0	2012-06-25 09:16:04		0		"<p>You can do this by serializing the object.</p>

<p>""Serialization is the process of taking the state of an object and persisting it in some fashion. The Microsoft .NET Framework includes powerful objects that can serialize any object to XML. The System.Xml.Serialization namespace provides this capability.""</p>

<p><a href=""http://support.microsoft.com/kb/815813"" rel=""nofollow"">http://support.microsoft.com/kb/815813</a></p>
"	1411801.0					2012-06-25 09:16:04				1			
11360101	2		11359828.0	2012-07-06 10:04:10		2		"<p>So you want to group by the language. </p>

<p>Why don't you use a <code>Dictionary&lt;string, IEnumerable&lt;String&gt;&gt;</code> instead?</p>

<pre><code>Dictionary&lt;String, IEnumerable&lt;String&gt;&gt; DialogResult =
            selectedItems.AsEnumerable()
            .GroupBy(r =&gt; r.Field&lt;string&gt;(""Language""))
            .ToDictionary(g =&gt; g.Key, g =&gt; g.Select(r =&gt; r.Field&lt;string&gt;(""ID"")));
</code></pre>

<p>The key is the language and the value is an <code>IEnumerable&lt;String&gt;</code> of the appropriate IDs.</p>

<p>If you for example want to list all IDs for <em>English</em>, you would do:</p>

<pre><code>var englishIDs = DialogResult[""English""];
String output = string.Join("", "", englishIDs); // sfd2133, asd213d, vgjj31j, dac31e3
</code></pre>

<p><code>Dictionaries</code> have the best lookup performance.</p>
"	284240.0		284240.0		2012-07-06 10:09:22	2012-07-06 10:09:22				0			
11543145	2		11543016.0	2012-07-18 13:59:18		1		"<p>Use <a href=""http://www.sqltolinq.com/"" rel=""nofollow"">Linqer</a></p>

<p>With this tool you can actually write the SQL &amp; the tool will convert it into LINQ construct.</p>
"	707798.0					2012-07-18 13:59:18				2			
12120926	1	12120946.0		2012-08-25 09:51:14		2	1281.0	"<p>I'm trying to filter an IEnumerable using some of its nested properties.</p>

<p>I've racked my brain every which way but cannot find a solution to this query. In fact I don't event know whether this is possible.</p>

<p>Its structure is like this</p>

<p><strong>T</strong> is a <strong>Deal</strong>
a <strong>Deal</strong> has a collection of <strong>Subcategories</strong> (the collection may be empty)
a <strong>Subcategory</strong> has a <strong>SubcategoryId</strong></p>

<p>I want to be able to select Deals whether they have a SubcategoryId = parameter that is passed to method.</p>
"	1437135.0					2012-08-25 09:53:55	Linq syntax to select nested objects	<.net><linq>	2.0	0	2.0		
12120945	2		12120926.0	2012-08-25 09:53:38		4		"<p>Sounds like you want to use <a href=""http://msdn.microsoft.com/en-us/library/bb534972.aspx"" rel=""nofollow""><code>Enumerable.Any</code></a> to pick deals where <em>any</em> of the subcategories is the one you want:</p>

<pre><code>var foo = deals.Where(deal =&gt; deal.Subcategories.Any(sc =&gt; sc.Id == parameter));
</code></pre>

<p>Note that this is fine if <code>deal.Subcategories</code> is an <em>empty</em> collection - but if it's a null reference, instead, that would blow up, and you'd need:</p>

<pre><code>var foo = deals.Where(deal =&gt; deal.Subcategories != null &amp;&amp;
                              deal.Subcategories.Any(sc =&gt; sc.Id == parameter));
</code></pre>

<p>... or fix it so that <code>deal.Subcategories</code> <em>is</em> never null, which would be generally preferable :)</p>
"	22656.0					2012-08-25 09:53:38				5			
12181276	1	12181652.0		2012-08-29 15:20:26		7	5319.0	"<p>I've got a search tool which takes a complex search string (actually, an n-level object graph in JSON) and returns some results. I want to expose the functionality to other (internal) developers through a LINQ-like mechanism.</p>

<p>Assuming each result is defined by a class <code>Result</code></p>

<p>I can create methods look something like:</p>

<pre><code>Function Search(Expression As Linq.Expression(Of System.Func(Of Result, Boolean))) As IEnumerable(Of Result)
</code></pre>

<p>What I'm unclear of is how I can walk that <code>Expression</code> parameter and extract the actual criteria which I can then form into the object graph for running my query.</p>

<p>Can someone point me at a tutorial/example of how this can be achieved?</p>

<p>For a little background, I've managed to dig into the expression far enough to get the recursive structure and am able to examine the <code>.Body</code> of lambda expressions but when I get as far as wanting to handle the <code>Left</code> and <code>Right</code> properties of a Node with eg type <code>ExpressionType.Or</code>, I'm having issues. The debugger is using a Friend-scoped class (<code>BinaryExpressionProxy</code>) to examine the expression which isn't available to me so I'm clearly heading down the wrong route.</p>
"	156755.0		156755.0		2012-08-29 15:28:24	2014-07-31 10:53:12	Implementing a custom LINQ-to-X provider	<.net><linq>	2.0	4	4.0		
12437411	1	12437508.0		2012-09-15 12:33:13		0	82.0	"<p>I have a couple of linq queries that are causing an issue with nulls. I'm pretty sure there's an easy answer but i can't think what it is.</p>

<pre><code>    var IDs = _user.IsNotNull()
        ? _user.BookmarkedStores.Select(s =&gt; s.StoreId)
        : null;

    var stores = IDs.IsNotNull()
        ? StoreBL.FindActiveById(IDs).OrderBy(s =&gt; s.Name).ToList()
        : null;
</code></pre>

<p>A null exception is thrown by the IQueryable.OrderBy because StoreBL.FindActiveById is null. A null return is valid as a store may be in the ID list but not active.</p>

<p>So I need to put a null check between them somehow.</p>

<p>Anyone advise as to if and how it can be done within the query itself? </p>
"	1437135.0					2012-09-15 13:05:19	How do I null check this linq query?	<.net><linq>	1.0	0			
12875970	2		12875895.0	2012-10-13 18:53:53		1		"<pre><code>.Where(Function(c) c.@ss:StyleID = ""foo"")
.ToList()
.ForEach(/*do stuff here*/)
</code></pre>

<p>I don't actually recognise your syntax. Is it VB.NET?</p>

<p>In C#:</p>

<pre><code>.Where(c =&gt; c.StyleID == ""foo"")
.ToList()
.ForEach(c =&gt; c.StyleID = ""bar"");
</code></pre>
"	967315.0					2012-10-13 18:53:53				4			
12972384	2		12972295.0	2012-10-19 10:30:43		186		"<blockquote>
  <p>As I understand it, in Linq the method FirstOrDefault() can return a Default value of something other than null.</p>
</blockquote>

<p>No. Or rather, it <em>always</em> returns the default value for the element type... which is either a null reference, the null value of a nullable value type, or the natural ""all zeroes"" value for a non-nullable value type.</p>

<blockquote>
  <p>Is there any particular way that this can be set up so that if there is no value for a particular query some predefined value is returned as the default value?</p>
</blockquote>

<p>For reference types, you can just use:</p>

<pre><code>var result = query.FirstOrDefault() ?? otherDefaultValue;
</code></pre>

<p>Of course this will <em>also</em> give you the ""other default value"" if the first value is present, but is a null reference...</p>
"	22656.0					2012-10-19 10:30:43				6			
13229048	1	13232030.0		2012-11-05 09:16:24		3	403.0	"<p>I have the following code</p>

<pre><code>    [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod]
    public void TestEnumOfMaybe()
    {
        List&lt;Maybe&lt;int&gt;&gt; l = new List&lt;Maybe&lt;int&gt;&gt;();
        l.Add(1.ToMaybe());
        l.Add(Maybe.None&lt;int&gt;());
        l.Add(3.ToMaybe());

        var y = from x in l
                from y in x
                select y;

    }
</code></pre>

<p>My Maybe type accepts all the Select and SelectMany methods to make it Linq compatible and I have tests to prove it so. However I can't seem to figure out a way to do cross type LINQ composition as in the above test case. The error I get is</p>

<pre><code>expression of type 'FunctionalExtensions.Maybe&lt;int&gt;' is not allowed in
a subsequent from clause in a query expression with source type
'System.Collections.Generic.List&lt;FunctionalExtensions.Maybe&lt;int&gt;&gt;'.  

Type inference failed in the call to 'SelectMany'.
FunctionalExtensions*
</code></pre>

<p>Is there a way to combine the two LINQ types or am I out of luck here? The complete Maybe.cs implementation is at</p>

<p><a href=""https://gist.github.com/4016243"" rel=""nofollow"">https://gist.github.com/4016243</a></p>
"	158285.0		158285.0		2012-11-05 09:25:14	2012-11-05 12:21:51	Cross Type LINQ	<.net><linq>	4.0	11			
13229189	2		13229048.0	2012-11-05 09:27:36		6		"<p>The translation of this:</p>

<pre><code>// Changed variable from y to query for clarity
var query = from x in l
            from y in x
            select y;
</code></pre>

<p>is simply:</p>

<pre><code>var query = l.SelectMany(x =&gt; x, (x, y) =&gt; y);
</code></pre>

<p>Note that <em>nothing</em> is being called on <code>y</code> here.</p>

<p>Now <code>l</code> is a <code>List&lt;Maybe&lt;int&gt;&gt;</code>, so you need to try to find an appropriate <code>SelectMany</code> method which would be valid here. Unless you've added any more, it will look in <a href=""http://msdn.microsoft.com/en-us/library/bb345618.aspx"" rel=""nofollow""><code>Enumerable.SelectMany</code></a>, and <em>every</em> overload there requires the the first delegate to return an <code>IEnumerable&lt;T&gt;</code> for some <code>T</code>.</p>

<p>So that's why it's not working. You could make it work by making <code>Maybe&lt;T&gt;</code> implement <code>IEnumerable&lt;T&gt;</code> (presumably either yielding a single result or no results). It's hard to say for sure whether that's what you're aiming for, but you've basically got to get that expansion to work.</p>

<p>Alternatively, you could write a new overload for <code>SelectMany</code> targeting <code>IEnumerable&lt;T&gt;</code>, for cases where the result is a <code>Maybe&lt;T&gt;</code> rather than an <code>IEnumerable&lt;T&gt;</code>. That would be pretty unintuitive though, IMO.</p>
"	22656.0		22656.0		2012-11-05 09:40:12	2012-11-05 09:40:12				3			
13741862	2		13741771.0	2012-12-06 10:41:26		5		"<p><strong>SKIP</strong></p>

<p><code>Skip()</code> will take an integer argument and skips the top n numbers from the given <code>IEnumerable</code></p>

<p><em>example</em></p>

<pre><code>yourlist.Skip(5)
</code></pre>

<p>the above line of code will skip<code>5</code> rows from the top in any collection</p>

<p><strong>SkipWhile</strong></p>

<p><code>SkipWhile()</code> continues to skip the elements as long as the input condition is true. Once condition turns false it will return all remaining elements.</p>

<p><em>example</em></p>

<pre><code>yourList.SkipWhile(x =&gt; x.marks &lt; 50)
</code></pre>

<p>the above line of code will skip until the condition <code>marks &lt; 50</code> is true</p>

<p><a href=""http://msdn.microsoft.com/en-us/library/bb358985.aspx"" rel=""nofollow"">Skip()</a> and <a href=""http://msdn.microsoft.com/en-us/library/bb549075.aspx"" rel=""nofollow"">SkipWhile()</a> according to MSDN</p>
"	842218.0		842218.0		2012-12-06 10:56:38	2012-12-06 10:56:38				1			
13933344	2		13926689.0	2012-12-18 12:45:30		0		"<p>It seems to me that you can do this as well:</p>

<pre><code>var aT12 = qry.Select( obj =&gt; new T1and2()
    {
        T1 = obj.MyT1,
        T2 = obj.MyT2
    })
    .ToArray();
</code></pre>

<p>I don't know if the constructors contain any processing logic. If so, you could defer that processing to the moment that <code>MyT1</code> or <code>MyT2</code> are actually read in your <code>for</code> loop.</p>
"	861716.0					2012-12-18 12:45:30				3			
14307109	2		14307055.0	2013-01-13 19:12:18		0		"<p>I assume you want to <code>SUM</code> the <code>Quantity</code> of the groups with the same <code>Name</code>:</p>

<pre><code>var result = list
     .GroupBy(x =&gt; x.Name)
     .Select(g =&gt; new {
        ID = g.First().ID,
        Name = g.Key,
        Tid = g.First().Tid,
        Quality = g.First().Quality,    
        Quantity = g.SUm(x =&gt; x.Quantity))
     });
</code></pre>
"	284240.0					2013-01-13 19:12:18				0			
14976561	2		14976486.0	2013-02-20 09:38:34		1		"<p>Linq-to-Sql cannot interpret the attribute - it has no parallel in the translation to Sql Server, and thus when it is submitted it returns that error that you received.</p>

<p>You can still perform Linq-related actions using things like Attributes that are only accessible on the client side. In order to do this, you first need to bring the data down to the client side (using a <code>ToList()</code> command on a Linq-to-Sql query), and then sorting it locally. For example:</p>

<pre><code>var query = mContext.Items.Where(i =&gt; i.Type == Type &amp;&amp; i.UserID == UserID).ToList();
return query.OrderBy(i =&gt; i.Description.Attribute(""displayName"")).ToList();
</code></pre>
"	51.0		51.0		2013-02-20 11:31:00	2013-02-20 11:31:00				1			
15142291	2		15142218.0	2013-02-28 17:52:45		2		"<p>One problem is that <code>OrderBy</code> and <code>ThenBy</code> <em>return</em> ordered enumerables, they do not <em>modify</em> the underlying enumerable, so you should be using:</p>

<pre><code>var regionBoudaries = from boundaryID in context.Region_Boundaries
                       join boundariesDetail in context.RegionBoundaries on boundaryID.BoundaryID equals boundariesDetail.RegionBoundaryID
                       select new RegionViewModel { ID = boundariesDetail.RegionBoundaryID, Latitude = boundariesDetail.lat.Value, Longitude = boundariesDetail.@long.Value, RegionID = boundaryID.RegionID };
regionBoudaries = regionBoudaries.OrderBy(region =&gt; region.RegionID).ThenBy(region =&gt; region.ID);
</code></pre>
"	1081897.0		1081897.0		2013-03-01 16:39:51	2013-03-01 16:39:51				1			
15902982	2		15902823.0	2013-04-09 13:15:47		4		"<p>Assuming the answer to Jon's comment is ""Yes"", an implementation could look like this:</p>

<pre><code>public static IEnumerable&lt;TResult&gt; ZipEqual&lt;TFirst, TSecond, TResult&gt;(
    this IEnumerable&lt;TFirst&gt; first, IEnumerable&lt;TSecond&gt; second,
    Func&lt;TFirst, TSecond, TResult&gt; resultSelector,
    IComparer comparer)
{
    var enumerator1 = first.GetEnumerator();
    var enumerator2 = second.GetEnumerator();

    var enumerator1HasElement = enumerator1.MoveNext();
    var enumerator2HasElement = enumerator2.MoveNext();

    while(enumerator1HasElement || enumerator2HasElement)
    {
        if(!enumerator2HasElement)
        {
            yield return resultSelector(enumerator1.Current, default(TSecond));
            enumerator1HasElement = enumerator1.MoveNext();
        }
        else if(!enumerator1HasElement)
        {
            yield return resultSelector(default(TFirst), enumerator2.Current);
            enumerator2HasElement = enumerator2.MoveNext();
        }
        else
        {
            var compareResult = comparer.Compare(enumerator1.Current,
                                                 enumerator2.Current);
            if(compareResult == 0)
            {
                yield return resultSelector(enumerator1.Current,
                                            enumerator2.Current);
                enumerator1HasElement = enumerator1.MoveNext();
                enumerator2HasElement = enumerator2.MoveNext();
            }
            else if(compareResult &lt; 0)
            {
                yield return resultSelector(enumerator1.Current,
                                            default(TSecond));
                enumerator1HasElement = enumerator1.MoveNext();
            }
            else
            {
                yield return resultSelector(default(TFirst),
                                            enumerator2.Current);
                enumerator2HasElement = enumerator2.MoveNext();
            }
        }
    }
}
</code></pre>
"	572644.0		572644.0		2013-04-09 13:43:59	2013-04-09 13:43:59				11			
16696776	2		16696570.0	2013-05-22 16:16:41		1		"<p>I haven't tested it but I'd suggest grouping is the way to go, something like:</p>

<pre><code>var xml = new XElement(""Locations"",                             
  locations
    .GroupBy(n =&gt; n.CategoryID)
    .SelectMany(g =&gt; g
       .OrderBy(n =&gt; distance(lat, lon, (double)n.Latitude, (double)n.Longitude))
       .Take(1))
    .Select(location =&gt; 
      new XElement(""Location"",
          new XAttribute(""CategoryID"", location.CategoryID),
          new XElement(""Category"", location.Category),
          new XElement(""LocationID"", location.LocationID),
          new XElement(""LocationName"", location.LocationName),
          new XElement(""Latitude"", location.Latitude),
          new XElement(""Longitude"", location.Longitude),
          new XElement(""Distance"", distance(lat, lon, (double)location.Latitude, (double)location.Longitude)),
          new XElement(""Status"", (location.HasManagedHours ? ""Managed Hours"" : ""Open""))
          )));
</code></pre>

<p>See <a href=""http://msdn.microsoft.com/en-us/library/bb394939.aspx#standardqueryops_topic4"" rel=""nofollow"" title=""LINQ Projection Operators"">Projection Operators</a> and <a href=""http://msdn.microsoft.com/en-us/library/bb394939.aspx#standardqueryops_topic9"" rel=""nofollow"" title=""LINQ Grouping Operators"">Grouping Operators</a> for more info.</p>
"	1111662.0		1111662.0		2013-05-22 16:49:51	2013-05-22 16:49:51				6			
18932685	1	18936354.0		2013-09-21 12:36:29		3	133.0	"<p>On the xamarin iOS site there is the following parallel linq example.</p>

<pre><code>from item in items.AsParallel ()
   let result = DoExpensiveWork (item)
   select result;
</code></pre>

<p>Could this not have been written </p>

<pre><code>from item in items.AsParallel ()
   select DoExpensiveWork (item);
</code></pre>

<p>Or is there a reason for the let clause? Does this force it to be evaluated in parallel?</p>
"	368186.0					2014-10-28 17:38:55	Does let clause in parallel linq force the parallel evaluation?	<.net><linq>	1.0	1	1.0		
18936354	2		18932685.0	2013-09-21 18:55:35		4		"<p>Let's look at the generated code (decompiled of course):</p>

<pre><code>private static void WithLet(IEnumerable&lt;int&gt; items)
{
  ParallelEnumerable.Select(ParallelEnumerable.Select(ParallelEnumerable.AsParallel&lt;int&gt;(items), item =&gt;
  {
    var local_0 = new
    {
      item = item,
      result = Program.DoExpensiveWork(item)
    };
    return local_0;
  }), param0 =&gt; param0.result);
}

private static void WithoutLet(IEnumerable&lt;int&gt; items)
{
  ParallelEnumerable.Select&lt;int, object&gt;(ParallelEnumerable.AsParallel&lt;int&gt;(items), (Func&lt;int, object&gt;) (item =&gt; Program.DoExpensiveWork(item)));
}
</code></pre>

<p>As we can see the only difference between the two methods is that an intermediate local variable is created.  The assignment to this local variable does not change the program's behaviour.</p>

<p>To answer your question more specifically the code that forces the execution to be in parallel is actually the call to <code>ParallelEnumerable.AsParallel</code>. LINQ queries are only executed when enumerated so it stands to reason that it is the generator of the <code>IEnumerable&lt;&gt;</code> that specifies whether it is executed in parallel or not.</p>
"	142182.0		2642204.0		2014-10-28 17:38:55	2014-10-28 17:38:55				0			
19915881	2		19915788.0	2013-11-11 21:02:22		1		"<p>From your example there is no no way to ""reproduce"" this in linq.  The function does not return a value.  If  myMethod() returned something you could create a list of all the results like this (C#)</p>

<pre><code>var resultlist = States.Select(item =&gt; myMethod(item.Key,item.Value));
</code></pre>

<p>But there is no reason to use linq if the method does not return a value -- just use the for each like you had originally.</p>
"	215752.0					2013-11-11 21:02:22				3			
20476910	1	20477744.0		2013-12-09 17:34:28		-1	53.0	"<p>The following SQL script returns 2 rows from my database:</p>

<pre><code>SELECT ChaperoneID, Name 
FROM ChaperoneInfo 
WHERE ChaperoneID IN (SELECT ChaperoneID 
                      FROM ChaperoneMatches 
                      WHERE DriverID = '111')
</code></pre>

<p>The following LINQ code gives me an empty list:</p>

<pre><code>...
private const string SQL_GET_CHAPERONES_NAME = ""SELECT ChaperoneID, Name FROM ChaperoneInfo WHERE ChaperoneID IN (SELECT ChaperoneID FROM ChaperoneMatches WHERE DriverID = '{0}')"";
    ....
public List&lt;ChaperoneNames&gt; GetChaperones(string driverID)
{
    List&lt;ChaperoneNames&gt; diList = new List&lt;ChaperoneNames&gt;();
    ISafeDataContext dc = new ISafeDataContext();

    try
    {
        string strSQL = SQL_GET_CHAPERONES_NAME;
        object[] objParameters = new object[] { driverID };
        diList = dc.ExecuteQuery&lt;ChaperoneNames&gt;(strSQL, objParameters).ToList();
    }
    catch (Exception ex)
    {
        EventLog.WriteEntry(""iSafe"", ex.StackTrace + ""\n \n"" + ex.Message);
    }

    return diList;
}
</code></pre>

<p>where</p>

<pre><code>public class ChaperoneNames
{
        public string ChaperoneID { get; set; }
        public string Name { get; set; }
}
</code></pre>

<p>Is it something in the names of the <code>ChaperoneNames</code> fields?</p>
"	1441479.0		13302.0		2013-12-09 17:38:56	2013-12-09 18:18:34	LINQ doesn't give me correct data	<.net><linq>	1.0	8			
23524019	1	23524046.0		2014-05-07 17:06:52		1	119.0	"<p>I need to order a list with linq based on 2 parameters a Boolean and a DateTime</p>

<p>The top of the list has to be the Booleans that are true and then ordered by DateTime</p>

<p>At the bottom of the list we need the Booleans that are false, also order by DateTime</p>

<p>How can I achieve this?</p>
"	441365.0					2014-05-07 17:27:44	linq order by 2 parameters	<.net><linq>	3.0	1			
25057086	2		12181276.0	2014-07-31 10:53:12		2		"<p>You can try using a project I wrote called <a href=""https://github.com/mcintyre321/LinqToAnything"" rel=""nofollow"">LinqToAnything</a> which you can use to wrap datasources to expose an IQueryable, depending on your needs.</p>
"	2086.0					2014-07-31 10:53:12				1			
26199700	2		26199517.0	2014-10-05 04:47:25		1		"<p>Make new Class object and then use it</p>

<pre><code>var result = from mr in myRepository
                     where mr.DeletedOn == null
                     orderby mr.CreatedOn descending
                     select new NewRepository
                     {
                          mr.Name,
                    mr.Email,
                    mr.Message,
                    mr.Succeeded,
                    mr.ExecutedOn,
                    mr.CreatedOn,
                   mr.DeletedOn
                     };
</code></pre>

<p><strong>if u have any error then let me know ur myRepository DataType</strong></p>
"		user4093832				2014-10-05 04:47:25				0			
27705922	1	27705933.0		2014-12-30 12:54:48		1	268.0	"<p>I'm having trouble when joining 2 tables, The issue is on the line </p>

<pre><code>join pri in ProductPricingSet on new {o.BusinessUnitId.Id, opr.ProductNameId.Id} equals new {pri.BusinessUnitId.Id, pri.ProductId.Id`}
</code></pre>

<p>Im getting ""getting ""An anonymous type cannot have multiple properties with the same name""</p>

<p>i've tried to rename it do no luck, what other option is there?</p>

<pre><code>from o in OrderSet
join opr in OrderProductSet on o.Id equals opr.OrderId.Id
join pri in ProductPricingSet on new {o.BusinessUnitId.Id, opr.ProductNameId.Id} equals new {pri.BusinessUnitId.Id, pri.ProductId.Id}
where o.Name.Equals(""OE-000004"")
select new {
 o.name,
 opr.ProductName,
 opr.Quantity,
 pri.SlipDiscount,
 pri.FinalPrice
}
</code></pre>
"	2238570.0					2014-12-30 16:25:39	LINQ Join with same Name on different tables	<.net><linq>	1.0	0			
27747876	2		12972295.0	2015-01-02 20:02:15		5		"<p>You can also do this </p>

<pre><code>    Band[] objects = { new Band { Name = ""Iron Maiden"" } };
    first = objects.Where(o =&gt; o.Name == ""Slayer"")
        .DefaultIfEmpty(new Band { Name = ""Black Sabbath"" })
        .FirstOrDefault();   // returns ""Black Sabbath"" 
</code></pre>

<p>This uses only linq - yipee! </p>
"	174611.0					2015-01-02 20:02:15				2			
29845893	2		29845848.0	2015-04-24 11:06:46		0		"<p>Try this:</p>

<pre><code>db.DataTable
    .GroupBy(x =&gt; x.B)
    .Select(new { B = x.Key, CountC = x.Count(y =&gt; y.C) });
</code></pre>
"	360374.0					2015-04-24 11:06:46				0			
33236020	1			2015-10-20 11:56:18		0	63.0	"<p>I have a list of objects called  input... </p>

<p>I take this list and filter it to get another list of objects Output. </p>

<p>I want to check if the Output list has any changes as compared to the input list..</p>

<p>Both the list are of the same type</p>
"	5081788.0		5081788.0		2015-10-20 12:02:05	2015-10-20 12:20:26	Difference between two array of objects in C#	<.net><linq>	2.0	9			
35650701	1			2016-02-26 11:37:20		0	107.0	"<p>So i have a list of StudentGrades i want to fetch from the database, and want to group them using linq. My linq query is this</p>

<pre><code>var query = GetListQuery().Where(m =&gt; m.StudentId == studentId);
var groupedQuery = query.GroupBy(m =&gt; new { Year = m.Year, TermTypeId = m.TermTypeId, TermNumber = m.TermNumber, SchoolId = m.Class.SchoolId })
                        .Select(m =&gt; new StudentGradeDto
                        {
                            Year = m.Key.Year,
                            TermTypeId = m.Key.TermTypeId,
                            TermNumber = m.Key.TermNumber,
                            SchoolId = m.Key.SchoolId,
                            StudentGrades = m.ToList()
                        });
</code></pre>

<p>When I retrieve the record, it looks like this</p>

<p><a href=""https://i.stack.imgur.com/GB2xf.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/GB2xf.png"" alt=""enter image description here""></a></p>

<p>One group, as seen in the picture. Has 0 StudentGrades, this group is suppose to have 2 StudentGrades. </p>

<p>How can this be? Even if it is my fault, and the linq generates groups based on conditions, how is it possible for a group have 0 child collection? Which makes me think it is linq problem. I suspect it is the problem with the grouping condition <strong>Class.SchoolId</strong>, but if linq can't translate to SQL properly how am i suppose to rely on it in the future to not produce unseen bugs like this. This just doesn't make sense. </p>

<p>I am at this for couple hours now just can't seem to figure it out. Any experts out there with some inputs?</p>
"	4512907.0					2016-02-26 11:37:20	Linq Group by multiple conditions produces missing child records	<.net><linq>	0.0	13	0.0		
42830954	2		42818886.0	2017-03-16 10:10:10		3		"<p>The problem with the initial LINQ query is that you have exchanged the left and right parts, so it was equivalent of SQL <code>LeadSales LEFT OUTER JOIN Contacts</code>.</p>

<p>The problem with the updated query is that the <code>group by</code> clause is using <code>ls.Contact</code>, and since <code>ls</code> is the right end of the left outer join, it can be <code>null</code>. To match the SQL query, use <code>contact</code> variable (the left end of the join which is guaranteed to exist). Also note that SQL <code>COUNT(ls.SoldToContactID)</code> is excluding <code>NULL</code> values, so you have to account that in the LINQ query (there is no direct LINQ equivalent construct).</p>

<p>So the direct LINQ translation of the SQL query is like this:</p>

<pre><code>from c in contacts
join ls in leadSales on c.ContactID equals ls.SoldToContactID into c_ls
from ls in c_ls.DefaultIfEmpty()
group ls by new
{
    c.ContactID,
    c.FirstName,
    c.LastName
} into g
select new LeadBuyersByStateItem
{
    ContactID = g.Key.ContactID,
    Name = g.Key.LastName + "", "" + g.Key.FirstName,
    LeadsCount = g.Count(ls =&gt; ls != null)
};
</code></pre>

<p>But if you forget the SQL query and concentrate on the desired result, you'll see that there are simpler LINQ / EF versions of the same query.</p>

<p>The easiest is if you have navigation property from <code>Contact</code> to <code>LeadSale</code> (I've noticed you have from <code>LeadSale</code> to <code>Contact</code>) like</p>

<pre><code>public ICollection&lt;LeadSale&gt; LeadSales { get; set; }
</code></pre>

<p>Then the query is simply:</p>

<pre><code>from c in contacts
select new LeadBuyersByStateItem
{
    ContactID = c.ContactID,
    Name = c.LastName + "", "" + c.FirstName,
    LeadsCount = c.LeadSales.Count()
};
</code></pre>

<p>If you don't have such property, you can use <code>Count</code> with condition:</p>

<pre><code>from c in contacts
select new LeadBuyersByStateItem
{
    ContactID = c.ContactID,
    Name = c.LastName + "", "" + c.FirstName,
    LeadsCount = leadSales.Count(ls =&gt; ls.SoldToContactID == c.ContactID)
};
</code></pre>

<p>or <a href=""https://msdn.microsoft.com/en-us/library/bb311040.aspx#Anchor_1"" rel=""nofollow noreferrer"">group join</a>:</p>

<pre><code>from c in contacts
join ls in leadSales on c.ContactID equals ls.SoldToContactID into c_ls
select new LeadBuyersByStateItem
{
    ContactID = c.ContactID,
    Name = c.LastName + "", "" + c.FirstName,
    LeadsCount = c_ls.Count()
};
</code></pre>

<p>To recap, in all cases you should start the LINQ query with the required table.</p>
"	5202563.0					2017-03-16 10:10:10				0			
43878081	2		12972295.0	2017-05-09 19:11:50		5		"<p>Actually, I use two approaches to avoid <code>NullReferenceException</code> when I'm working with collections:
</p>

<pre><code>public class Foo
{
    public string Bar{get; set;}
}
void Main()
{
    var list = new List&lt;Foo&gt;();
    //before C# 6.0
    string barCSharp5 = list.DefaultIfEmpty(new Foo()).FirstOrDefault().Bar;
    //C# 6.0 or later
    var barCSharp6 = list.FirstOrDefault()?.Bar;
}
</code></pre>

<h2>For C# 6.0 or later:</h2>

<p>Use <code>?.</code> or <code>?[</code> to test if is null before perform a member access <a href=""https://docs.microsoft.com/en-us/dotnet/articles/csharp/language-reference/operators/null-conditional-operators"" rel=""noreferrer"">Null-conditional Operators documentation</a></p>

<p>Example:
<code>var barCSharp6 = list.FirstOrDefault()?.Bar;</code></p>

<h2>C# older version:</h2>

<p>Use <code>DefaultIfEmpty()</code> to retrieve a default value if the sequence is empty.<a href=""https://msdn.microsoft.com/en-us/library/bb360530(v=vs.110).aspx"" rel=""noreferrer"">MSDN Documentation</a></p>

<p>Example:
<code>string barCSharp5 = list.DefaultIfEmpty(new Foo()).FirstOrDefault().Bar;</code></p>
"	2551889.0					2017-05-09 19:11:50				1			
46688475	1	46688556.0		2017-10-11 12:41:52		0	30.0	"<p>I have a list of objects that each contains a different list of other objects, like this:</p>

<pre><code>Purchase (Date, Customer)
 - Item (Article No. , Price)
 - Item (Article No. , Price)
Purchase (Date, Customer)
 - Item (Article No. , Price)
 - Item (Article No. , Price)
</code></pre>

<p>I now want to run a query to find the purchase with the highest price for Item 1, in case several purchases with the same price exist, I want the latest one. </p>

<p>I've tried</p>

<pre><code>   myList
    .OrderBy(p =&gt; p.Items
      .Where(i =&gt; i.ArticleNo == ""numberImLookingFor"")
      .Select(x =&gt; x.Price))
    .ThenBy(p =&gt; p.Date)
    .LastOrDefault()
</code></pre>

<p>but I receive an argument exception ""at least one object must implement icomparable"". I think this is because OrderBy implements some kind of lazy sorting and the nested where clause gets in the way.</p>

<p>How can I achieve the desired result with Linq?</p>
"	1128104.0		1128104.0		2017-10-11 12:44:56	2017-10-11 12:53:34	OrderBy and ThenBy combined with nested Where?	<.net><linq>	1.0	1			
51726458	2		51726183.0	2018-08-07 12:09:13		0		"<p>Just use <code>Where</code>.   </p>

<pre><code> SqlParameter[] parameters2 =
    {
        new SqlParameter(""@codes_PrestaOOP"", 
                         string.Concat(contactUS.Where(s =&gt; s.PK_PrestaOOP != null)
                                                .Select(s =&gt; $""{s.PK_PrestaOOP},"")))
    };
</code></pre>
"	6485082.0					2018-08-07 12:09:13				1			
53546372	2		53543491.0	2018-11-29 19:39:21		0		"<p>You are trying to overwrite a parameter passed to the method.</p>

<p>Adjust the code in the implementation so it looks like this:</p>

<pre><code>public class NewsSorter : ISorter
{
    public IQueryable&lt;T&gt; NewsSort&lt;T&gt;(IQueryable&lt;T&gt; query) 
        where T : ISort
    {
        return query.OrderByDescending(p =&gt; p.NewsDate);
    }
}
</code></pre>
"	8582270.0					2018-11-29 19:39:21				1			
